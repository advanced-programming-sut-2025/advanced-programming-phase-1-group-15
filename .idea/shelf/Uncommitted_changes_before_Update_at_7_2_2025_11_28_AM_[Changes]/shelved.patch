Index: src/main/java/controllers/GameMenuController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\r\npackage controllers;\r\n\r\nimport models.App;\r\nimport models.Game;\r\nimport models.Player;\r\nimport models.Result;\r\nimport models.animals.*;\r\nimport models.artisanry.ArtisanItem;\r\nimport models.artisanry.ArtisanItemType;\r\nimport models.cooking.Food;\r\nimport models.cooking.FoodType;\r\nimport models.crafting.CraftItem;\r\nimport models.crafting.CraftItemType;\r\nimport models.enums.Gender;\r\nimport models.farming.*;\r\nimport models.farming.GeneralPlants.PloughedPlace;\r\nimport models.foraging.ForagingCropsType;\r\nimport models.foraging.ForagingSeedsType;\r\nimport models.map.*;\r\nimport models.npcs.DefaultNPCs;\r\nimport models.npcs.NPC;\r\nimport models.npcs.NPCFriendShip;\r\nimport models.npcs.Quest;\r\nimport models.relation.PlayerFriendship;\r\nimport models.relation.TradeWhitMoney;\r\nimport models.relation.TradeWithItem;\r\nimport models.stores.*;\r\nimport models.tools.*;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\npublic class GameMenuController {\r\n    public static Player getCurrentPlayer() {\r\n        return App.currentGame.getCurrentPlayer();\r\n    }\r\n\r\n    public static Result buildGreenHouse() {\r\n        GreenHouse greenHouse = getCurrentPlayer().getFarm().getGreenHouse();\r\n\r\n        if(greenHouse.isBuilt()) {\r\n            return new Result(false, \"you can't build your greenhouse twice\");\r\n        }\r\n        else if(getCurrentPlayer().getGold() < 1000) {\r\n            return new Result(false, \"not enough gold to build your greenhouse\");\r\n        }\r\n        else if (getCurrentPlayer().getWood() < 500) {\r\n            return new Result(false, \"not enough wood to build your greenhouse\");\r\n        }\r\n\r\n        getCurrentPlayer().subtractGold(1000);\r\n        getCurrentPlayer().subtractWood(500);\r\n        greenHouse.buildGreenHouse();\r\n        return new Result(true, \"greenhouse built successfully!\");\r\n    }\r\n\r\n    public static Result walk(int x, int y) {\r\n        if(x >= Map.COLS || y >= Map.ROWS || x < 0 || y < 0) {\r\n            return new Result(false, \"you are out of bounds!\");\r\n        }\r\n\r\n        Tile tile = App.currentGame.getTile(x, y);\r\n        if(!tile.isEmpty()) {\r\n            return new Result(false, \"you can't stand on a tile which is not empty.\");\r\n        }\r\n        else if(tile.getAreaType().equals(AreaType.LAKE)) {\r\n            return new Result(false, \"you're destination is in the lake!\");\r\n        }\r\n        else if(tile.getAreaType().equals(AreaType.FARM)) {\r\n            Farm farm = (Farm) tile.getArea();\r\n            if(!getCurrentPlayer().checkTerritory(farm)) {\r\n                return new Result(false, \"you cannot enter other players' territory.\");\r\n            }\r\n        }\r\n\r\n        int energyNeeded = getCurrentPlayer().calculateWalkingEnergy(new Position(x, y));\r\n\r\n        if(energyNeeded == -1) {\r\n            return new Result(false, \"tile is unreachable!\");\r\n        }\r\n        return new Result(true, energyNeeded + \" energy would be consumed. Do you agree? (y/n)\");\r\n    }\r\n\r\n    public static Result setPosition(int x, int y) {\r\n        Position position = new Position(x, y);\r\n\r\n        getCurrentPlayer().walk(position);\r\n        if(getCurrentPlayer().isFainted()) {\r\n            return new Result(false, \"Oops! you've fainted!\");\r\n        }\r\n\r\n        return new Result(true, \"moved to position \" + position + \" successfully.\");\r\n    }\r\n\r\n    public static Result removeFromInventory(String itemName, int count) {\r\n        BackPackable item = getCurrentPlayer().getInventory().getItemByName(itemName);\r\n        int availableCount = getCurrentPlayer().getInventory().getItemCount(itemName);\r\n        if(item == null) {\r\n            return new Result(false, \"You don't have that item.\");\r\n        }\r\n        else if(count > availableCount) {\r\n            return new Result(false, \"You only have \" + availableCount + \" \" + item.getName() + \" in your inventory.\");\r\n        }\r\n\r\n        TrashCan trashCan = getCurrentPlayer().getTrashCan();\r\n        if(count == -1) {\r\n            int returnedAmount = trashCan.use(item, availableCount, getCurrentPlayer());\r\n            getCurrentPlayer().getInventory().removeFromBackPack(item);\r\n            return new Result(true, item.getName() + \" moved to trash can.\\n\" +\r\n                    returnedAmount + \" gold added to your account.\");\r\n        }\r\n        else {\r\n            int returnedAmount = trashCan.use(item, count, getCurrentPlayer());\r\n            getCurrentPlayer().getInventory().removeCountFromBackPack(item, count);\r\n            return new Result(true, count + \" \" + item.getName() + \" moved to trash can.\\n\" +\r\n                    returnedAmount + \" gold added to your account.\");\r\n        }\r\n    }\r\n\r\n    public static Result equipTool(String toolName) {\r\n        Tool tool = (Tool) getCurrentPlayer().getInventory().getItemByName(toolName);\r\n\r\n        if(tool == null) {\r\n            return new Result(false, \"You don't have that tool.\");\r\n        }\r\n\r\n        getCurrentPlayer().setCurrentTool(tool);\r\n        return new Result(true, \"equipped tool \" + tool.getName() + \" successfully.\");\r\n    }\r\n    public static Result showCurrentTool() {\r\n        Tool tool = getCurrentPlayer().getCurrentTool();\r\n        if(tool == null) {\r\n            return new Result(false, \"you're not holding any tool!\");\r\n        }\r\n\r\n        return new Result(true, tool.getName());\r\n    }\r\n    public static Result upgradeTool(String toolName) {\r\n        Tile playerTile = App.currentGame.getTile(getCurrentPlayer().getPosition());\r\n\r\n        if(!(playerTile.getArea() instanceof Blacksmith)) {\r\n            return new Result(false, \"you have to be inside blacksmith to run this command.\");\r\n        }\r\n\r\n        Tool tool = (Tool) getCurrentPlayer().getInventory().getItemByName(toolName);\r\n\r\n        if(tool == null) {\r\n            return new Result(false, \"You don't have that tool.\");\r\n        }\r\n\r\n        return new Result(true, tool.upgrade(getCurrentPlayer()));\r\n    }\r\n    public static Result useTool(int dx, int dy) {\r\n        Tool tool = getCurrentPlayer().getCurrentTool();\r\n        if(tool == null) {\r\n            return new Result(false, \"choose a tool first\");\r\n        }\r\n        Position usePosition = new Position(getCurrentPlayer().getPosition().x + dx, getCurrentPlayer().getPosition().y + dy);\r\n        if(!Map.isBoundValid(usePosition)) {\r\n            return new Result(false, \"you are out of bounds!\");\r\n        }\r\n\r\n        Tile useTile = App.currentGame.getTile(usePosition);\r\n\r\n        return new Result(true, tool.use(useTile, getCurrentPlayer()));\r\n    }\r\n\r\n    public static Result putInFridge(String itemName) {\r\n        Tile tile = App.currentGame.getTile(getCurrentPlayer().getPosition());\r\n        if(!(tile.getArea() instanceof House playersHouse)) {\r\n            return new Result(false, \"you should be in your house to use fridge!\");\r\n        }\r\n        Fridge fridge = playersHouse.getFridge();\r\n\r\n        BackPackable item = getCurrentPlayer().getInventory().getItemByName(itemName);\r\n        if(item == null) {\r\n            return new Result(false, \"You don't have that item in your inventory.\");\r\n        }\r\n\r\n        int itemCount = getCurrentPlayer().getInventory().getItemCount(itemName);\r\n        fridge.addToFridge(item, itemCount);\r\n        getCurrentPlayer().getInventory().removeFromBackPack(item);\r\n\r\n        return new Result(true, item.getName() + \" moved to fridge.\");\r\n    }\r\n    public static Result pickFromFridge(String itemName) {\r\n        Tile tile = App.currentGame.getTile(getCurrentPlayer().getPosition());\r\n        if(!(tile.getArea() instanceof House playersHouse)) {\r\n            return new Result(false, \"you should be in your house to use fridge!\");\r\n        }\r\n        Fridge fridge = playersHouse.getFridge();\r\n\r\n        BackPackable item = fridge.getItemByName(itemName);\r\n        if(item == null) {\r\n            return new Result(false, \"You don't have that item in your fridge.\");\r\n        }\r\n\r\n        int itemCount = fridge.getItemCount(itemName);\r\n        getCurrentPlayer().getInventory().addToBackPack(item, itemCount);\r\n        fridge.removeFromFridge(item);\r\n\r\n        return new Result(true, item.getName() +  \" moved to inventory.\");\r\n    }\r\n    public static Result eatFood(String foodName) {\r\n        Food food = (Food) getCurrentPlayer().getInventory().getItemByName(foodName);\r\n        if(food == null) {\r\n            return new Result(false, \"You don't have that food.\");\r\n        }\r\n\r\n        getCurrentPlayer().eat(food);\r\n        getCurrentPlayer().getInventory().removeCountFromBackPack(food, 1);\r\n        return new Result(true, \"You ate \" + food.getName() + \". \" + food.getEnergy() + \" energy added.\");\r\n    }\r\n\r\n    public static Result buildBarn(int type, int x, int y) {\r\n        Tile playerTile = App.currentGame.getTile(getCurrentPlayer().getPosition());\r\n        if(!(playerTile.getArea() instanceof CarpenterShop)) {\r\n            return new Result(false, \"you should be inside carpenter shop to run this command.\");\r\n        }\r\n\r\n        boolean buildable = true;\r\n        int requiredGold; int requiredWood; int requiredStone;\r\n        int y_scale = 2, x_scale = 2;\r\n        switch (type) {\r\n            case 1 -> {\r\n                requiredGold = 12000; requiredWood = 450; requiredStone = 200;\r\n                x_scale = 4;\r\n            }\r\n            case 2 -> {\r\n                requiredGold = 25000; requiredWood = 550; requiredStone = 300;\r\n                y_scale = 3;\r\n                x_scale = 4;\r\n            }\r\n            default -> {\r\n                requiredGold = 6000; requiredWood = 350; requiredStone = 150;\r\n            }\r\n        }\r\n        for(int row = y; row < y + y_scale; row++) {\r\n            for(int col = x; col < x + x_scale; col++) {\r\n                Tile tile = App.currentGame.getTile(col, row);\r\n                if(!tile.isBuildable()) {\r\n                    buildable = false;\r\n                }\r\n            }\r\n        }\r\n\r\n        if(!buildable) {\r\n            return new Result(false, \"You can't build a barn in this Area.\");\r\n        }\r\n        else if(getCurrentPlayer().getGold() < requiredGold) {\r\n            return new Result(false, \"not enough gold to build.\");\r\n        }\r\n        else if(getCurrentPlayer().getWood() < requiredWood) {\r\n            return new Result(false, \"not enough wood to build.\");\r\n        }\r\n        else if(getCurrentPlayer().getStone() < requiredStone) {\r\n            return new Result(false, \"not enough stone to build.\");\r\n        }\r\n        else {\r\n            Barn barn = new Barn();\r\n            switch (type) {\r\n                case 1 -> barn.setBig();\r\n                case 2 -> barn.setDeluxe();\r\n            }\r\n            for(int row = y; row < y + y_scale; row++) {\r\n                for(int col = x; col < x + x_scale; col++) {\r\n                    Tile tile = App.currentGame.getTile(col, row);\r\n                    tile.setArea(barn);\r\n                }\r\n            }\r\n            getCurrentPlayer().subtractGold(requiredGold); getCurrentPlayer().subtractWood(requiredWood);\r\n            getCurrentPlayer().subtractStone(requiredStone);\r\n            return new Result(true, \"barn built successfully.\");\r\n        }\r\n    }\r\n    public static Result buildCoop(int type, int x, int y) {\r\n        Tile playerTile = App.currentGame.getTile(getCurrentPlayer().getPosition());\r\n        if(!(playerTile.getArea() instanceof CarpenterShop)) {\r\n            return new Result(false, \"you should be inside carpenter shop to run this command.\");\r\n        }\r\n\r\n        boolean buildable = true;\r\n        int requiredGold; int requiredWood; int requiredStone;\r\n        int y_scale = 2, x_scale = 2;\r\n        switch (type) {\r\n            case 1 -> {\r\n                requiredGold = 10000; requiredWood = 400; requiredStone = 150;\r\n                x_scale = 4;\r\n            }\r\n            case 2 -> {\r\n                requiredGold = 20000; requiredWood = 500; requiredStone = 200;\r\n                y_scale = 3;\r\n                x_scale = 4;\r\n            }\r\n            default -> {\r\n                requiredGold = 4000; requiredWood = 300; requiredStone = 100;\r\n            }\r\n        }\r\n        for(int row = y; row < y + y_scale; row++) {\r\n            for(int col = x; col < x + x_scale; col++) {\r\n                Tile tile = App.currentGame.getTile(col, row);\r\n                if(!tile.isBuildable()) {\r\n                    buildable = false;\r\n                }\r\n            }\r\n        }\r\n\r\n        if(!buildable) {\r\n            return new Result(false, \"You can't build a coop in this Area.\");\r\n        }\r\n        else if(getCurrentPlayer().getGold() < requiredGold) {\r\n            return new Result(false, \"not enough gold to build.\");\r\n        }\r\n        else if(getCurrentPlayer().getWood() < requiredWood) {\r\n            return new Result(false, \"not enough wood to build.\");\r\n        }\r\n        else if(getCurrentPlayer().getStone() < requiredStone) {\r\n            return new Result(false, \"not enough stone to build.\");\r\n        }\r\n        else {\r\n            Coop coop = new Coop();\r\n            switch (type) {\r\n                case 1 -> coop.setBig();\r\n                case 2 -> coop.setDeluxe();\r\n            }\r\n            for(int row = y; row < y + y_scale; row++) {\r\n                for(int col = x; col < x + x_scale; col++) {\r\n                    Tile tile = App.currentGame.getTile(col, row);\r\n                    tile.setArea(coop);\r\n                }\r\n            }\r\n            getCurrentPlayer().subtractGold(requiredGold); getCurrentPlayer().subtractWood(requiredWood);\r\n            getCurrentPlayer().subtractStone(requiredStone);\r\n            return new Result(true, \"coop built successfully.\");\r\n        }\r\n    }\r\n    public static Result buyAnimal(String animalType, String name) {\r\n        Tile playerTile = App.currentGame.getTile(getCurrentPlayer().getPosition());\r\n        if(!(playerTile.getArea() instanceof MarnieRanch)) {\r\n            return new Result(false, \"you have to be inside marnie's ranch to run this command.\");\r\n        }\r\n\r\n        Animal animal = Animal.animalFactory(animalType, name);\r\n        if(animal == null) {\r\n            return new Result(false, \"invalid animal type!\");\r\n        }\r\n\r\n        for(Animal playerAnimal : getCurrentPlayer().getAnimals()) {\r\n            if(animal.getName().equals(playerAnimal.getName())) {\r\n                return new Result(false, \"each animal must have a unique name.\");\r\n            }\r\n        }\r\n\r\n        boolean placed = getCurrentPlayer().getFarm().place(animal);\r\n\r\n        if(placed) {\r\n            App.currentGame.getDateAndTime().addObserver(animal);\r\n            getCurrentPlayer().getAnimals().add(animal);\r\n            getCurrentPlayer().subtractGold(animal.getBasePrice());\r\n\r\n            return new Result(true, \"a new \" + animal.getAnimalTypeName() + \" named \" + animal.getName() + \" has been bought.\");\r\n        }\r\n        else {\r\n            return new Result(false, \"not enough/not the required level \" + animal.getMaintenance() + \" space to buy this animal.\");\r\n        }\r\n    }\r\n    public static Result petAnimal(String name) {\r\n        Animal animal = getCurrentPlayer().getAnimalByName(name);\r\n\r\n        if(animal == null) {\r\n            return new Result(false, \"animal name is not correct.\");\r\n        }\r\n        else if(!getCurrentPlayer().getPosition().isAdjacent(animal.getPosition())) {\r\n            return new Result(false, \"your position is not adjacent!\");\r\n        }\r\n\r\n        animal.pet();\r\n        return new Result(true, \"you pet \" + animal.getName() + \".\");\r\n    }\r\n    public static Result shepherdAnimal(String name, int x, int y) {\r\n        Animal animal = getCurrentPlayer().getAnimalByName(name);\r\n        if(animal == null) {\r\n            return new Result(false, \"animal name is not correct.\");\r\n        }\r\n\r\n        if(x >= Map.COLS || y >= Map.ROWS || x < 0 || y < 0) {\r\n            return new Result(false, \"invalid x or y!\");\r\n        }\r\n\r\n        Tile tile = App.currentGame.getTile(x, y);\r\n        if(!App.currentGame.getWeather().couldShepherdAnimals()) {\r\n            return new Result(false, \"you cannot shepherd animals in this weather!\");\r\n        }\r\n        else if(!tile.isEmpty()) {\r\n            return new Result(false, \"animal can't stand on a tile which is not empty.\");\r\n        }\r\n        else if(tile.getAreaType().equals(AreaType.LAKE) && !animal.getAnimalType().equals(AnimalType.DUCK)) {\r\n            return new Result(false, \"only ducks can swim.\");\r\n        }\r\n        else if(tile.getAreaType().equals(AreaType.BARN) && !animal.getMaintenance().equals(Maintenance.BARN)) {\r\n            return new Result(false, \"you can't put a \" + animal.getAnimalType() + \" in a barn.\");\r\n        }\r\n        else if(tile.getAreaType().equals(AreaType.COOP) && !animal.getMaintenance().equals(Maintenance.COOP)) {\r\n            return new Result(false, \"you can't put a \" + animal.getAnimalType() + \" in a coop.\");\r\n        }\r\n        else if(tile.getAreaType().equals(AreaType.FARM)) {\r\n            Farm farm = (Farm) tile.getArea();\r\n            if(!getCurrentPlayer().checkTerritory(farm)) {\r\n                return new Result(false, \"your animals cannot enter other players' territory.\");\r\n            }\r\n        }\r\n\r\n        Tile initialTile = App.currentGame.getTile(animal.getPosition());\r\n        animal.setPosition(tile.getPosition());\r\n\r\n        tile.put(animal);\r\n        initialTile.empty();\r\n\r\n        animal.feed();\r\n        return new Result(true, \"shepherd \" + animal.getName() + \" successfully.\");\r\n    }\r\n    public static Result feedHayAnimal(String name) {\r\n        Animal animal = getCurrentPlayer().getAnimalByName(name);\r\n        if(animal == null) {\r\n            return new Result(false, \"animal name is not correct.\");\r\n        }\r\n        else if(!getCurrentPlayer().getPosition().isAdjacent(animal.getPosition())) {\r\n            return new Result(false, \"your position is not adjacent!\");\r\n        }\r\n        GeneralItem Hay = (GeneralItem) getCurrentPlayer().getInventory().getItemByName(\"hay\");\r\n        if(Hay == null) {\r\n            return new Result(false, \"you don't have any hay.\");\r\n        }\r\n\r\n        animal.feed();\r\n        getCurrentPlayer().getInventory().removeCountFromBackPack(Hay, 1);\r\n        return new Result(true, animal.getName() + \" fed with hay.\");\r\n    }\r\n    public static Result showAnimalProducts() {\r\n        StringBuilder sb = new StringBuilder();\r\n        sb.append(\"Available animal products: \\n\");\r\n        for(Animal animal : getCurrentPlayer().getAnimals()) {\r\n            if(animal.getCurrentProduct() != null) {\r\n                sb.append(animal.getName()).append(\"    \");\r\n                sb.append(animal.getCurrentProduct().getName()).append(\"  quality: \");\r\n                sb.append(animal.getCurrentProduct().getProductQuality()).append(\"\\n\");\r\n            }\r\n        }\r\n\r\n        return new Result(true, sb.toString());\r\n    }\r\n    public static Result collectProduce(String name) {\r\n        Animal animal = getCurrentPlayer().getAnimalByName(name);\r\n        if(animal == null) {\r\n            return new Result(false, \"animal name is not correct.\");\r\n        }\r\n        else if(!getCurrentPlayer().getPosition().isAdjacent(animal.getPosition())) {\r\n            return new Result(false, \"your position is not adjacent!\");\r\n        }\r\n\r\n        else if(animal.getCurrentProduct() == null) {\r\n            return new Result(false, \"no product is available for this animal!\");\r\n        }\r\n        else if(animal.getAnimalType().equals(AnimalType.COW) || animal.getAnimalType().equals(AnimalType.GOAT)) {\r\n            return new Result(false, \"you have to use milk pail to collect these products.\");\r\n        }\r\n        else if(animal.getAnimalType().equals(AnimalType.SHEEP)) {\r\n            return new Result(false, \"you have to use shear to collect this product.\");\r\n        }\r\n        getCurrentPlayer().getInventory().addToBackPack(animal.getCurrentProduct(), 1);\r\n        animal.setCurrentProduct(null);\r\n\r\n        return new Result(true, \"product added to the inventory.\");\r\n    }\r\n    public static Result sellAnimal(String name) {\r\n        Animal animal = getCurrentPlayer().getAnimalByName(name);\r\n        if(animal == null) {\r\n            return new Result(false, \"animal name is not correct.\");\r\n        }\r\n        Tile animalTile = App.currentGame.getTile(animal.getPosition());\r\n\r\n        App.currentGame.getDateAndTime().removeObserver(animal);\r\n        getCurrentPlayer().getAnimals().remove(animal);\r\n        getCurrentPlayer().addGold(animal.getPrice());\r\n        animalTile.empty();\r\n\r\n        return new Result(true,  animal.getName() + \" has been sold with price \" + animal.getPrice());\r\n    }\r\n    public static Result fishing(String material) {\r\n        Lake lake = null;\r\n        for(int row = getCurrentPlayer().getPosition().y - 1; row <= getCurrentPlayer().getPosition().y + 1; row++) {\r\n            for(int col = getCurrentPlayer().getPosition().x - 1; col <= getCurrentPlayer().getPosition().x + 1; col++) {\r\n                if(App.currentGame.getTile(col, row).getArea() instanceof Lake) {\r\n                    lake = (Lake) App.currentGame.getTile(col, row).getArea();\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        if(lake == null) {\r\n            return new Result(false, \"You need to stand adjacent to lake.\");\r\n        }\r\n        else {\r\n            FishingPole fishingPole = getCurrentPlayer().getInventory().getFishingPole(material);\r\n\r\n            if(fishingPole == null) {\r\n                return new Result(false, \"fishing pole not found.\");\r\n            }\r\n\r\n            return new Result(true, fishingPole.use(lake, getCurrentPlayer(), App.currentGame.getWeather().getCurrentWeather()));\r\n        }\r\n    }\r\n\r\n    public static Result showStoreProducts() {\r\n        Tile playerTile = App.currentGame.getTile(getCurrentPlayer().getPosition());\r\n\r\n        if(!playerTile.getAreaType().equals(AreaType.STORE)) {\r\n            return new Result(false, \"You need to be in a store to run this command.\\n\");\r\n        }\r\n\r\n        Store store = (Store) playerTile.getArea();\r\n        if(!store.isOpen(App.currentGame.getDateAndTime().getHour())) {\r\n            return new Result(false, \"store is closed now!\\n\");\r\n        }\r\n\r\n        return new Result(true, \"All Items: \\n\" + store.displayItems());\r\n    }\r\n    public static Result showAvailableStoreProducts() {\r\n        Tile playerTile = App.currentGame.getTile(getCurrentPlayer().getPosition());\r\n\r\n        if(!playerTile.getAreaType().equals(AreaType.STORE)) {\r\n            return new Result(false, \"You need to be in a store to run this command.\\n\");\r\n        }\r\n\r\n        Store store = (Store) playerTile.getArea();\r\n        if(!store.isOpen(App.currentGame.getDateAndTime().getHour())) {\r\n            return new Result(false, \"store is closed now!\\n\");\r\n        }\r\n\r\n        return new Result(true, \"All Available Items Fot You: \\n\" + store.displayAvailableItems());\r\n    }\r\n    public static Result purchaseProduct(String productName, int count) {\r\n        Tile playerTile = App.currentGame.getTile(getCurrentPlayer().getPosition());\r\n\r\n        if(!playerTile.getAreaType().equals(AreaType.STORE)) {\r\n            return new Result(false, \"You need to be in a store to run this command.\");\r\n        }\r\n\r\n        Store store = (Store) playerTile.getArea();\r\n        if(!store.isOpen(App.currentGame.getDateAndTime().getHour())) {\r\n            return new Result(false, \"store is closed now!\");\r\n        }\r\n\r\n        if(!store.checkAvailable(productName)) {\r\n            return new Result(false, \"product is not available!\");\r\n        }\r\n        else if(!store.checkAmount(productName, count)) {\r\n            return new Result(false, \"daily limit exceeded!\");\r\n        }\r\n\r\n        return new Result(true, store.sell(getCurrentPlayer(), productName, count));\r\n    }\r\n    public static Result sellProduct(String productName, int count) {\r\n        ShippingBin sb = null;\r\n        for(int row = getCurrentPlayer().getPosition().y - 1; row <= getCurrentPlayer().getPosition().y + 1; row++) {\r\n            for(int col = getCurrentPlayer().getPosition().x - 1; col <= getCurrentPlayer().getPosition().x + 1; col++) {\r\n                if(row >= 0 && col >= 0) {\r\n                    Tile tile = App.currentGame.getTile(col, row);\r\n                    if(!tile.isEmpty() && tile.getObjectInTile() instanceof ShippingBin) {\r\n                        sb = (ShippingBin) tile.getObjectInTile();\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        if(sb == null) {\r\n            return new Result(false, \"You have to stand next to a shipping bin!\");\r\n        }\r\n\r\n        BackPackable item = getCurrentPlayer().getInventory().getItemByName(productName);\r\n        int availableCount = getCurrentPlayer().getInventory().getItemCount(productName);\r\n\r\n        if(item == null) {\r\n            return new Result(false, \"You don't have that item.\");\r\n        }\r\n        else if(count > availableCount) {\r\n            return new Result(false, \"You only have \" + availableCount + \" \" + item.getName() + \" in your inventory.\");\r\n        }\r\n        else if(item.getPrice() == 0) {\r\n            return new Result(false, \"this item is not sellable.\");\r\n        }\r\n\r\n        if(count == -1) {\r\n            sb.addToBin(item, availableCount);\r\n            getCurrentPlayer().getInventory().removeFromBackPack(item);\r\n            return new Result(true, \"Sold all of your \" + item.getName() + \". You'll earn \" + availableCount * item.getPrice() + \" gold.\");\r\n        }\r\n        else {\r\n            sb.addToBin(item, count);\r\n            getCurrentPlayer().getInventory().removeCountFromBackPack(item, count);\r\n            return new Result(true, \"Sold \" + count + \" of your \" + item.getName() + \". You'll earn \" + count * item.getPrice() + \" gold.\");\r\n        }\r\n    }\r\n\r\n    public static Result showFriendships() {\r\n        StringBuilder sb = new StringBuilder();\r\n        for (PlayerFriendship friendship : App.currentGame.getFriendships()) {\r\n            if(friendship.getPlayer1().equals(getCurrentPlayer())) {\r\n                sb.append(\"with \").append(friendship.getPlayer2().getUsername());\r\n                sb.append(\" xp: \").append(friendship.getXP()).append(\" level: \").append(friendship.getLevel()).append(\"\\n\");\r\n            }\r\n            else if(friendship.getPlayer2().equals(getCurrentPlayer())) {\r\n                sb.append(\"with \").append(friendship.getPlayer1().getUsername());\r\n                sb.append(\" xp: \").append(friendship.getXP()).append(\" level: \").append(friendship.getLevel()).append(\"\\n\");\r\n            }\r\n        }\r\n\r\n        return new Result(true, sb.toString());\r\n    }\r\n    public static Result talkFriendship(String username, String message) {\r\n        Player receiver = App.currentGame.getPlayerByUsername(username);\r\n        if(receiver == null) {\r\n            return new Result(false, \"invalid player username!\");\r\n        }\r\n        if(getCurrentPlayer().equals(receiver)) {\r\n            return new Result(false, \"you can't message yourself!\");\r\n        }\r\n\r\n        Tile playerTile = App.currentGame.getTile(getCurrentPlayer().getPosition());\r\n        Tile recieverTile = App.currentGame.getTile(receiver.getPosition());\r\n        if(!playerTile.isAdjacent(recieverTile)) {\r\n            return new Result(false, \"you have to be next to a player to talk to them.\");\r\n        }\r\n\r\n        PlayerFriendship friendship = App.currentGame.getFriendshipByPlayers(getCurrentPlayer(), receiver);\r\n        friendship.talk(getCurrentPlayer(), message);\r\n        receiver.addMessage(new PlayerFriendship.Message(getCurrentPlayer(), message));\r\n\r\n        return new Result(true, \"your message sent successfully.\");\r\n    }\r\n    public static Result talkHistory(String username) {\r\n        Player target = App.currentGame.getPlayerByUsername(username);\r\n        if(target == null) {\r\n            return new Result(false, \"invalid player username!\\n\");\r\n        }\r\n        if(getCurrentPlayer().equals(target)) {\r\n            return new Result(false, \"you don't have any messages with yourself!\\n\");\r\n        }\r\n\r\n        PlayerFriendship friendship = App.currentGame.getFriendshipByPlayers(getCurrentPlayer(), target);\r\n        StringBuilder sb = new StringBuilder();\r\n\r\n        for(PlayerFriendship.Message message : friendship.getMessages()) {\r\n            if(message.sender().equals(getCurrentPlayer())) {\r\n                sb.append(\"from: you    message: \\\"\").append(message.message()).append(\"\\\"\\n\");\r\n            }\r\n            else {\r\n                sb.append(\"from: \").append(message.sender().getUsername()).append(\"    message: \\\"\").append(message.message()).append(\"\\\"\\n\");\r\n            }\r\n        }\r\n\r\n        return new Result(true, sb.toString());\r\n    }\r\n    public static Result gift(String username, String itemName, int amount) {\r\n        Player receiver = App.currentGame.getPlayerByUsername(username);\r\n        if(receiver == null) {\r\n            return new Result(false, \"invalid player username!\");\r\n        }\r\n        if(getCurrentPlayer().equals(receiver)) {\r\n            return new Result(false, \"you can't gift yourself!\");\r\n        }\r\n\r\n        BackPackable item = getCurrentPlayer().getInventory().getItemByName(itemName);\r\n        int availableCount = getCurrentPlayer().getInventory().getItemCount(itemName);\r\n        if(item == null) {\r\n            return new Result(false, \"you don't have that item.\");\r\n        }\r\n        if(amount > availableCount) {\r\n            return new Result(false, \"you don't have enough amount of that item.\");\r\n        }\r\n\r\n        Player sender = getCurrentPlayer();\r\n        PlayerFriendship friendship = App.currentGame.getFriendshipByPlayers(getCurrentPlayer(), receiver);\r\n        if(friendship.getLevel() < 1) {\r\n            return new Result(false, \"at least 1 level of friendship required!\");\r\n        }\r\n        friendship.gift(sender, item);\r\n        receiver.addToBackPack(item, amount);\r\n        receiver.addMessage(new PlayerFriendship.Message(sender, amount + \" \" + itemName + \" for you!\"));\r\n        sender.getInventory().removeCountFromBackPack(item, amount);\r\n\r\n        return new Result(true, \"you gave \"  + amount + \" \" + itemName + \" to \" + receiver.getUsername() + \"!\");\r\n    }\r\n    public static Result giftList(String username) {\r\n        Player sender = App.currentGame.getPlayerByUsername(username);\r\n        if(sender == null) {\r\n            return new Result(false, \"invalid player username!\");\r\n        }\r\n        if(getCurrentPlayer().equals(sender)) {\r\n            return new Result(false, \"Oops!\");\r\n        }\r\n\r\n        PlayerFriendship friendship = App.currentGame.getFriendshipByPlayers(sender, getCurrentPlayer());\r\n        StringBuilder sb = new StringBuilder();\r\n        sb.append(\"gift list: \\n\");\r\n        if(friendship.getGifts(sender) != null) {\r\n            for (int i = 0; i < friendship.getGifts(sender).size(); i++) {\r\n                PlayerFriendship.Gift gift = friendship.getGifts(sender).get(i);\r\n                sb.append((i + 1)).append(\".  \").append(gift.getItem().getName());\r\n                if (gift.getRate() == 0) {\r\n                    sb.append(\"    unrated\\n\");\r\n                } else {\r\n                    sb.append(\"    rate: \").append(gift.getRate()).append(\"/5\\n\");\r\n                }\r\n            }\r\n        }\r\n\r\n        return new Result(true, sb.toString());\r\n    }\r\n    public static Result rateGift(String username, int giftNumber, int rate) {\r\n        Player sender = App.currentGame.getPlayerByUsername(username);\r\n        if(sender == null) {\r\n            return new Result(false, \"invalid player username!\");\r\n        }\r\n        if(getCurrentPlayer().equals(sender)) {\r\n            return new Result(false, \"Oops!\");\r\n        }\r\n\r\n        PlayerFriendship friendship = App.currentGame.getFriendshipByPlayers(sender, getCurrentPlayer());\r\n        if(giftNumber <= 0 || giftNumber > friendship.getGifts(sender).size()) {\r\n            return new Result(false, \"invalid gift number!\");\r\n        }\r\n        else if(!(1 <= rate && rate <= 5)) {\r\n            return new Result(false, \"choose between 1 to 5.\");\r\n        }\r\n        else if(friendship.getGifts(sender).get(giftNumber - 1).getRate() != 0) {\r\n            return new Result(false, \"you can rate each gift once.\");\r\n        }\r\n\r\n        friendship.getGifts(sender).get(giftNumber - 1).setRate(rate);\r\n        friendship.rateGift(rate);\r\n        return new Result(true, \"you rated \" + friendship.getGifts(sender).get(giftNumber - 1).getItem().getName()\r\n                + \" with \" + rate + \"/5\");\r\n    }\r\n    public static Result giftHistory(String username) {\r\n        Player sender = App.currentGame.getPlayerByUsername(username);\r\n        if(sender == null) {\r\n            return new Result(false, \"invalid player username!\");\r\n        }\r\n        if(getCurrentPlayer().equals(sender)) {\r\n            return new Result(false, \"Oops!\");\r\n        }\r\n\r\n        PlayerFriendship friendship = App.currentGame.getFriendshipByPlayers(sender, getCurrentPlayer());\r\n        StringBuilder sb = new StringBuilder();\r\n        if(friendship.getGifts(sender) != null) {\r\n            sb.append(\"gifts from \").append(sender.getUsername()).append(\": \\n\");\r\n            for(PlayerFriendship.Gift gift : friendship.getGifts(sender)) {\r\n                sb.append(gift.getItem().getName());\r\n                if(gift.getRate() == 0) {\r\n                    sb.append(\"    unrated\\n\");\r\n                }\r\n                else {\r\n                    sb.append(\"    rate: \").append(gift.getRate()).append(\"/5\\n\");\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            sb.append(\"no gifts from \").append(sender.getUsername()).append(\"!\\n\");\r\n        }\r\n\r\n        if(friendship.getGifts(getCurrentPlayer()) != null) {\r\n            sb.append(\"gifts from you: \\n\");\r\n            for(PlayerFriendship.Gift gift : friendship.getGifts(getCurrentPlayer())) {\r\n                sb.append(gift.getItem().getName());\r\n                if(gift.getRate() == 0) {\r\n                    sb.append(\"    unrated\\n\");\r\n                }\r\n                else {\r\n                    sb.append(\"    rate: \").append(gift.getRate()).append(\"/5\\n\");\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            sb.append(\"no gifts from you!\\n\");\r\n        }\r\n\r\n        return new Result(true, sb.toString());\r\n    }\r\n    public static Result hug(String username) {\r\n        Player receiver = App.currentGame.getPlayerByUsername(username);\r\n        if(receiver == null) {\r\n            return new Result(false, \"invalid player username!\");\r\n        }\r\n        if(getCurrentPlayer().equals(receiver)) {\r\n            return new Result(false, \"you can't hug yourself!\");\r\n        }\r\n\r\n        Tile playerTile = App.currentGame.getTile(getCurrentPlayer().getPosition());\r\n        Tile recieverTile = App.currentGame.getTile(receiver.getPosition());\r\n        if(!playerTile.isAdjacent(recieverTile)) {\r\n            return new Result(false, \"you have to be next to a player to hug them.\");\r\n        }\r\n\r\n        PlayerFriendship friendship = App.currentGame.getFriendshipByPlayers(getCurrentPlayer(), receiver);\r\n        if(friendship.getLevel() < 2) {\r\n            return new Result(false, \"at least 2 levels of friendship required!\");\r\n        }\r\n\r\n        friendship.hug();\r\n        return new Result(true, \"you hugged \"  + receiver.getUsername() + \"!\");\r\n    }\r\n    public static Result flower(String username) {\r\n        Player receiver = App.currentGame.getPlayerByUsername(username);\r\n        if(receiver == null) {\r\n            return new Result(false, \"invalid player username!\");\r\n        }\r\n        if(getCurrentPlayer().equals(receiver)) {\r\n            return new Result(false, \"you can't give flower to yourself!\");\r\n        }\r\n\r\n        Tile playerTile = App.currentGame.getTile(getCurrentPlayer().getPosition());\r\n        Tile recieverTile = App.currentGame.getTile(receiver.getPosition());\r\n        if(!playerTile.isAdjacent(recieverTile)) {\r\n            return new Result(false, \"you have to be next to a player to give flower to them.\");\r\n        }\r\n\r\n        PlayerFriendship friendship = App.currentGame.getFriendshipByPlayers(getCurrentPlayer(), receiver);\r\n        if(friendship.getLevel() < 2) {\r\n            return new Result(false, \"at least 2 levels of friendship required!\");\r\n        }\r\n\r\n        GeneralItem flower = (GeneralItem) getCurrentPlayer().getInventory().getItemByName(GeneralItemsType.BOUQUET.getName());\r\n        if(flower == null) {\r\n            return new Result(false, \"first purchase bouquet!\");\r\n        }\r\n\r\n        friendship.flower();\r\n        receiver.addToBackPack(flower, 1);\r\n        receiver.addMessage(new PlayerFriendship.Message(getCurrentPlayer(), \"flowers for you ♡\"));\r\n        getCurrentPlayer().getInventory().removeCountFromBackPack(flower, 1);\r\n\r\n        return new Result(true, \"you gave flower to \"  + receiver.getUsername() + \". friendship upgraded to level 3.\");\r\n    }\r\n    public static Result marry(String username) {\r\n        Player target = App.currentGame.getPlayerByUsername(username);\r\n        if(target == null) {\r\n            return new Result(false, \"invalid player username!\\n\");\r\n        }\r\n\r\n        Tile playerTile = App.currentGame.getTile(getCurrentPlayer().getPosition());\r\n        Tile targetTile = App.currentGame.getTile(target.getPosition());\r\n        if(!playerTile.isAdjacent(targetTile)) {\r\n            return new Result(false, \"you have to be next to a player to ask for marriage!\");\r\n        }\r\n\r\n        if(getCurrentPlayer().getGender().equals(Gender.GIRL)) {\r\n            return new Result(false, \"you have to be a boy to ask for marriage!\");\r\n        }\r\n        else if(target.getGender().equals(Gender.BOY)) {\r\n            return new Result(false, \"Why are you gay?\");\r\n        }\r\n        PlayerFriendship friendship = App.currentGame.getFriendshipByPlayers(getCurrentPlayer(), target);\r\n        if(friendship.getLevel() < 3) {\r\n            return new Result(false, \"at least 3 levels of friendship required!\");\r\n        }\r\n\r\n        GeneralItem ring = (GeneralItem) getCurrentPlayer().getInventory().getItemByName(GeneralItemsType.WEDDING_RING.getName());\r\n        if(ring == null) {\r\n            return new Result(false, \"first purchase wedding ring!\");\r\n        }\r\n\r\n        target.addMessage(new PlayerFriendship.Message(getCurrentPlayer(), \"Will you Marry me?\"));\r\n        return new Result(true, \"You're proposal has been sent to \" + target.getUsername() + \".\");\r\n    }\r\n    public static Result respondMarriage(String username, String answer) {\r\n        Player husband = App.currentGame.getPlayerByUsername(username);\r\n        if(husband == null) {\r\n            return new Result(false, \"invalid player username!\\n\");\r\n        }\r\n\r\n        PlayerFriendship friendship = App.currentGame.getFriendshipByPlayers(husband, getCurrentPlayer());\r\n        if(answer.equals(\"-accept\")) {\r\n            friendship.marry();\r\n\r\n            GeneralItem ring = (GeneralItem) husband.getInventory().getItemByName(GeneralItemsType.WEDDING_RING.getName());\r\n            if(ring == null) {\r\n                return new Result(false, \"there has been no proposal!!!\");\r\n            }\r\n            getCurrentPlayer().addToBackPack(ring, 1);\r\n            husband.getInventory().removeCountFromBackPack(ring, 1);\r\n            husband.addMessage(new PlayerFriendship.Message(getCurrentPlayer(), \"I'll Marry you!\"));\r\n\r\n            return new Result(true, \"CONGRATS ON YOUR WEDDING!\");\r\n        }\r\n        else {\r\n            friendship.reject();\r\n            husband.reject(App.currentGame.getDateAndTime().getDay());\r\n            husband.addMessage(new PlayerFriendship.Message(getCurrentPlayer(), \"your proposal has been rejected :(\"));\r\n\r\n            return new Result(true, \"you broke his heart :(\");\r\n        }\r\n    }\r\n\r\n    public static Result showCropInfo(String name) {\r\n        Crops crop = Crops.getByName(name);\r\n        if (crop != null) {\r\n            return new Result(true, crop.toString());\r\n        }\r\n        TreeType tree = TreeType.getTreeTypeByName(name);\r\n        if (tree != null) {\r\n            return new Result(true, tree.toString());\r\n        }\r\n        ForagingCropsType foragingCrop = ForagingCropsType.getByName(name);\r\n        if (foragingCrop != null) {\r\n            return new Result(true, foragingCrop.toString());\r\n        }\r\n        ForagingSeedsType foragingSeed = ForagingSeedsType.getByName(name);\r\n        if (foragingSeed != null) {\r\n            return new Result(true, foragingSeed.toString());\r\n        }\r\n        return new Result(false, \"No such crop '\" + name + \"'.\");\r\n    }\r\n\r\n    public static Result plant(String seedName, int dx, int dy) {\r\n        Game current = App.currentGame;\r\n        int nextX = current.getCurrentPlayer().getPosition().x + dx;\r\n        int nextY = current.getCurrentPlayer().getPosition().y + dy;\r\n\r\n        if(dx==0 && dy==0) {return new Result(false,\"this is not a valid direction!\");}\r\n\r\n        if(nextX>Map.COLS||nextY>Map.ROWS||nextX<0||nextY<0) {\r\n            return new Result(false,\"you are going out of bounds!\");}\r\n\r\n        Tile goalTile = App.currentGame.getMap().getTile(new Position(nextX,nextY));\r\n\r\n        if(!(goalTile.getObjectInTile() instanceof PloughedPlace))\r\n            return new Result(false,\"you should plough the tile first!\");\r\n\r\n        PloughedPlace tobeSeeded = (PloughedPlace) goalTile.getObjectInTile();\r\n\r\n        if(CropSeeds.getByName(seedName) != null){\r\n            return tobeSeeded.seed(CropSeeds.getByName(seedName));\r\n        }\r\n\r\n        if(SeedType.getByName(seedName) != null){\r\n            return tobeSeeded.seed(SeedType.getByName(seedName));\r\n        }\r\n\r\n        return new Result(false,\"no seed found with this name\");\r\n    }\r\n\r\n    public static Result fertilize(String fertilizerName, Position position) {\r\n        Tile goalTile = App.currentGame.getMap().getTile(position);\r\n        if(goalTile.getObjectInTile() == null) return new Result(false,\"goal tile is empty------\");\r\n        if(!goalTile.getObjectInTile().getClass().equals(PloughedPlace.class))\r\n            return new Result(false,\"goal tile is not a PloughedPlace\");\r\n        PloughedPlace goalPlace = (PloughedPlace) goalTile.getObjectInTile();\r\n        if(fertilizerName.equals(\"water\")){\r\n            return goalPlace.fertilize(Fertilizer.Water);\r\n        }\r\n        else if(fertilizerName.equals(\"growth\")){\r\n            return goalPlace.getCurrentState().fertilize(Fertilizer.Growth);\r\n        }\r\n        else {\r\n            return new Result(false,\"fertilizer not found\");\r\n        }\r\n    }\r\n\r\n    public static Result plantMixedSeed(int dx,int dy) {\r\n\r\n        CropSeeds randomSeed = MixedSeedCrop.getRandomSeed(App.currentGame.getDateAndTime().getSeason());\r\n\r\n        return plant(randomSeed.name(), dx, dy); // if incorrect errors are shown you should check plant method\r\n    }\r\n\r\n\r\n    public static Result showPlant(int x, int y) {\r\n        Position position = new Position(x, y);\r\n        if(position.outOfBounds()) {\r\n            return new Result(false,\"this position is out of bounds!\");\r\n        }\r\n        Tile tile = App.currentGame.getMap().getTile(position);\r\n        if(tile.getObjectInTile() == null)\r\n            return new Result(false,\"this tile is empty\");\r\n        if(!(tile.getObjectInTile() instanceof PloughedPlace))\r\n            return new Result(false,\"this is not a ploughed tile!\");\r\n        PloughedPlace toBeShown = (PloughedPlace) tile.getObjectInTile();\r\n\r\n        if(!toBeShown.hasTreeOrCrop())\r\n            return new Result(false,\"there is not any plant here!\");\r\n        return new Result(true,toBeShown.printInfo());\r\n\r\n    }\r\n\r\n    public static Result placeItem(String itemName, Position position) {\r\n        return null;\r\n    }\r\n\r\n\r\n    public static Result askMarriage(String username, String ringName) {\r\n        return null;\r\n    }\r\n\r\n    public static void AddRecipe(String recipeName) {\r\n        recipeName = recipeName.trim().toLowerCase().replaceAll(\"_\", \" \");\r\n        Player player = App.currentGame.getCurrentPlayer();\r\n        for(FoodType foodType : FoodType.values()) {\r\n            if(foodType.getName().equals(recipeName)) {\r\n                player.getAvailableFoods().add(new Food(foodType));\r\n                System.out.println(\"recipe add to inventory:\" + foodType.getName());\r\n                return;\r\n            }\r\n        }\r\n        for (CraftItemType craftItem : CraftItemType.values()) {\r\n            if (craftItem.getName().equals(recipeName)){\r\n                player.getAvailableCrafts().add(new CraftItem(craftItem));\r\n                System.out.println(\"recipe add to inventory:\" + craftItem.getName());\r\n                return;\r\n            }\r\n        }\r\n        System.out.println(\"invalid recipe type\");\r\n    }\r\n    public static Result meetNPC(String npcName) {\r\n        Player player = App.currentGame.getCurrentPlayer();\r\n        NPC npc = DefaultNPCs.getInstance().getNPCByName(npcName);\r\n        if(npc == null){\r\n            return new Result(false,\"invalid name for npc\");\r\n        }\r\n        if(!player.getPosition().isAdjacent(npc.getHomeLocation().getPosition()))\r\n            return new Result(false,\"npc is not besides of you\");\r\n        return new Result(true,npc.meet(player));\r\n    }\r\n\r\n    public static Result giftNPC(String NPCName, String itemName) {\r\n        Player player = App.currentGame.getCurrentPlayer();\r\n        NPC npc = DefaultNPCs.getInstance().getNPCByName(NPCName);\r\n        if(npc == null){\r\n            return new Result(false,\"invalid name for npc\");\r\n        }\r\n        if(!player.getPosition().isAdjacent(npc.getHomeLocation().getPosition())){\r\n            return new Result(false,\"you are not adjacent with this npc\");\r\n        }\r\n        return new Result(true,npc.gift(player,getCurrentPlayer().getInventory().getItemByName(itemName)));\r\n    }\r\n\r\n    public static Result friendShipNPCList(){\r\n        Player player = getCurrentPlayer();\r\n        StringBuilder answer = new StringBuilder();\r\n        for(NPC npc : DefaultNPCs.getInstance().getDefaultOnes().values()){\r\n            if(npc.getFriendships().getOrDefault(player,null)!=null){\r\n                NPCFriendShip friendship = npc.getFriendships().get(player);\r\n                answer.append(\"npc name: \"+npc.getName()+\"\\n\"\r\n                        +\"your points: \"+friendship.getPoints()+\"\\n\"+\r\n                        \"your friendship level: \"+friendship.getLevel()+\"\\n\"+\r\n                        \"--------------------------------------\\n\");\r\n            }\r\n        }\r\n        if(answer.isEmpty()) return new Result(false,\"you have not started any relationship \\n\");\r\n        return new Result(true,answer.toString());\r\n    }\r\n\r\n    public static Result questLists() {\r\n        Player player = App.currentGame.getCurrentPlayer();\r\n        StringBuilder answer = new StringBuilder();\r\n        List<Quest> quests = new ArrayList<>();\r\n        int number = 1;\r\n        for (NPC npc : DefaultNPCs.getInstance().getDefaultOnes().values()) {\r\n            NPCFriendShip fs = npc.getFriendships().get(player);\r\n            if (fs != null) {\r\n                for (Quest q : fs.getPlayerQuests().keySet()) {\r\n                    if (fs.getPlayerQuests().get(q)) {\r\n                        answer.append(q.getInfo(number));\r\n                        number ++;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return new Result(true, answer.toString());\r\n    }\r\n\r\n    public static Result finishQuest(int index) {\r\n        Player player = App.currentGame.getCurrentPlayer();\r\n        ArrayList<Quest> quests = new ArrayList<>();\r\n        ArrayList<NPCFriendShip> friendships = new ArrayList<>();\r\n        for(NPC npc : DefaultNPCs.getInstance().getDefaultOnes().values()){\r\n            NPCFriendShip fs = npc.getFriendships().get(player);\r\n            if (fs != null) {\r\n                for (Quest q : fs.getPlayerQuests().keySet()) {\r\n                    if (fs.getPlayerQuests().get(q)) {\r\n                        quests.add(q);\r\n                        friendships.add(fs);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return friendships.get(index-1).finishQuest(quests.get(index-1).getRequest());\r\n    }\r\n    public static void ShowRecipe() {\r\n        Player player = getCurrentPlayer();\r\n        for (CraftItem availableCraft : player.getAvailableCrafts()) {\r\n            System.out.println(availableCraft.getCraftItemType().recipe);\r\n        }\r\n    }\r\n    public static Result crafting(String craftingName) {\r\n        Player player = App.currentGame.getCurrentPlayer();\r\n        craftingName = craftingName.trim().toLowerCase().replaceAll(\"_\", \" \");\r\n        if (player.getInventory().getItems().size()==player.getInventory().getCapacity()){\r\n            return new Result(false , \"your inventory is full!\");\r\n        }\r\n        CraftItem temp = null;\r\n        for (CraftItem availableCraft : player.getAvailableCrafts()) {\r\n            if(availableCraft.getName().equals(craftingName)){\r\n                temp = availableCraft;\r\n            }\r\n        }\r\n        if(temp == null) {\r\n            return new Result(false, \"You can't craft this item\");\r\n        }\r\n        for (BackPackable backPackable : temp.getCraftItemType().ingredients.keySet()) {\r\n            boolean find = false;\r\n            for (BackPackable packable : player.getInventory().getItems().keySet()) {\r\n                if(packable.getName().equals(backPackable.getName())){\r\n                    find = true;\r\n                    int num = player.getInventory().getItemCount(packable.getName());\r\n                    int number = temp.getCraftItemType().ingredients.get(backPackable);\r\n                    if(number > num)\r\n                        return new Result(false , \"You don't have enough material\");\r\n                }\r\n                break;\r\n            }\r\n            if(!find) {\r\n                return new Result(false , \"You don't have enough material\");\r\n            }\r\n        }\r\n        for (BackPackable backPackable : player.getInventory().getItems().keySet()) {\r\n            for (BackPackable packable : temp.getCraftItemType().ingredients.keySet()) {\r\n                if(packable.getName().equals(backPackable.getName())){\r\n                    int num = player.getInventory().getItemCount(packable.getName());\r\n                    int number = temp.getCraftItemType().ingredients.get(backPackable);\r\n                    if(number < num)\r\n                        player.getInventory().removeCountFromBackPack(backPackable , number);\r\n                }\r\n            }\r\n        }\r\n        player.getInventory().getItems().put(temp , player.getInventory().getItems().getOrDefault(temp , 1));\r\n        player.subtractEnergy(2);\r\n        return new Result(true,\"craft make successfully\");\r\n    }\r\n    public static Result PlaceItem(String itemName, int x , int y) {\r\n        itemName = itemName.trim().toLowerCase().replaceAll(\"_\",\" \");\r\n        BackPackable item = getCurrentPlayer().getInventory().getItemByName(itemName);\r\n        if(item == null){\r\n            return new Result(false , \"you dont have this item\");\r\n        }\r\n        Tile tile = App.currentGame.getTile(getCurrentPlayer().getPosition().x + x, getCurrentPlayer().getPosition().y + y);\r\n        if(tile.isEmpty() && (tile.getArea() instanceof Farm)) {\r\n            tile.setObjectInTile(item);\r\n            getCurrentPlayer().getInventory().removeCountFromBackPack(item, 1);\r\n            return new Result(true , \"Item placed successfully\");\r\n        }\r\n\r\n        return new Result(false , \"You can't place item in this tile\");\r\n    }\r\n    public static Result UseArtisan(String artisanName , String itemName) {\r\n        artisanName = artisanName.trim().toLowerCase().replaceAll(\"_\",\" \");\r\n        itemName = itemName.trim().toLowerCase().replaceAll(\"_\",\" \");\r\n        Player player = App.currentGame.getCurrentPlayer();\r\n        CraftItem artisan = null;\r\n        for (BackPackable backPackable : player.getInventory().getItems().keySet()) {\r\n            if (backPackable.getName().equals(artisanName)) {\r\n                artisan = (CraftItem) backPackable;\r\n                break;\r\n            }\r\n        }\r\n        if (artisan == null) {\r\n            return new Result(false,\"artisan item not available\");\r\n        }\r\n        ArtisanItem artisanItem = null;\r\n        for(TreeType treeType: TreeType.values()) {\r\n            FruitType fruitType = treeType.getFruitType();\r\n            if (fruitType.getName().equals(itemName)) {\r\n                if(artisanName.equals(\"keg\")){\r\n                    artisanItem = new ArtisanItem(ArtisanItemType.WINE);\r\n                    artisanItem.getArtisanItemType().setMoney(treeType.getBasePrice()*3);\r\n                    artisanItem.getArtisanItemType().setEnergy(treeType.getEnergy()*175/100);\r\n                }\r\n                if(artisanName.equals(\"preserves jar\")){\r\n                    artisanItem = new ArtisanItem(ArtisanItemType.JELLY);\r\n                    artisanItem.getArtisanItemType().setMoney(treeType.getBasePrice()*2 + 50);\r\n                    artisanItem.getArtisanItemType().setEnergy(treeType.energy*2);\r\n                }\r\n                if(artisanName.equals(\"dehydrator\")){\r\n                    artisanItem = new ArtisanItem(ArtisanItemType.DRIED_FRUIT);\r\n                    artisanItem.getArtisanItemType().setMoney(treeType.getBasePrice()*75/10 + 25);\r\n                }\r\n                break;\r\n            }\r\n        }\r\n        for(Crops crop: Crops.values()) {\r\n            if (crop.getName().equals(artisanName)) {\r\n                artisanItem = new ArtisanItem(ArtisanItemType.JUICE);\r\n                artisanItem.getArtisanItemType().setMoney(crop.getBasePrice()*225/100);\r\n                artisanItem.getArtisanItemType().setEnergy(2*crop.getEnergy());\r\n                break;\r\n            }\r\n        }\r\n        for(FishType fish: FishType.values()) {\r\n            if(fish.getName().equals(artisanName)) {\r\n                artisanItem = new ArtisanItem(ArtisanItemType.SMOKED_FISH);\r\n                artisanItem.getArtisanItemType().setMoney(fish.basePrice*2);\r\n            }\r\n        }\r\n        if(artisanItem == null) {\r\n            switch (itemName) {\r\n                case \"\":\r\n                    if(artisan.getName().equals(\"bee house\"))\r\n                        artisanItem = new ArtisanItem(ArtisanItemType.HONEY);\r\n                    break;\r\n                case \"milk\":\r\n                    if(artisan.getName().equals(\"cheese press\"))\r\n                        artisanItem = new ArtisanItem(ArtisanItemType.CHEESE_MILK);\r\n                    break;\r\n                case \"large milk\":\r\n                    if(artisan.getName().equals(\"cheese press\"))\r\n                        artisanItem = new ArtisanItem(ArtisanItemType.CHEESE_LARGE_MILK);\r\n                    break;\r\n                case \"goat milk\":\r\n                    if(artisan.getName().equals(\"cheese press\"))\r\n                        artisanItem = new ArtisanItem(ArtisanItemType.GOAT_CHEESE_MILK);\r\n                    break;\r\n                case \"large goat milk\":\r\n                    if(artisan.getName().equals(\"cheese press\"))\r\n                        artisanItem = new ArtisanItem(ArtisanItemType.GOAT_CHEESE_LARGE_MILK);\r\n                    break;\r\n                case \"wheat\" :\r\n                    if(artisan.getName().equals(\"keg\"))\r\n                        artisanItem = new ArtisanItem(ArtisanItemType.BEER);\r\n                    break;\r\n                case \"rice\" :\r\n                    if(artisan.getName().equals(\"keg\"))\r\n                        artisanItem = new ArtisanItem(ArtisanItemType.VINEGAR);\r\n                    break;\r\n                case \"coffee been\" :\r\n                    if(artisan.getName().equals(\"keg\"))\r\n                        artisanItem = new ArtisanItem(ArtisanItemType.COFFEE);\r\n                    break;\r\n                case \"juice\" :\r\n\r\n                    if(artisan.getName().equals(\"keg\"))// must change\r\n                        artisanItem = new ArtisanItem(ArtisanItemType.JUICE);\r\n                    break;\r\n                case \"honey\" :\r\n                    if(artisan.getName().equals(\"keg\"))\r\n                        artisanItem = new ArtisanItem(ArtisanItemType.MEAD);\r\n                    break;\r\n                case \"hops\" :\r\n                    if(artisan.getName().equals(\"keg\"))\r\n                        artisanItem = new ArtisanItem(ArtisanItemType.PALE_ALE);\r\n                    break;\r\n                case \"common mushroom\" :\r\n                    if(artisan.getName().equals(\"dehydrator\"))\r\n                        artisanItem = new ArtisanItem(ArtisanItemType.DRIED_COMMON_MUSHROOM);\r\n                    break;\r\n                case \"red mushroom\" :\r\n                    if(artisan.getName().equals(\"dehydrator\"))\r\n                        artisanItem = new ArtisanItem(ArtisanItemType.DRIED_RED_MUSHROOM);\r\n                    break;\r\n                case \"purple mushroom\" :\r\n                    if(artisan.getName().equals(\"dehydrator\"))\r\n                        artisanItem = new ArtisanItem(ArtisanItemType.DRIED_PURPLE_MUSHROOM);\r\n                    break;\r\n                case \"grapes\" :\r\n                    if(artisan.getName().equals(\"dehydrator\"))\r\n                        artisanItem = new ArtisanItem(ArtisanItemType.RAISINS);\r\n                    break;\r\n                case \"coal\":\r\n                    if(artisan.getName().equals(\"charcoal klin\"))\r\n                        artisanItem = new ArtisanItem(ArtisanItemType.COAL);\r\n                    break;\r\n                case \"rabbit wool\":\r\n                    if(artisan.getName().equals(\"loom\"))\r\n                        artisanItem = new ArtisanItem(ArtisanItemType.CLOTH_RABBIT);\r\n                    break;\r\n                case \"sheep wool\":\r\n                    if(artisan.getName().equals(\"loom\"))\r\n                        artisanItem = new ArtisanItem(ArtisanItemType.CLOTH_SHEEP);\r\n                    break;\r\n                case \"egg\" :\r\n                    if(artisan.getName().equals(\"mayonnaise machine\"))\r\n                        artisanItem = new ArtisanItem(ArtisanItemType.MAYONNAISE_EGG);\r\n                    break;\r\n                case \"large egg\" :\r\n                    if(artisan.getName().equals(\"mayonnaise machine\"))\r\n                        artisanItem = new ArtisanItem(ArtisanItemType.MAYONNAISE_LARGE_EGG);\r\n                    break;\r\n                case \"dinosaur egg\" :\r\n                    if(artisan.getName().equals(\"mayonnaise machine\"))\r\n                        artisanItem = new ArtisanItem(ArtisanItemType.DINOSAUR_MAYONNAISE);\r\n                    break;\r\n                case \"duck egg\" :\r\n                    if(artisan.getName().equals(\"mayonnaise machine\"))\r\n                        artisanItem = new ArtisanItem(ArtisanItemType.DUCK_MAYONNAISE);\r\n                    break;\r\n                case \"sunflower\" :\r\n                    if(artisan.getName().equals(\"oil maker\"))\r\n                        artisanItem = new ArtisanItem(ArtisanItemType.OIL_SUNFLOWER);\r\n                    break;\r\n                case \"sunflower seed\" :\r\n                    if(artisan.getName().equals(\"oil maker\"))\r\n                        artisanItem = new ArtisanItem(ArtisanItemType.OIL_SUNFLOWER_SEED);\r\n                    break;\r\n                case \"corn\" :\r\n                    if(artisan.getName().equals(\"oil maker\"))\r\n                        artisanItem = new ArtisanItem(ArtisanItemType.OIL_CORN);\r\n                    break;\r\n                case \"truffle\"   :\r\n                    if(artisan.getName().equals(\"oil maker\"))\r\n                        artisanItem = new ArtisanItem(ArtisanItemType.TRUFFLE_OIL);\r\n                    break;\r\n                case \"pickles\":\r\n                    if(artisan.getName().equals(\"preserves jar\"))\r\n                        artisanItem = new ArtisanItem(ArtisanItemType.PICKLES);\r\n                    break;\r\n                case \"furnace\":\r\n                    artisanItem = new ArtisanItem(ArtisanItemType.METAL_BAR);\r\n                    break;\r\n                default:\r\n                    return new Result(false , \"invalid item type\");\r\n            }\r\n        }\r\n        if (artisanItem == null)\r\n            return new Result(false,\"You cant make this item whit this material\");\r\n        if (artisanItem.getName().equals(\"honey\")){\r\n            Game game = App.currentGame;\r\n            artisanItem.setHour(game.getDateAndTime().getHour());\r\n            artisanItem.setDay(game.getDateAndTime().getDay());\r\n            player.getArtisanItems().add(artisanItem);\r\n            return new Result(true , \"artisan item made successfully\");\r\n        }\r\n        for (BackPackable backPackable : player.getInventory().getItems().keySet()) {\r\n            if(artisanItem.getArtisanItemType().ingredients.getName().trim().toLowerCase().replaceAll(\"_\" , \" \").equals(backPackable.getName())) {\r\n                if (player.getInventory().getItemCount(backPackable.getName())<artisanItem.getArtisanItemType().number) {\r\n                    return new Result(false , \"You dont have this material\");\r\n                }\r\n                Game game = App.currentGame;\r\n                artisanItem.setHour(game.getDateAndTime().getHour());\r\n                artisanItem.setDay(game.getDateAndTime().getDay());\r\n                player.getArtisanItems().add(artisanItem);\r\n                return new Result(true , \"artisan item made successfully\");\r\n            }\r\n        }\r\n        return new Result(false , \"You dont have this material\");\r\n    }\r\n    public static Result GetArtisan(String artisanName) {\r\n        artisanName = artisanName.trim().toLowerCase().replaceAll(\"_\" , \" \");\r\n        Player player = App.currentGame.getCurrentPlayer();\r\n        ArtisanItem temp = null;\r\n        for (ArtisanItem artisanItem : player.getArtisanItems()) {\r\n            if (artisanItem.getName().equals(artisanName)) {\r\n                temp = artisanItem;\r\n            }\r\n        }\r\n        if (temp == null) {\r\n            return new Result(false, \"Artisan item not found\");\r\n        }\r\n        Game game = App.currentGame;\r\n        if (temp.getArtisanItemType().productionTimeInHours==0){\r\n            if (temp.getDay()>game.getDateAndTime().getDay()) {\r\n                player.getInventory().addToBackPack(temp ,1);\r\n                player.getArtisanItems().remove(temp);\r\n                return new Result(true , \"You receive Artisan item successfully\");\r\n            }\r\n            return new Result(false, \"Artisan item is not ready\");\r\n        }\r\n        int hour = 0;\r\n        hour += (game.getDateAndTime().getHour()-temp.getHour());\r\n        hour += (game.getDateAndTime().getDay()-temp.getDay())*24;\r\n        if(temp.getArtisanItemType().productionTimeInHours>hour) {\r\n            return new Result(false, \"Artisan item is not ready\");\r\n        }\r\n        player.getInventory().addToBackPack(temp ,1);\r\n        player.getArtisanItems().remove(temp);\r\n        return new Result(true , \"You receive Artisan item successfully\");\r\n    }\r\n    public static Result Cooking(String Rcipe){\r\n        Rcipe = Rcipe.trim().toLowerCase().replaceAll(\"_\" , \" \");\r\n        Player player = App.currentGame.getCurrentPlayer();\r\n        if (player.getInventory().getCapacity() == player.getInventory().getItems().size()) {\r\n            return new Result(false, \"Your inventory is full\");\r\n        }\r\n        Food food = null;\r\n        for (Food availableFood : player.getAvailableFoods()) {\r\n            if (availableFood.getName().equals(Rcipe)) {\r\n                food = availableFood;\r\n            }\r\n        }\r\n        if (food == null) {\r\n            return new Result(false, \"You can't cook this food\");\r\n        }\r\n        FoodType ingredient = null;\r\n        for(FoodType foodRecipe : FoodType.values()) {\r\n            if (foodRecipe.getName().equals(Rcipe)) {\r\n                ingredient = foodRecipe;\r\n            }\r\n        }\r\n        Tile tile = App.currentGame.getTile(getCurrentPlayer().getPosition());\r\n        if(!(tile.getArea() instanceof House playersHouse)){\r\n            return new Result(false, \"You must be in your house\");\r\n        }\r\n        Fridge fridge = playersHouse.getFridge();\r\n        for (BackPackable backPackable : ingredient.ingredients.keySet()) {\r\n            boolean find = false;\r\n            for (BackPackable packable : player.getInventory().getItems().keySet()) {\r\n                if (backPackable.getName().equals(packable.getName())) {\r\n                    if(player.getInventory().getItemCount(packable.getName())< ingredient.ingredients.get(backPackable)) {\r\n                        return new Result(false, \"You dont have enough material\");\r\n                    }\r\n                    find = true;\r\n                    break;\r\n                }\r\n            }\r\n            if(!find){\r\n                BackPackable packable = fridge.getItemByName(backPackable.getName());\r\n                if(packable!=null){\r\n                    find = true;\r\n                }\r\n                if(fridge.getItemCount(backPackable.getName())<ingredient.ingredients.get(backPackable)) {\r\n                    return new Result(false, \"You dont have enough material\");\r\n                }\r\n            }\r\n            if (!find) {\r\n                return new Result(false, \"You don't have enough material\");\r\n            }\r\n        }\r\n        for (BackPackable backPackable : ingredient.ingredients.keySet()) {\r\n            boolean find = false;\r\n            for (BackPackable packable : player.getInventory().getItems().keySet()) {\r\n                if (backPackable.getName().equals(packable.getName())) {\r\n                    int num = ingredient.ingredients.get(backPackable);\r\n                    player.getInventory().removeCountFromBackPack(packable , num);\r\n                    find = true;\r\n                    break;\r\n                }\r\n            }\r\n            if(!find){\r\n                for (BackPackable packable : ingredient.ingredients.keySet()) {\r\n                    if (backPackable.getName().equals(packable.getName())) {\r\n                        int num = ingredient.ingredients.get(packable);\r\n                        int number = fridge.getItemCount(packable.getName());\r\n                        fridge.removeFromFridge(packable);\r\n                        fridge.addToFridge(packable , number-num);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        player.getInventory().addToBackPack(food ,1);\r\n        return new Result(true , \"You cook this food\");\r\n    }\r\n    public static void StartTrade(){\r\n        Player player = App.currentGame.getCurrentPlayer();\r\n        System.out.println(\"new trade offers:\");\r\n        for (TradeWhitMoney tradeWhitMoney : player.getTradesWhitMoney()) {\r\n            if (tradeWhitMoney.getType().equals(\"offer\")){\r\n                if (tradeWhitMoney.isNewTrade()){\r\n                    System.out.println(\"user: \"+tradeWhitMoney.getSeller().getUsername()+\r\n                            \" item: \"+ tradeWhitMoney.getName() + \" amount: \"+ tradeWhitMoney.getAmount()+\r\n                            \" price: \"+ tradeWhitMoney.getMoney());\r\n                    tradeWhitMoney.setNewTrade(false);\r\n                }\r\n            }\r\n        }\r\n        for (TradeWithItem tradeWhitItem : player.getTradesWithItem()) {\r\n            if (tradeWhitItem.getType().equals(\"offer\")){\r\n                if (tradeWhitItem.isNewTrade()){\r\n                    System.out.println(\"user: \"+tradeWhitItem.getSeller().getUsername()+\r\n                            \" item: \"+ tradeWhitItem.getName() + \" amount: \"+ tradeWhitItem.getAmount()+\r\n                            \" target item: \"+ tradeWhitItem.getTargetName() + \" number of target item: \"+ tradeWhitItem.getTargetAmount());\r\n                    tradeWhitItem.setNewTrade(false);\r\n                }\r\n            }\r\n        }\r\n        System.out.println(\"new trade requests:\");\r\n        for (TradeWhitMoney tradeWhitMoney : player.getTradesWhitMoney()) {\r\n            if (tradeWhitMoney.getType().equals(\"request\")){\r\n                if (tradeWhitMoney.isNewTrade()){\r\n                    System.out.println(\"user: \"+tradeWhitMoney.getBuyer().getUsername()+\r\n                            \" item: \"+ tradeWhitMoney.getName() + \" amount: \"+ tradeWhitMoney.getAmount()+\r\n                            \" price: \"+ tradeWhitMoney.getMoney());\r\n                    tradeWhitMoney.setNewTrade(false);\r\n                }\r\n            }\r\n        }\r\n        for (TradeWithItem tradeWhitItem : player.getTradesWithItem()) {\r\n            if (tradeWhitItem.getType().equals(\"request\")){\r\n                if (tradeWhitItem.isNewTrade()){\r\n                    System.out.println(\"user: \"+tradeWhitItem.getBuyer().getUsername()+\r\n                            \" item: \"+ tradeWhitItem.getName() + \" amount: \"+ tradeWhitItem.getAmount()+\r\n                            \" target item: \"+ tradeWhitItem.getTargetName() + \" number of target item: \"+ tradeWhitItem.getTargetAmount());\r\n                    tradeWhitItem.setNewTrade(false);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n
===================================================================
diff --git a/src/main/java/controllers/GameMenuController.java b/src/main/java/controllers/GameMenuController.java
--- a/src/main/java/controllers/GameMenuController.java	(revision 98b65eaf8d1547c97381e6c9e7d0a808ac098ccd)
+++ b/src/main/java/controllers/GameMenuController.java	(date 1747422974092)
@@ -953,6 +953,7 @@
 
     public static Result fertilize(String fertilizerName, Position position) {
         Tile goalTile = App.currentGame.getMap().getTile(position);
+        if(goalTile.getObjectInTile() instanceof PloughedPlace){return new Result(true,";sdlfk;sdk");}
         if(goalTile.getObjectInTile() == null) return new Result(false,"goal tile is empty------");
         if(!goalTile.getObjectInTile().getClass().equals(PloughedPlace.class))
             return new Result(false,"goal tile is not a PloughedPlace");
