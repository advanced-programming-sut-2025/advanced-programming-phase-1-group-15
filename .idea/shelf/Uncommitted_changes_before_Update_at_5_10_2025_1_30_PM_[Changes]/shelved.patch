Index: src/main/java/models/farming/GeneralPlants/WateredState.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package models.farming.GeneralPlants;\r\n\r\nimport models.Result;\r\nimport models.farming.*;\r\n\r\npublic class WateredState implements PlantState {\r\n\r\n    PloughedPlace tile;\r\n\r\n\r\n    public WateredState(PloughedPlace tile) {\r\n        this.tile = tile;\r\n    }\r\n\r\n    @Override\r\n    public Result seed(Seedable seed) {\r\n        return new Result(false,\"this tile is already seeded\");\r\n    }\r\n\r\n    @Override\r\n    public Result fertilize(Fertilizer fertilizer) {\r\n\r\n        return new Result(false,\"this tile is already watered\");\r\n    }\r\n\r\n    @Override\r\n    public Result updateByTime() {\r\n        return null;\r\n    }\r\n\r\n    @Override\r\n    public Result water() {\r\n        return new Result(false,\"this tile is already watered\");\r\n    }\r\n\r\n    @Override\r\n    public Result harvest() {\r\n        Harvestable harvestable = tile.getHarvestable();\r\n        if (harvestable == null) {\r\n            return new Result(false, \"Nothing to harvest.\");\r\n        }\r\n\r\n        if (harvestable.getDaysUntilHarvest() > 0) {\r\n            return new Result(false, \"Crop isn't ready.\");\r\n        }\r\n\r\n        int amount = ( tile instanceof GiantPlant ) ? 10 : 1;\r\n\r\n        harvestable.harvest(amount);\r\n\r\n        if (harvestable.isOneTime()) {\r\n            tile.unPlough();\r\n            // TODO: check if deleting plowed tile effect other things\r\n            return new Result(true, \"Harvested. Crop removed.\");\r\n        } else {\r\n            tile.setState(new RestState(tile));\r\n            return new Result(true, \"Harvested. rest mode started.\");\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public Result takeRest() {\r\n        return null;\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/models/farming/GeneralPlants/WateredState.java b/src/main/java/models/farming/GeneralPlants/WateredState.java
--- a/src/main/java/models/farming/GeneralPlants/WateredState.java	(revision f11b632d115d8f590fb3410b5d9a8f98a0faaac2)
+++ b/src/main/java/models/farming/GeneralPlants/WateredState.java	(date 1746867378391)
@@ -12,6 +12,10 @@
         this.tile = tile;
     }
 
+    public String getState() {
+        return "Watered";
+    }
+
     @Override
     public Result seed(Seedable seed) {
         return new Result(false,"this tile is already seeded");
Index: src/main/java/models/map/Tile.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package models.map;\r\n\r\nimport models.animals.Animal;\r\nimport models.animals.Fish;\r\nimport models.farming.GeneralPlants.PloughedPlace;\r\nimport models.farming.Tree;\r\nimport models.foraging.ForagingMineral;\r\nimport models.foraging.Stone;\r\nimport models.stores.*;\r\nimport models.tools.Fridge;\r\n\r\nimport java.util.ArrayList;\r\n\r\npublic class Tile {\r\n    private final Position position;\r\n\r\n    public void setObjectInTile(Tilable objectInTile) {\r\n        this.objectInTile = objectInTile;\r\n    }\r\n\r\n    private Tilable objectInTile;\r\n    private Area area;\r\n\r\n    boolean plowed = false;\r\n    boolean watered = false;\r\n\r\n    public Tile(int x, int y) {\r\n        this.position = new Position(x, y);\r\n        this.objectInTile = null;\r\n        this.area = null;\r\n    }\r\n\r\n    public static ArrayList<ArrayList<Tile>> buildMapTiles() {\r\n        ArrayList<ArrayList<Tile>> mapTiles = new ArrayList<>();\r\n\r\n        for (int row = 0; row < Map.ROWS; row++) {\r\n            mapTiles.add(new ArrayList<>());\r\n            for (int col = 0; col < Map.COLS; col++) {\r\n                mapTiles.get(row).add(new Tile(col, row));\r\n            }\r\n        }\r\n\r\n        return mapTiles;\r\n    }\r\n\r\n    public Position getPosition() {\r\n        return position;\r\n    }\r\n\r\n    public Tilable getObjectInTile() {\r\n        return objectInTile;\r\n    }\r\n    public void put(Tilable object) {\r\n        objectInTile = object;\r\n    }\r\n    public void empty() {\r\n        objectInTile = null;\r\n    }\r\n    public boolean isEmpty() {\r\n        return objectInTile == null;\r\n    }\r\n\r\n    public void setArea(Area area) {\r\n        this.area = area;\r\n    }\r\n    public Area getArea() {\r\n        return area;\r\n    }\r\n    public AreaType getAreaType() {\r\n        return area.areaType;\r\n    }\r\n\r\n    public boolean isWalkable(){\r\n        AreaType type = getAreaType();\r\n\r\n        if(type.equals(AreaType.LAKE)) {\r\n            return false;\r\n        }\r\n\r\n        return objectInTile == null;\r\n    }\r\n    public boolean isBuildable() {\r\n        AreaType type = getAreaType();\r\n\r\n        return type.equals(AreaType.FARM) && objectInTile == null;\r\n    }\r\n\r\n    public boolean isAdjacent(Tile otherTile) {\r\n        return (Math.abs(position.x - otherTile.position.x) <= 1) && (Math.abs(position.y - otherTile.position.y) <= 1);\r\n    }\r\n\r\n    public void plow() {\r\n        plowed = true;\r\n    }\r\n    public void unplow() {\r\n        plowed = false;\r\n        objectInTile = null;\r\n    }\r\n    public boolean isPlowed() {\r\n        return plowed;\r\n    }\r\n\r\n    public void water() {\r\n        watered = true;\r\n    }\r\n    public boolean isWatered() {\r\n        return watered;\r\n    }\r\n\r\n    public void print() {\r\n        if(objectInTile instanceof Animal) {\r\n            Animal animal = (Animal) objectInTile;\r\n            switch (animal.getAnimalType()) {\r\n                case COW -> System.out.print('C');\r\n                case GOAT -> System.out.print('G');\r\n                case SHEEP -> System.out.print('S');\r\n                case PIG -> PrintInColor.printInBrightPurple('P');\r\n                case CHICKEN -> PrintInColor.printInYellow('C');\r\n                case DUCK -> System.out.print('D');\r\n                case RABBIT -> System.out.print('R');\r\n                case DINOSAUR -> PrintInColor.printInGreen('D');\r\n            }\r\n            return;\r\n        }\r\n        if(area.areaType.equals(AreaType.LAKE)) {\r\n            if(objectInTile instanceof Fish) {\r\n                PrintInColor.printInRed('Ɔ');\r\n            }\r\n            else {\r\n                PrintInColor.printInBlue('~');\r\n            }\r\n        }\r\n        else if(area.areaType.equals(AreaType.HOUSE)) {\r\n            if(objectInTile instanceof Fridge) {\r\n                PrintInColor.printInCyan('F');\r\n            }\r\n            else {\r\n                System.out.print('H');\r\n            }\r\n        }\r\n        else if(area.areaType.equals(AreaType.GREENHOUSE)) {\r\n            PrintInColor.printInGreen('G');\r\n        }\r\n        else if(area.areaType.equals(AreaType.QUARRY)) {\r\n            PrintInColor.printInBrown('Q');\r\n        }\r\n        else if(area.areaType.equals(AreaType.BARN)) {\r\n            System.out.print('_');\r\n        }\r\n        else if(area.areaType.equals(AreaType.COOP)) {\r\n            PrintInColor.printInGray('□');\r\n        }\r\n        else if(area.areaType.equals(AreaType.STORE)) {\r\n            if(area instanceof Blacksmith) {\r\n                System.out.print('b');\r\n            }\r\n            else if(area instanceof JojaMart) {\r\n                System.out.print('j');\r\n            }\r\n            else if(area instanceof PierreGeneralStore) {\r\n                System.out.print('p');\r\n            }\r\n            else if(area instanceof CarpenterShop) {\r\n                System.out.print('c');\r\n            }\r\n            else if(area instanceof FishShop) {\r\n                PrintInColor.printInBlue('f');\r\n            }\r\n            else if(area instanceof MarnieRanch) {\r\n                System.out.print('m');\r\n            }\r\n            else if(area instanceof StarDropSaloon) {\r\n                PrintInColor.printInBrightPurple('s');\r\n            }\r\n        }\r\n        else if(objectInTile != null) {\r\n            if(objectInTile instanceof Tree) {\r\n                PrintInColor.printInBrightGreen('T');\r\n            }\r\n            else if(objectInTile instanceof Stone) {\r\n                PrintInColor.printInBrightGray('O');\r\n            }\r\n            else if(objectInTile instanceof ForagingMineral) {\r\n                PrintInColor.printInBrightYellow('*');\r\n            }\r\n        }\r\n        else {\r\n            if(plowed) {\r\n                System.out.print('X');\r\n            }\r\n            else {\r\n                System.out.print('.');\r\n            }\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/models/map/Tile.java b/src/main/java/models/map/Tile.java
--- a/src/main/java/models/map/Tile.java	(revision f11b632d115d8f590fb3410b5d9a8f98a0faaac2)
+++ b/src/main/java/models/map/Tile.java	(date 1746870523652)
@@ -2,6 +2,7 @@
 
 import models.animals.Animal;
 import models.animals.Fish;
+import models.farming.GeneralPlants.PlantState;
 import models.farming.GeneralPlants.PloughedPlace;
 import models.farming.Tree;
 import models.foraging.ForagingMineral;
@@ -91,6 +92,7 @@
 
     public void plow() {
         plowed = true;
+        objectInTile = new PloughedPlace(this);
     }
     public void unplow() {
         plowed = false;
@@ -102,6 +104,12 @@
 
     public void water() {
         watered = true;
+        if (objectInTile != null) {
+            if(objectInTile instanceof PloughedPlace) {
+                PloughedPlace p = (PloughedPlace) objectInTile;
+                p.getCurrentState().water();
+            }
+        }
     }
     public boolean isWatered() {
         return watered;
@@ -183,14 +191,25 @@
             else if(objectInTile instanceof ForagingMineral) {
                 PrintInColor.printInBrightYellow('*');
             }
-        }
-        else {
-            if(plowed) {
-                System.out.print('X');
+            else if(objectInTile instanceof PloughedPlace place) {
+                try {
+                    if (place.getCurrentState().getState().equals("Ploughed")) {
+                        System.out.print('X');
+                    } else if (place.getCurrentState().getState().equals("Seeded")) {
+                        PrintInColor.printInGreen('.');
+                    } else if (place.getCurrentState().getState().equals("Watered")) {
+                        PrintInColor.printInBlue('"');
+                    } else if (place.getCurrentState().getState().equals("Rest")) {
+                        PrintInColor.printInGreen('"');
+                    }
+                }
+                catch(Exception e) {
+                    PrintInColor.printInRed('E');
+                }
             }
-            else {
-                System.out.print('.');
-            }
+        }
+        else {
+            System.out.print('.');
         }
     }
 }
\ No newline at end of file
Index: src/main/java/models/farming/GeneralPlants/SeededState.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package models.farming.GeneralPlants;\r\n\r\nimport models.Result;\r\nimport models.farming.CropSeeds;\r\nimport models.farming.Fertilizer;\r\nimport models.farming.SeedType;\r\nimport models.farming.Seedable;\r\n\r\npublic class SeededState implements PlantState {\r\n    PloughedPlace tile;\r\n\r\n    public SeededState(PloughedPlace tile) {\r\n        this.tile = tile;\r\n    }\r\n    private int daysNotWatered = 0 ;\r\n    int daysWatered = 0;\r\n    int growthLevel = 0;\r\n\r\n\r\n    @Override\r\n    public Result fertilize(Fertilizer fertilizer) {\r\n        return new Result(false,\"this tile is already fertilized\");\r\n    }\r\n\r\n    @Override\r\n    public Result water() {\r\n        daysWatered++;\r\n        daysNotWatered = 0;\r\n        if(daysWatered > tile.getHarvestable().getStages().get(growthLevel)){\r\n            daysWatered = 0;\r\n            growthLevel++;\r\n        }\r\n        return new Result(true,\"successfully watered this plant!\");\r\n    }\r\n\r\n    @Override\r\n    public Result harvest() {\r\n        return new Result(false,\"you should fertilize this tile first\");\r\n    }\r\n\r\n    @Override\r\n    public Result updateByTime() {\r\n        daysNotWatered++;\r\n        if(daysNotWatered >= 2){\r\n            tile.unPlough();\r\n        }\r\n        return null;\r\n    }\r\n\r\n    @Override\r\n    public Result takeRest() {\r\n        return null;\r\n    }\r\n\r\n    @Override\r\n    public Result seed(Seedable seed) {\r\n        return new Result(false,\"this tile is already seeded\");\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/models/farming/GeneralPlants/SeededState.java b/src/main/java/models/farming/GeneralPlants/SeededState.java
--- a/src/main/java/models/farming/GeneralPlants/SeededState.java	(revision f11b632d115d8f590fb3410b5d9a8f98a0faaac2)
+++ b/src/main/java/models/farming/GeneralPlants/SeededState.java	(date 1746871221140)
@@ -12,10 +12,18 @@
     public SeededState(PloughedPlace tile) {
         this.tile = tile;
     }
+
+    public int getDaysNotWatered() {
+        return daysNotWatered;
+    }
+
     private int daysNotWatered = 0 ;
     int daysWatered = 0;
     int growthLevel = 0;
 
+    public String getState(){
+        return "Seeded";
+    }
 
     @Override
     public Result fertilize(Fertilizer fertilizer) {
Index: src/main/java/controllers/GameMenuController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package controllers;\r\n\r\nimport models.App;\r\nimport models.Game;\r\nimport models.Player;\r\nimport models.Result;\r\nimport models.animals.*;\r\nimport models.artisanry.ArtisanItem;\r\nimport models.artisanry.ArtisanItemType;\r\nimport models.cooking.Food;\r\nimport models.crafting.CraftItem;\r\nimport models.farming.*;\r\nimport models.farming.GeneralPlants.PloughedPlace;\r\nimport models.map.*;\r\nimport models.stores.MarnieRanch;\r\nimport models.stores.Store;\r\nimport models.tools.*;\r\n\r\npublic class GameMenuController {\r\n    public static Player getCurrentPlayer() {\r\n        return App.currentGame.getCurrentPlayer();\r\n    }\r\n    \r\n    public static Result walk(int x, int y) {\r\n        if(x >= Map.COLS || y >= Map.ROWS || x < 0 || y < 0) {\r\n            return new Result(false, \"you are out of bounds!\");\r\n        }\r\n\r\n        Tile tile = App.currentGame.getTile(x, y);\r\n        if(!tile.isEmpty()) {\r\n            return new Result(false, \"you can't stand on a tile which is not empty.\");\r\n        }\r\n        else if(tile.getAreaType().equals(AreaType.LAKE)) {\r\n            return new Result(false, \"you're destination is in the lake!\");\r\n        }\r\n        else if(tile.getAreaType().equals(AreaType.FARM)) {\r\n            Farm farm = (Farm) tile.getArea();\r\n            if(!getCurrentPlayer().equals(farm.getOwner())) {\r\n                return new Result(false, \"you cannot enter other players' territory.\");\r\n            }\r\n        }\r\n\r\n        int energyNeeded = getCurrentPlayer().calculateWalkingEnergy(new Position(x, y));\r\n\r\n        if(energyNeeded == -1) {\r\n            return new Result(false, \"tile is unreachable!\");\r\n        }\r\n        return new Result(true, energyNeeded + \" energy would be consumed. Do you agree? (y/n)\");\r\n    }\r\n\r\n    public static Result setPosition(int x, int y) {\r\n        Position position = new Position(x, y);\r\n\r\n        getCurrentPlayer().walk(position);\r\n        if(getCurrentPlayer().isFainted()) {\r\n            return new Result(false, \"Oops! you've fainted!\");\r\n        }\r\n\r\n        return new Result(true, \"moved to position \" + position + \" successfully.\");\r\n    }\r\n\r\n    public static Result removeFromInventory(String itemName, int count) {\r\n        BackPackable item = getCurrentPlayer().getInventory().getItemByName(itemName);\r\n        int availableCount = getCurrentPlayer().getInventory().getItemCount(itemName);\r\n        if(item == null) {\r\n            return new Result(false, \"You don't have that item.\");\r\n        }\r\n        else if(count > availableCount) {\r\n            return new Result(false, \"You only have \" + availableCount + \" \" + item.getName() + \" in your inventory.\");\r\n        }\r\n\r\n        TrashCan trashCan = getCurrentPlayer().getTrashCan();\r\n        if(count == -1) {\r\n            int returnedAmount = trashCan.use(item, availableCount, getCurrentPlayer());\r\n            getCurrentPlayer().getInventory().removeFromBackPack(item);\r\n            return new Result(true, item.getName() + \" moved to trash can.\\n\" +\r\n                    returnedAmount + \" gold added to your account.\");\r\n        }\r\n        else {\r\n            int returnedAmount = trashCan.use(item, count, getCurrentPlayer());\r\n            getCurrentPlayer().getInventory().removeCountFromBackPack(item, count);\r\n            return new Result(true, count + \" \" + item.getName() + \" moved to trash can.\\n\" +\r\n                    returnedAmount + \" gold added to your account.\");\r\n        }\r\n    }\r\n\r\n    public static Result equipTool(String toolName) {\r\n        Tool tool = (Tool) getCurrentPlayer().getInventory().getItemByName(toolName);\r\n\r\n        if(tool == null) {\r\n            return new Result(false, \"You don't have that tool.\");\r\n        }\r\n\r\n        getCurrentPlayer().setCurrentTool(tool);\r\n        return new Result(true, \"equipped tool \" + tool.getName() + \" successfully.\");\r\n    }\r\n    public static Result showCurrentTool() {\r\n        Tool tool = getCurrentPlayer().getCurrentTool();\r\n        if(tool == null) {\r\n            return new Result(false, \"you're not holding any tool!\");\r\n        }\r\n\r\n        return new Result(true, tool.getName());\r\n    }\r\n    public static Result upgradeTool(String toolName) {\r\n        Tool tool = (Tool) getCurrentPlayer().getInventory().getItemByName(toolName);\r\n\r\n        if(tool == null) {\r\n            return new Result(false, \"You don't have that tool.\");\r\n        }\r\n\r\n        return new Result(true, \"Tool upgraded successfully.\");\r\n    }\r\n    public static Result useTool(int dx, int dy) {\r\n        Tool tool = getCurrentPlayer().getCurrentTool();\r\n        if(tool == null) {\r\n            return new Result(false, \"choose a tool first\");\r\n        }\r\n        Position usePosition = new Position(getCurrentPlayer().getPosition().x + dx, getCurrentPlayer().getPosition().y + dy);\r\n        if(!Map.isBoundValid(usePosition)) {\r\n            return new Result(false, \"you are out of bounds!\");\r\n        }\r\n\r\n        Tile useTile = App.currentGame.getTile(usePosition);\r\n\r\n        return new Result(true, tool.use(useTile, getCurrentPlayer()));\r\n    }\r\n\r\n    public static Result putInFridge(String itemName) {\r\n        Tile tile = App.currentGame.getTile(getCurrentPlayer().getPosition());\r\n        if(!(tile.getArea() instanceof House playersHouse)) {\r\n            return new Result(false, \"you should be in your house to use fridge!\");\r\n        }\r\n        Fridge fridge = playersHouse.getFridge();\r\n\r\n        BackPackable item = getCurrentPlayer().getInventory().getItemByName(itemName);\r\n        if(item == null) {\r\n            return new Result(false, \"You don't have that item in your inventory.\");\r\n        }\r\n\r\n        int itemCount = getCurrentPlayer().getInventory().getItemCount(itemName);\r\n        fridge.addToFridge(item, itemCount);\r\n        getCurrentPlayer().getInventory().removeFromBackPack(item);\r\n\r\n        return new Result(true, item.getName() + \" moved to fridge.\");\r\n    }\r\n    public static Result pickFromFridge(String itemName) {\r\n        Tile tile = App.currentGame.getTile(getCurrentPlayer().getPosition());\r\n        if(!(tile.getArea() instanceof House playersHouse)) {\r\n            return new Result(false, \"you should be in your house to use fridge!\");\r\n        }\r\n        Fridge fridge = playersHouse.getFridge();\r\n\r\n        BackPackable item = fridge.getItemByName(itemName);\r\n        if(item == null) {\r\n            return new Result(false, \"You don't have that item in your fridge.\");\r\n        }\r\n\r\n        int itemCount = fridge.getItemCount(itemName);\r\n        getCurrentPlayer().getInventory().addToBackPack(item, itemCount);\r\n        fridge.removeFromFridge(item);\r\n\r\n        return new Result(true, item.getName() +  \" moved to inventory.\");\r\n    }\r\n    public static Result eatFood(String foodName) {\r\n        Food food = (Food) getCurrentPlayer().getInventory().getItemByName(foodName);\r\n        if(food == null) {\r\n            return new Result(false, \"You don't have that food.\");\r\n        }\r\n\r\n        getCurrentPlayer().eat(food);\r\n        getCurrentPlayer().getInventory().removeCountFromBackPack(food, 1);\r\n        return new Result(true, \"You ate \" + food.getName() + \". \" + food.getEnergy() + \" energy added.\");\r\n    }\r\n\r\n    public static Result buildBarn(int x, int y) {\r\n        boolean buildable = true;\r\n        for(int row = y; row < y + 2; row++) {\r\n            for(int col = x; col < x + 2; col++) {\r\n                Tile tile = App.currentGame.getTile(col, row);\r\n                if(!tile.isBuildable()) {\r\n                    buildable = false;\r\n                }\r\n            }\r\n        }\r\n\r\n        if(!buildable) {\r\n            return new Result(false, \"You can't build a barn in this Area.\");\r\n        }\r\n        else {\r\n            Barn barn = new Barn();\r\n            for(int row = y; row < y + 2; row++) {\r\n                for(int col = x; col < x + 2; col++) {\r\n                    Tile tile = App.currentGame.getTile(col, row);\r\n                    tile.setArea(barn);\r\n                }\r\n            }\r\n            return new Result(true, \"barn built successfully.\");\r\n        }\r\n    }\r\n    public static Result buildCoop(int x, int y) {\r\n        boolean buildable = true;\r\n        for(int row = y; row < y + 2; row++) {\r\n            for(int col = x; col < x + 2; col++) {\r\n                Tile tile = App.currentGame.getTile(col, row);\r\n                if(!tile.isBuildable()) {\r\n                    buildable = false;\r\n                }\r\n            }\r\n        }\r\n\r\n        if(!buildable) {\r\n            return new Result(false, \"You can't build a coop in this Area.\");\r\n        }\r\n        else {\r\n            Coop coop = new Coop();\r\n            for(int row = y; row < y + 2; row++) {\r\n                for(int col = x; col < x + 2; col++) {\r\n                    Tile tile = App.currentGame.getTile(col, row);\r\n                    tile.setArea(coop);\r\n                }\r\n            }\r\n            return new Result(true, \"coop built successfully.\");\r\n        }\r\n    }\r\n    public static Result buyAnimal(String animalType, String name) {\r\n        Tile playerTile = App.currentGame.getTile(getCurrentPlayer().getPosition());\r\n        if(!(playerTile.getArea() instanceof MarnieRanch)) {\r\n            return new Result(false, \"you have to be inside marnie's ranch to run this command.\");\r\n        }\r\n\r\n        Animal animal = Animal.animalFactory(animalType, name);\r\n        if(animal == null) {\r\n            return new Result(false, \"invalid animal type!\");\r\n        }\r\n\r\n        for(Animal playerAnimal : getCurrentPlayer().getAnimals()) {\r\n            if(animal.getName().equals(playerAnimal.getName())) {\r\n                return new Result(false, \"each animal must have a unique name.\");\r\n            }\r\n        }\r\n\r\n        boolean placed = getCurrentPlayer().getFarm().place(animal);\r\n\r\n        if(placed) {\r\n            App.currentGame.getDateAndTime().addObserver(animal);\r\n            getCurrentPlayer().getAnimals().add(animal);\r\n            getCurrentPlayer().subtractGold(animal.getBasePrice());\r\n\r\n            return new Result(true, \"a new \" + animal.getAnimalTypeName() + \" named \" + animal.getName() + \" has been bought.\");\r\n        }\r\n        else {\r\n            return new Result(false, \"not enough \" + animal.getMaintenance() + \" space to buy this animal.\");\r\n        }\r\n    }\r\n    public static Result petAnimal(String name) {\r\n        Animal animal = getCurrentPlayer().getAnimalByName(name);\r\n\r\n        if(animal == null) {\r\n            return new Result(false, \"animal name is not correct.\");\r\n        }\r\n        else if(!getCurrentPlayer().getPosition().isAdjacent(animal.getPosition())) {\r\n            return new Result(false, \"your position is not adjacent!\");\r\n        }\r\n\r\n        animal.pet();\r\n        return new Result(true, \"you pet \" + animal.getName() + \".\");\r\n    }\r\n    public static Result shepherdAnimal(String name, int x, int y) {\r\n        Animal animal = getCurrentPlayer().getAnimalByName(name);\r\n        if(animal == null) {\r\n            return new Result(false, \"animal name is not correct.\");\r\n        }\r\n\r\n        if(x >= Map.COLS || y >= Map.ROWS || x < 0 || y < 0) {\r\n            return new Result(false, \"invalid x or y!\");\r\n        }\r\n\r\n        Tile tile = App.currentGame.getTile(x, y);\r\n        if(!App.currentGame.getWeather().couldShepherdAnimals()) {\r\n            return new Result(false, \"you cannot shepherd animals in this weather!\");\r\n        }\r\n        else if(!tile.isEmpty()) {\r\n            return new Result(false, \"animal can't stand on a tile which is not empty.\");\r\n        }\r\n        else if(tile.getAreaType().equals(AreaType.LAKE) && !animal.getAnimalType().equals(AnimalType.DUCK)) {\r\n            return new Result(false, \"only ducks can swim.\");\r\n        }\r\n        else if(tile.getAreaType().equals(AreaType.BARN) && !animal.getMaintenance().equals(Maintenance.BARN)) {\r\n            return new Result(false, \"you can't put a \" + animal.getAnimalType() + \" in a barn.\");\r\n        }\r\n        else if(tile.getAreaType().equals(AreaType.COOP) && !animal.getMaintenance().equals(Maintenance.COOP)) {\r\n            return new Result(false, \"you can't put a \" + animal.getAnimalType() + \" in a coop.\");\r\n        }\r\n        else if(tile.getAreaType().equals(AreaType.FARM)) {\r\n            Farm farm = (Farm) tile.getArea();\r\n            if(!getCurrentPlayer().equals(farm.getOwner())) {\r\n                return new Result(false, \"your animals cannot enter other players' territory.\");\r\n            }\r\n        }\r\n\r\n        Tile initialTile = App.currentGame.getTile(animal.getPosition());\r\n        animal.setPosition(tile.getPosition());\r\n\r\n        tile.put(animal);\r\n        initialTile.empty();\r\n\r\n        animal.feed();\r\n        return new Result(true, \"shepherd \" + animal.getName() + \" successfully.\");\r\n    }\r\n    public static Result feedHayAnimal(String name) {\r\n        Animal animal = getCurrentPlayer().getAnimalByName(name);\r\n        if(animal == null) {\r\n            return new Result(false, \"animal name is not correct.\");\r\n        }\r\n        else if(!getCurrentPlayer().getPosition().isAdjacent(animal.getPosition())) {\r\n            return new Result(false, \"your position is not adjacent!\");\r\n        }\r\n\r\n        animal.feed();\r\n        return new Result(true, animal.getName() + \" fed with hay.\");\r\n    }\r\n    public static Result showAnimalProducts() {\r\n        StringBuilder sb = new StringBuilder();\r\n        sb.append(\"Available animal products: \\n\");\r\n        for(Animal animal : getCurrentPlayer().getAnimals()) {\r\n            if(animal.getCurrentProduct() != null) {\r\n                sb.append(animal.getName()).append(\"    \");\r\n                sb.append(animal.getCurrentProduct().getName()).append(\"  quality: \");\r\n                sb.append(animal.getCurrentProduct().getProductQuality()).append(\"\\n\");\r\n            }\r\n        }\r\n\r\n        return new Result(true, sb.toString());\r\n    }\r\n    public static Result collectProduce(String name) {\r\n        Animal animal = getCurrentPlayer().getAnimalByName(name);\r\n        if(animal == null) {\r\n            return new Result(false, \"animal name is not correct.\");\r\n        }\r\n        else if(!getCurrentPlayer().getPosition().isAdjacent(animal.getPosition())) {\r\n            return new Result(false, \"your position is not adjacent!\");\r\n        }\r\n\r\n        else if(animal.getCurrentProduct() == null) {\r\n            return new Result(false, \"no product is available for this animal!\");\r\n        }\r\n        else if(animal.getAnimalType().equals(AnimalType.COW) || animal.getAnimalType().equals(AnimalType.GOAT)) {\r\n            return new Result(false, \"you have to use milk pail to collect these products.\");\r\n        }\r\n        else if(animal.getAnimalType().equals(AnimalType.SHEEP)) {\r\n            return new Result(false, \"you have to use shear to collect this product.\");\r\n        }\r\n        getCurrentPlayer().getInventory().addToBackPack(animal.getCurrentProduct(), 1);\r\n        animal.setCurrentProduct(null);\r\n\r\n        return new Result(true, \"product added to the inventory.\");\r\n    }\r\n    public static Result sellAnimal(String name) {\r\n        Animal animal = getCurrentPlayer().getAnimalByName(name);\r\n        if(animal == null) {\r\n            return new Result(false, \"animal name is not correct.\");\r\n        }\r\n        Tile animalTile = App.currentGame.getTile(animal.getPosition());\r\n\r\n        App.currentGame.getDateAndTime().removeObserver(animal);\r\n        getCurrentPlayer().getAnimals().remove(animal);\r\n        getCurrentPlayer().addGold(animal.getPrice());\r\n        animalTile.empty();\r\n\r\n        return new Result(true,  animal.getName() + \" has been sold with price \" + animal.getPrice());\r\n    }\r\n    public static Result fishing(String material) {\r\n        Lake lake = null;\r\n        for(int row = getCurrentPlayer().getPosition().y - 1; row <= getCurrentPlayer().getPosition().y + 1; row++) {\r\n            for(int col = getCurrentPlayer().getPosition().x - 1; col <= getCurrentPlayer().getPosition().x + 1; col++) {\r\n                if(App.currentGame.getTile(col, row).getArea() instanceof Lake) {\r\n                    lake = (Lake) App.currentGame.getTile(col, row).getArea();\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        if(lake == null) {\r\n            return new Result(false, \"You need to stand adjacent to lake.\");\r\n        }\r\n        else {\r\n            FishingPole fishingPole = getCurrentPlayer().getInventory().getFishingPole(material);\r\n\r\n            if(fishingPole == null) {\r\n                return new Result(false, \"fishing pole not found.\");\r\n            }\r\n\r\n            return new Result(true, fishingPole.use(lake, getCurrentPlayer(), App.currentGame.getWeather().getCurrentWeather()));\r\n        }\r\n    }\r\n\r\n    public static Result showStoreProducts() {\r\n        Tile playerTile = App.currentGame.getTile(getCurrentPlayer().getPosition());\r\n\r\n        if(!playerTile.getAreaType().equals(AreaType.STORE)) {\r\n            return new Result(false, \"You need to be in a store to run this command.\");\r\n        }\r\n\r\n        Store store = (Store) playerTile.getArea();\r\n        if(!store.isOpen(App.currentGame.getDateAndTime().getHour())) {\r\n            return new Result(false, \"store is closed now!\");\r\n        }\r\n\r\n        return new Result(true, \"All Items: \\n\" + store.displayItems());\r\n    }\r\n\r\n    public static Result showCropInfo(String name) {\r\n        Crops crop = Crops.getByName(name);\r\n        if(crop == null)\r\n            return new Result(false,\"no crop with this name exists!\");\r\n        return new Result(true,crop.toString());\r\n    }\r\n\r\n    public static Result plant(String seedName, int dx, int dy) {\r\n        Game current = App.currentGame;\r\n        int nextX = current.getCurrentPlayer().getPosition().x + dx;\r\n        int nextY = current.getCurrentPlayer().getPosition().y + dy;\r\n\r\n        if(dx==0 && dy==0) {return new Result(false,\"this is not a valid direction!\");}\r\n\r\n        if(nextX>Map.COLS||nextY>Map.ROWS||nextX<0||nextY<0) {\r\n            return new Result(false,\"you are going out of bounds!\");}\r\n\r\n        Tile goalTile = App.currentGame.getMap().getTile(new Position(nextX,nextY));\r\n\r\n        if(!goalTile.getObjectInTile().getClass().equals(PloughedPlace.class))\r\n            return new Result(false,\"you should plough the tile first!\");\r\n\r\n        PloughedPlace tobeSeeded = (PloughedPlace) goalTile.getObjectInTile();\r\n\r\n        if(CropSeeds.getByName(seedName) != null){\r\n            return tobeSeeded.seed(CropSeeds.getByName(seedName));\r\n        }\r\n\r\n        if(SeedType.getByName(seedName) != null){\r\n            return tobeSeeded.seed(SeedType.getByName(seedName));\r\n        }\r\n\r\n        return new Result(false,\"no seed found with this name\");\r\n    }\r\n\r\n    public static Result fertilize(String fertilizerName, Position position) {\r\n        Tile goalTile = App.currentGame.getTile(position.x,position.y);\r\n        if(goalTile.getObjectInTile() == null) return new Result(false,\"goal tile is empty\");\r\n        if(!goalTile.getObjectInTile().getClass().equals(PloughedPlace.class))\r\n            return new Result(false,\"goal tile is not a PloughedPlace\");\r\n        PloughedPlace goalPlace = (PloughedPlace) goalTile.getObjectInTile();\r\n        if(fertilizerName.equals(\"water fertilizer\")){\r\n            return goalPlace.getCurrentState().fertilize(Fertilizer.Water);\r\n        }\r\n        else if(fertilizerName.equals(\"growth fertilizer\")){\r\n            return goalPlace.getCurrentState().fertilize(Fertilizer.Growth);\r\n        }\r\n        else {\r\n            return new Result(false,\"fertilizer not found\");\r\n        }\r\n    }\r\n\r\n    public static Result plantMixedSeed(int dx,int dy) {\r\n\r\n        CropSeeds randomSeed = MixedSeedCrop.getRandomSeed(App.currentGame.getDateAndTime().getSeason());\r\n\r\n        return plant(randomSeed.name(), dx, dy); // if incorrect errors are shown you should check plant method\r\n    }\r\n\r\n\r\n    public static Result showPlant(int x, int y) {\r\n        Position position = new Position(x, y);\r\n        if(position.outOfBounds()) {\r\n            return new Result(false,\"this position is out of bounds!\");\r\n        }\r\n        Tile tile = App.currentGame.getMap().getTile(position);\r\n        if(!tile.getObjectInTile().getClass().equals(PloughedPlace.class))\r\n            return new Result(false,\"this is not a ploughed tile!\");\r\n        PloughedPlace toBeShown = (PloughedPlace) tile.getObjectInTile();\r\n\r\n        if(!toBeShown.hasTreeOrCrop())\r\n            return new Result(false,\"there is not any plant here!\");\r\n        return new Result(true,toBeShown.printInfo());\r\n\r\n    }\r\n\r\n    public static Result placeItem(String itemName, Position position) {\r\n        return null;\r\n    }\r\n\r\n\r\n    public static Result askMarriage(String username, String ringName) {\r\n        return null;\r\n    }\r\n\r\n    public static Result giftNPC(String NPCName, String itemName) {\r\n        return null;\r\n    }\r\n    public static Result questLists() {\r\n        return null;\r\n    }\r\n    public static Result finishQuest(int index) {\r\n        return null;\r\n    }\r\n    public static Result ShowRecipe() {\r\n        Player player = getCurrentPlayer();\r\n        for (CraftItem availableCraft : player.getAvailableCrafts()) {\r\n            System.out.println(availableCraft.getCraftItemType().recipe);\r\n        }\r\n        return null;\r\n    }\r\n    public static Result crafting(String craftingName) {\r\n        Player player = App.currentGame.getCurrentPlayer();\r\n        boolean find = false;\r\n        for (BackPackable backPackable : player.getInventory().getItems().keySet()) {\r\n            if (backPackable.getName().equals(craftingName)) {\r\n                find = true;\r\n                break;\r\n            }\r\n        }\r\n        if (!find && player.getInventory().getItems().size()==player.getInventory().getCapacity()){\r\n            return new Result(false , \"your inventory is full!\");\r\n        }\r\n        CraftItem crafting = null;\r\n        for (CraftItem availableCraft : player.getAvailableCrafts()) {\r\n            if(availableCraft.getName().equals(craftingName)){\r\n                crafting = availableCraft;\r\n                for (BackPackable backPackable : availableCraft.getCraftItemType().ingredients.keySet()) {\r\n                    int num = availableCraft.getCraftItemType().ingredients.get(backPackable);\r\n                    for (BackPackable packable : player.getInventory().getItems().keySet()) {\r\n                        int number = player.getInventory().getItems().get(packable);\r\n                        if(packable.getName().equals(backPackable.getName())){\r\n                            if (number < num) {\r\n                                return new Result(false , \"you dont have enough ingredients!\");\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n        }\r\n        if(crafting == null)\r\n            return new Result(false,\"craft item not available\");\r\n        for (BackPackable backPackable : crafting.getCraftItemType().ingredients.keySet()) {\r\n            int num = player.getInventory().getItems().get(backPackable);\r\n            for (BackPackable temp : player.getInventory().getItems().keySet()) {\r\n                int number = player.getInventory().getItems().get(temp);\r\n                if(backPackable.getName().equals(temp.getName())){\r\n                    player.getInventory().getItems().put(temp, number-num);\r\n                }\r\n            }\r\n        }\r\n        player.getInventory().getItems().put(crafting , player.getInventory().getItems().getOrDefault(crafting, 0) + 1);\r\n        player.setEnergy(player.getEnergy()-2);\r\n        return new Result(true,\"craft make successfully\");\r\n    }\r\n    public static Result PlaceItem(String itemName, String direction) {\r\n        itemName = itemName.trim().toLowerCase();\r\n        Player player = App.currentGame.getCurrentPlayer();\r\n        BackPackable item = null;\r\n        for (BackPackable backPackable : player.getInventory().getItems().keySet()) {\r\n            if (backPackable.getName().equals(itemName)) {\r\n                item = backPackable;\r\n            }\r\n        }\r\n        if(item == null){\r\n            return new Result(false , \"you dont have this item\");\r\n        }\r\n        Tile tile = null;\r\n        switch (direction) {\r\n            case \"up\":\r\n                tile = new Tile(player.getPosition().x , player.getPosition().y+1);\r\n                break;\r\n            case \"down\":\r\n                tile = new Tile(player.getPosition().x , player.getPosition().y-1);\r\n                break;\r\n            case \"left\":\r\n                tile = new Tile(player.getPosition().x-1 , player.getPosition().y);\r\n                break;\r\n            case \"right\":\r\n                tile = new Tile(player.getPosition().x+1 , player.getPosition().y);\r\n                break;\r\n            default:\r\n                return new Result(false , \"unknown direction\");\r\n        }\r\n        player.getInventory().getItems().remove(item);\r\n        return new Result(true , \"Item placed successfully\");\r\n    }\r\n    public static Result UseArtisan(String artisanName , String itemName) {\r\n        artisanName = artisanName.trim().toLowerCase();\r\n        itemName = itemName.trim().toLowerCase();\r\n        Player player = App.currentGame.getCurrentPlayer();\r\n        CraftItem artisan = null;\r\n        for (BackPackable backPackable : player.getInventory().getItems().keySet()) {\r\n            if (backPackable.getName().equals(artisanName)) {\r\n                artisan = (CraftItem) backPackable;\r\n                break;\r\n            }\r\n        }\r\n        if (artisan == null) {\r\n            return new Result(false,\"artisan item not available\");\r\n        }\r\n        ArtisanItem artisanItem = null;\r\n        switch (artisanName) {\r\n            case \"\":\r\n                artisanItem = new ArtisanItem(ArtisanItemType.HONEY);\r\n                break;\r\n            case \"milk\":\r\n                artisanItem = new ArtisanItem(ArtisanItemType.CHEESE_MILK);\r\n                break;\r\n            case \"large milk\":\r\n                artisanItem = new ArtisanItem(ArtisanItemType.CHEESE_LARGE_MILK);\r\n                break;\r\n            case \"goat milk\":\r\n                artisanItem = new ArtisanItem(ArtisanItemType.GOAT_CHEESE_MILK);\r\n                break;\r\n            case \"large goat milk\":\r\n                artisanItem = new ArtisanItem(ArtisanItemType.GOAT_CHEESE_LARGE_MILK);\r\n                break;\r\n            case \"wheat\" :\r\n                artisanItem = new ArtisanItem(ArtisanItemType.BEER);\r\n                break;\r\n            case \"rice\" :\r\n                artisanItem = new ArtisanItem(ArtisanItemType.VINEGAR);\r\n                break;\r\n            case \"coffee been\" :\r\n                artisanItem = new ArtisanItem(ArtisanItemType.COFFEE);\r\n                break;\r\n            case \"juice\" :\r\n                // must change\r\n                artisanItem = new ArtisanItem(ArtisanItemType.JUICE);\r\n                break;\r\n            case \"honey\" :\r\n                artisanItem = new ArtisanItem(ArtisanItemType.MEAD);\r\n                break;\r\n            case \"hops\" :\r\n                artisanItem = new ArtisanItem(ArtisanItemType.PALE_ALE);\r\n                break;\r\n            case \"wine\" :\r\n                // must change\r\n                artisanItem = new ArtisanItem(ArtisanItemType.WINE);\r\n                break;\r\n            case \"common mushroom\" :\r\n                artisanItem = new ArtisanItem(ArtisanItemType.DRIED_COMMON_MUSHROOM);\r\n                break;\r\n            case \"red mushroom\" :\r\n                artisanItem = new ArtisanItem(ArtisanItemType.DRIED_RED_MUSHROOM);\r\n                break;\r\n            case \"purple mushroom\" :\r\n                artisanItem = new ArtisanItem(ArtisanItemType.DRIED_PURPLE_MUSHROOM);\r\n                break;\r\n            case \"dried fruit\" :\r\n                // must change\r\n                artisanItem = new ArtisanItem(ArtisanItemType.DRIED_FRUIT);\r\n                break;\r\n            case \"grapes\" :\r\n                artisanItem = new ArtisanItem(ArtisanItemType.RAISINS);\r\n                break;\r\n            case \"coal\":\r\n                artisanItem = new ArtisanItem(ArtisanItemType.COAL);\r\n                break;\r\n            case \"rabbit wool\":\r\n                artisanItem = new ArtisanItem(ArtisanItemType.CLOTH_RABBIT);\r\n                break;\r\n            case \"sheep wool\":\r\n                artisanItem = new ArtisanItem(ArtisanItemType.CLOTH_SHEEP);\r\n                break;\r\n            case \"egg\" :\r\n                artisanItem = new ArtisanItem(ArtisanItemType.MAYONNAISE_EGG);\r\n                break;\r\n            case \"large egg\" :\r\n                artisanItem = new ArtisanItem(ArtisanItemType.MAYONNAISE_LARGE_EGG);\r\n                break;\r\n            case \"dinosaur egg\" :\r\n                artisanItem = new ArtisanItem(ArtisanItemType.DINOSAUR_MAYONNAISE);\r\n                break;\r\n            case \"duck egg\" :\r\n                artisanItem = new ArtisanItem(ArtisanItemType.DUCK_MAYONNAISE);\r\n                break;\r\n            case \"sunflower\" :\r\n                artisanItem = new ArtisanItem(ArtisanItemType.OIL_SUNFLOWER);\r\n                break;\r\n            case \"sunflower seed\" :\r\n                artisanItem = new ArtisanItem(ArtisanItemType.OIL_SUNFLOWER_SEED);\r\n                break;\r\n            case \"corn\" :\r\n                artisanItem = new ArtisanItem(ArtisanItemType.OIL_CORN);\r\n                break;\r\n            case \"truffle\"   :\r\n                artisanItem = new ArtisanItem(ArtisanItemType.TRUFFLE_OIL);\r\n                break;\r\n            case \"pickles\":\r\n                artisanItem = new ArtisanItem(ArtisanItemType.PICKLES);\r\n                break;\r\n            case \"jelly\" :\r\n                artisanItem = new ArtisanItem(ArtisanItemType.JELLY);\r\n                break;\r\n            case \"fish smoker\":\r\n                artisanItem = new ArtisanItem(ArtisanItemType.SMOKED_FISH);\r\n                break;\r\n            case \"furnace\":\r\n                artisanItem = new ArtisanItem(ArtisanItemType.METAL_BAR);\r\n                break;\r\n            default:\r\n                return new Result(false , \"Artisan item not available\");\r\n        }\r\n        if (artisanItem.getName().equals(\"honey\")){\r\n            Game game = App.currentGame;\r\n            artisanItem.setHour(game.getDateAndTime().getHour());\r\n            artisanItem.setDay(game.getDateAndTime().getDay());\r\n            player.getArtisanItems().add(artisanItem);\r\n            return new Result(true , \"Artisan item made successfully\");\r\n        }\r\n        for (BackPackable backPackable : player.getInventory().getItems().keySet()) {\r\n            if (backPackable.getName().equals(artisanItem.getName())) {\r\n                if(artisanItem.getArtisanItemType().ingredients.getName().equals(backPackable.getName())) {\r\n                    if (player.getInventory().getItems().get(backPackable)<artisanItem.getArtisanItemType().number) {\r\n                        return new Result(false , \"You cant made this artisan item\");\r\n                    }\r\n                    Game game = App.currentGame;\r\n                    artisanItem.setHour(game.getDateAndTime().getHour());\r\n                    artisanItem.setDay(game.getDateAndTime().getDay());\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        player.getArtisanItems().add(artisanItem);\r\n        return new Result(true , \"Artisan item made successfully\");\r\n    }\r\n    public static Result GetArtisan(String artisanName) {\r\n        Player player = App.currentGame.getCurrentPlayer();\r\n        ArtisanItem temp = null;\r\n        for (ArtisanItem artisanItem : player.getArtisanItems()) {\r\n            if (artisanItem.getName().equals(artisanName)) {\r\n                temp = artisanItem;\r\n            }\r\n        }\r\n        if (temp == null) {\r\n            return new Result(false, \"Artisan item not found\");\r\n        }\r\n        Game game = App.currentGame;\r\n        if (temp.getArtisanItemType().productionTimeInHours==0){\r\n            if (temp.getDay()>game.getDateAndTime().getDay()) {\r\n                player.getInventory().getItems().put(temp , 1);\r\n                player.getArtisanItems().remove(temp);\r\n                return new Result(true , \"You receive Artisan item successfully\");\r\n            }\r\n            return new Result(false, \"Artisan item is not ready\");\r\n        }\r\n        int hour = 0;\r\n        hour += (game.getDateAndTime().getHour()-temp.getHour());\r\n        hour += (game.getDateAndTime().getDay()-temp.getDay())*24;\r\n        if(temp.getArtisanItemType().productionTimeInHours>hour) {\r\n            return new Result(false, \"Artisan item is not ready\");\r\n        }\r\n        player.getInventory().getItems().put(temp , 1);\r\n        player.getArtisanItems().remove(temp);\r\n        return new Result(true , \"You receive Artisan item successfully\");\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/controllers/GameMenuController.java b/src/main/java/controllers/GameMenuController.java
--- a/src/main/java/controllers/GameMenuController.java	(revision f11b632d115d8f590fb3410b5d9a8f98a0faaac2)
+++ b/src/main/java/controllers/GameMenuController.java	(date 1746869822043)
@@ -429,6 +429,9 @@
 
         Tile goalTile = App.currentGame.getMap().getTile(new Position(nextX,nextY));
 
+        if(goalTile.getObjectInTile() == null )
+            return new Result(false,"you should plough ths tile first!");
+
         if(!goalTile.getObjectInTile().getClass().equals(PloughedPlace.class))
             return new Result(false,"you should plough the tile first!");
 
Index: src/main/java/models/farming/GeneralPlants/PloughedPlace.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package models.farming.GeneralPlants;\r\n\r\nimport models.App;\r\nimport models.Result;\r\nimport models.farming.*;\r\nimport models.map.AreaType;\r\nimport models.map.Map;\r\nimport models.map.Position;\r\nimport models.map.Tile;\r\nimport models.time.DateAndTime;\r\nimport models.time.TimeObserver;\r\n\r\nimport java.util.*;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class PloughedPlace implements TimeObserver {\r\n    protected Tile tile;\r\n    protected Fertilizer fertilizer = null;\r\n\r\n    public void setHarvestable(Harvestable harvestable) {\r\n        this.harvestable = harvestable;\r\n    }\r\n\r\n    protected Harvestable harvestable;\r\n\r\n    public void setLastUpdate(DateAndTime lastUpdate) {\r\n        this.lastUpdate = lastUpdate;\r\n    }\r\n\r\n    protected DateAndTime lastUpdate;\r\n    protected PlantState currentState = new PloughedState(this);\r\n    protected SeedType seed;\r\n    protected CropSeeds cropSeed;\r\n\r\n    protected boolean isInGreenHouse(){\r\n        return tile.getAreaType() == AreaType.GREENHOUSE;\r\n    }\r\n\r\n    public Result seed(SeedType seed) {\r\n        if (harvestable != null) {\r\n            return new Result(false, \"This plot is already occupied.\");\r\n        }\r\n\r\n        TreeType treeType = SeedType.getTreeOfSeedType(seed);\r\n\r\n        if (treeType == null) {\r\n            return new Result(false, \"This seed cannot grow into a tree.\");\r\n        }\r\n\r\n        Result seedResult = currentState.seed(seed);\r\n        if (!seedResult.isSuccessFull()) {\r\n            return seedResult;\r\n        }\r\n\r\n        Tree tree = new Tree(treeType);\r\n        tree.setDaysUntilHarvest(treeType.getTotalHarvestTime());\r\n        this.harvestable = tree;\r\n        this.seed = seed;\r\n\r\n        return new Result(true, \"Tile seeded successfully.\");\r\n    }\r\n\r\n    public void setState(PlantState currentState) {\r\n        this.currentState = currentState;\r\n    }\r\n\r\n    public Result seed(CropSeeds seed){\r\n        if (harvestable != null) {\r\n            return new Result(false, \"already there is a crop or tree here!\");\r\n        }\r\n\r\n        Crops crop = CropSeeds.cropOfThisSeed(seed);\r\n\r\n        if(crop == null)  throw new IllegalArgumentException(\"crop seed cannot be null\");\r\n\r\n        if (!crop.canGrowInThisSeason(lastUpdate.getSeason()) && !isInGreenHouse()) {\r\n            return new Result(false, \"this is not a suitable season for this seed!\");\r\n        }\r\n\r\n        Result seedResult = this.currentState.seed(seed);\r\n        if(!seedResult.isSuccessFull()) {\r\n            return seedResult;\r\n        }\r\n\r\n        this.cropSeed = seed;\r\n        this.harvestable = new Crop(crop);\r\n\r\n        if (crop.canBecomeGiant()) {\r\n            List<List<Position>> giantPositions = getAll2x2Groups();\r\n            for(List<Position> giantPosition : giantPositions) {\r\n                if (canBecomeGiant(giantPosition)) {\r\n                    List<Tile> giantTiles = new LinkedList<>();\r\n                    for(Position position : giantPosition) {\r\n                        giantTiles.add(App.currentGame.getTile(position));\r\n                    }\r\n                    GiantPlant giantPlant = new GiantPlant(giantTiles);\r\n                    // TODO : Update info of giant Plant based on participants\r\n                    for (Tile part : giantTiles) {\r\n                        part.setObjectInTile(giantPlant);\r\n                    }\r\n                }\r\n            }\r\n            return new Result(true,\"Giant plant seeded!\");\r\n        } else {\r\n            return new Result(true,\"Crop seeded!\");\r\n        }\r\n    }\r\n\r\n    public void setFertilizer(Fertilizer fertilizer) {\r\n        this.fertilizer = fertilizer;\r\n    }\r\n\r\n    public void setCropSeed(CropSeeds cropSeed) {\r\n        this.cropSeed = cropSeed;\r\n    }\r\n\r\n    public void setSeed(SeedType seed) {\r\n        this.seed = seed;\r\n    }\r\n\r\n    public PloughedPlace() {\r\n        App.currentGame.getDateAndTime().addObserver(this);\r\n        this.setLastUpdate(App.currentGame.getDateAndTime());\r\n    }\r\n\r\n    public PloughedPlace(Tile tile) {\r\n        this.tile = tile;\r\n    }\r\n\r\n    @Override\r\n    public void update(DateAndTime dateAndTime) {\r\n        if(harvestable != null) {\r\n            harvestable.update(dateAndTime);\r\n        }\r\n        if(lastUpdate.getDay() != dateAndTime.getDay()){\r\n            currentState.updateByTime();\r\n        }\r\n        // other changes should be added\r\n        lastUpdate = dateAndTime;\r\n    }\r\n\r\n    public boolean hasTreeOrCrop() {\r\n        return harvestable != null;\r\n    }\r\n\r\n    public void unPlough(){\r\n        this.tile.unplow();\r\n    }\r\n\r\n    private List<List<Position>> getAll2x2Groups() {\r\n        Position pos = tile.getPosition();\r\n        return Arrays.asList(\r\n                Arrays.asList(pos, pos.getRight(), pos.getDown(), pos.getRight().getDown()),\r\n                Arrays.asList(pos, pos.getLeft(), pos.getDown(), pos.getDown().getLeft()),\r\n                Arrays.asList(pos, pos.getRight(), pos.getUp(), pos.getRight().getUp()),\r\n                Arrays.asList(pos, pos.getLeft(), pos.getUp(), pos.getLeft().getUp())\r\n        );\r\n    }\r\n\r\n    private boolean canBecomeGiant(List<Position> positions) {\r\n        Crops previousCrops = getCropTypeOfPos(positions.get(0));\r\n        TreeType previousTree = getTreeTypeOfPos(positions.get(0));\r\n\r\n        for(int i=1;i<positions.size()-1;i++){\r\n            Position nextPos = positions.get(i);\r\n            Position previousPos = positions.get(i-1);\r\n            if(App.currentGame.getTile(previousPos.x,previousPos.y).getAreaType() == AreaType.GREENHOUSE){\r\n                return false;\r\n            }\r\n            \r\n            if(getCropTypeOfPos(nextPos)!= null && getCropTypeOfPos(previousPos)!= null){\r\n                if(!getCropTypeOfPos(nextPos).equals(getCropTypeOfPos(previousPos))){\r\n                    return false;\r\n                }\r\n            }\r\n            else if(getTreeTypeOfPos(nextPos)!= null && getTreeTypeOfPos(previousPos)!= null){\r\n                if(!getTreeTypeOfPos(nextPos).equals(getTreeTypeOfPos(previousPos))){\r\n                    return false;\r\n                }\r\n            }\r\n            else{\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    private Crops getCropTypeOfPos(Position pos){\r\n        Tile tileOfPos = App.currentGame.getTile(pos);\r\n        if(tileOfPos.getObjectInTile() == null){\r\n            return null;\r\n        }\r\n        if(tileOfPos.getObjectInTile() instanceof PloughedPlace ploughedPlace){\r\n            if(ploughedPlace.getHarvestable() instanceof Crop crop){\r\n                return crop.getCropType();\r\n            }\r\n            else{\r\n                return null;\r\n            }\r\n        }\r\n        else return null;\r\n    }\r\n\r\n    private TreeType getTreeTypeOfPos(Position pos){\r\n        Tile tileOfPos = App.currentGame.getTile(pos);\r\n        if(tileOfPos.getObjectInTile() == null){\r\n            return null;\r\n        }\r\n        if(tileOfPos.getObjectInTile() instanceof PloughedPlace ploughedPlace){\r\n            if(ploughedPlace.getHarvestable() instanceof Tree tree){\r\n                return tree.getTreeType();\r\n            }\r\n            else{\r\n                return null;\r\n            }\r\n        }\r\n        else return null;\r\n    }\r\n\r\n    public PlantState getCurrentState() {\r\n        return currentState;\r\n    }\r\n    public Harvestable getHarvestable() {\r\n        return harvestable;\r\n    }\r\n\r\n    public List<Integer> getDaysUntilHarvests(List<PloughedPlace> tiles) {\r\n        return tiles.stream()\r\n                .map(t -> t.getHarvestable() != null\r\n                        ? t.getHarvestable().getDaysUntilHarvest()\r\n                        : null)\r\n                .collect(Collectors.toList());\r\n    }\r\n\r\n    public String printInfo() {\r\n        if (harvestable == null) {\r\n            return \"Empty ploughed place.\";\r\n        }\r\n\r\n        return \"Name: \" + harvestable.getName() + \"\\n\" +\r\n                \"Days Until Harvest: \" + harvestable.getDaysUntilHarvest() + \"\\n\" +\r\n                \"Current State: \" + currentState.getClass().getSimpleName() + \"\\n\" +\r\n                \"Watered today: \" + (isWatered() ? \"Yes\" : \"No\") + \"\\n\" +\r\n                \"Fertilized: \" + (isFertilized() ? \"Yes\" : \"No\");\r\n    }\r\n\r\n    private boolean isWatered() {\r\n        return currentState instanceof WateredState || currentState instanceof RestState;\r\n    }\r\n\r\n    private boolean isFertilized() {\r\n        return fertilizer != null;\r\n    }\r\n\r\n}\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/models/farming/GeneralPlants/PloughedPlace.java b/src/main/java/models/farming/GeneralPlants/PloughedPlace.java
--- a/src/main/java/models/farming/GeneralPlants/PloughedPlace.java	(revision f11b632d115d8f590fb3410b5d9a8f98a0faaac2)
+++ b/src/main/java/models/farming/GeneralPlants/PloughedPlace.java	(date 1746871221134)
@@ -3,17 +3,15 @@
 import models.App;
 import models.Result;
 import models.farming.*;
-import models.map.AreaType;
+import models.map.*;
 import models.map.Map;
-import models.map.Position;
-import models.map.Tile;
 import models.time.DateAndTime;
 import models.time.TimeObserver;
 
 import java.util.*;
 import java.util.stream.Collectors;
 
-public class PloughedPlace implements TimeObserver {
+public class PloughedPlace implements TimeObserver , Tilable {
     protected Tile tile;
     protected Fertilizer fertilizer = null;
 
@@ -23,11 +21,8 @@
 
     protected Harvestable harvestable;
 
-    public void setLastUpdate(DateAndTime lastUpdate) {
-        this.lastUpdate = lastUpdate;
-    }
 
-    protected DateAndTime lastUpdate;
+    protected int lastDayUpdate;
     protected PlantState currentState = new PloughedState(this);
     protected SeedType seed;
     protected CropSeeds cropSeed;
@@ -73,7 +68,7 @@
 
         if(crop == null)  throw new IllegalArgumentException("crop seed cannot be null");
 
-        if (!crop.canGrowInThisSeason(lastUpdate.getSeason()) && !isInGreenHouse()) {
+        if (!crop.canGrowInThisSeason(lastUpdate().getSeason()) && !isInGreenHouse()) {
             return new Result(false, "this is not a suitable season for this seed!");
         }
 
@@ -120,11 +115,11 @@
 
     public PloughedPlace() {
         App.currentGame.getDateAndTime().addObserver(this);
-        this.setLastUpdate(App.currentGame.getDateAndTime());
     }
 
     public PloughedPlace(Tile tile) {
         this.tile = tile;
+        currentState = new PloughedState(this);
     }
 
     @Override
@@ -132,11 +127,16 @@
         if(harvestable != null) {
             harvestable.update(dateAndTime);
         }
-        if(lastUpdate.getDay() != dateAndTime.getDay()){
+        if(lastDayUpdate != dateAndTime.getDay()){
             currentState.updateByTime();
+            updateLastDay();
         }
+
         // other changes should be added
-        lastUpdate = dateAndTime;
+    }
+
+    public void updateLastDay(){
+        this.lastDayUpdate = lastUpdate().getDay();
     }
 
     public boolean hasTreeOrCrop() {
@@ -245,6 +245,11 @@
     }
 
     private boolean isWatered() {
+        if(currentState instanceof SeededState){
+            SeededState s = (SeededState) currentState;
+            if (s.getDaysNotWatered() == 0)
+                return true;
+        }
         return currentState instanceof WateredState || currentState instanceof RestState;
     }
 
@@ -252,6 +257,10 @@
         return fertilizer != null;
     }
 
+    public DateAndTime lastUpdate(){
+        return App.currentGame.getDateAndTime();
+    }
+
 }
 
 
Index: src/main/java/models/npcs/Abigail.java
===================================================================
diff --git a/src/main/java/models/npcs/Abigail.java b/src/main/java/models/npcs/Abigail.java
deleted file mode 100644
--- a/src/main/java/models/npcs/Abigail.java	(revision f11b632d115d8f590fb3410b5d9a8f98a0faaac2)
+++ /dev/null	(revision f11b632d115d8f590fb3410b5d9a8f98a0faaac2)
@@ -1,4 +0,0 @@
-package models.npcs;
-
-public class Abigail extends NPC {
-}
Index: src/main/java/models/npcs/Lia.java
===================================================================
diff --git a/src/main/java/models/npcs/Lia.java b/src/main/java/models/npcs/Lia.java
deleted file mode 100644
--- a/src/main/java/models/npcs/Lia.java	(revision f11b632d115d8f590fb3410b5d9a8f98a0faaac2)
+++ /dev/null	(revision f11b632d115d8f590fb3410b5d9a8f98a0faaac2)
@@ -1,4 +0,0 @@
-package models.npcs;
-
-public class Lia extends NPC {
-}
Index: src/main/java/models/npcs/Robin.java
===================================================================
diff --git a/src/main/java/models/npcs/Robin.java b/src/main/java/models/npcs/Robin.java
deleted file mode 100644
--- a/src/main/java/models/npcs/Robin.java	(revision f11b632d115d8f590fb3410b5d9a8f98a0faaac2)
+++ /dev/null	(revision f11b632d115d8f590fb3410b5d9a8f98a0faaac2)
@@ -1,4 +0,0 @@
-package models.npcs;
-
-public class Robin extends NPC {
-}
Index: src/main/java/models/npcs/Harvey.java
===================================================================
diff --git a/src/main/java/models/npcs/Harvey.java b/src/main/java/models/npcs/Harvey.java
deleted file mode 100644
--- a/src/main/java/models/npcs/Harvey.java	(revision f11b632d115d8f590fb3410b5d9a8f98a0faaac2)
+++ /dev/null	(revision f11b632d115d8f590fb3410b5d9a8f98a0faaac2)
@@ -1,4 +0,0 @@
-package models.npcs;
-
-public class Harvey extends NPC {
-}
Index: src/main/java/models/npcs/Sebastian.java
===================================================================
diff --git a/src/main/java/models/npcs/Sebastian.java b/src/main/java/models/npcs/Sebastian.java
deleted file mode 100644
--- a/src/main/java/models/npcs/Sebastian.java	(revision f11b632d115d8f590fb3410b5d9a8f98a0faaac2)
+++ /dev/null	(revision f11b632d115d8f590fb3410b5d9a8f98a0faaac2)
@@ -1,4 +0,0 @@
-package models.npcs;
-
-public class Sebastian extends NPC {
-}
Index: src/main/java/models/farming/GeneralPlants/PlantState.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package models.farming.GeneralPlants;\r\n\r\nimport models.Result;\r\nimport models.farming.*;\r\n\r\npublic interface PlantState {\r\n    Result seed(Seedable seed);\r\n    Result fertilize(Fertilizer fertilizer);\r\n    Result water();\r\n    Result harvest();\r\n    Result takeRest();\r\n    Result updateByTime();\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/models/farming/GeneralPlants/PlantState.java b/src/main/java/models/farming/GeneralPlants/PlantState.java
--- a/src/main/java/models/farming/GeneralPlants/PlantState.java	(revision f11b632d115d8f590fb3410b5d9a8f98a0faaac2)
+++ b/src/main/java/models/farming/GeneralPlants/PlantState.java	(date 1746867378401)
@@ -10,4 +10,5 @@
     Result harvest();
     Result takeRest();
     Result updateByTime();
+    String getState();
 }
Index: src/main/java/models/farming/GeneralPlants/RestState.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package models.farming.GeneralPlants;\r\n\r\nimport models.Result;\r\nimport models.farming.*;\r\n\r\npublic class RestState implements PlantState{\r\n\r\n    private PloughedPlace tile;\r\n    private int restDaysRemaining;\r\n\r\n    public RestState(PloughedPlace tile) {\r\n        this.tile = tile;\r\n        Crop crop = (Crop) tile.getHarvestable();\r\n        Crops cropType = crop.getCropType();\r\n        this.restDaysRemaining= cropType.getRegrowthTime();\r\n    }\r\n\r\n    @Override\r\n    public Result updateByTime() {\r\n        restDaysRemaining--;\r\n        if (restDaysRemaining <= 0) {\r\n            tile.setState(new WateredState(tile));\r\n            return new Result(true, \"rest Period period over. Ready to harvest again.\");\r\n        }\r\n        return new Result(true, restDaysRemaining + \" withdrawal days left.\");\r\n    }\r\n\r\n    @Override\r\n    public Result harvest() {\r\n        return new Result(false, \"Cannot harvest during rest Period.\");\r\n    }\r\n\r\n    @Override\r\n    public Result takeRest() {\r\n        return new Result(false,\"Already in rest mode\");\r\n    }\r\n\r\n    @Override\r\n    public Result fertilize(Fertilizer fertilizer) {\r\n        return new Result(false, \"Cannot fertilize during rest Period.\");\r\n    }\r\n\r\n    @Override\r\n    public Result water() {\r\n        return new Result(false, \"Already watered (in rest Period).\");\r\n    }\r\n\r\n    @Override\r\n    public Result seed(Seedable seed) {\r\n        return new Result(false,\"this tile is already seeded\");\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/models/farming/GeneralPlants/RestState.java b/src/main/java/models/farming/GeneralPlants/RestState.java
--- a/src/main/java/models/farming/GeneralPlants/RestState.java	(revision f11b632d115d8f590fb3410b5d9a8f98a0faaac2)
+++ b/src/main/java/models/farming/GeneralPlants/RestState.java	(date 1746867378382)
@@ -15,6 +15,10 @@
         this.restDaysRemaining= cropType.getRegrowthTime();
     }
 
+    public String getState() {
+        return "Rest";
+    }
+
     @Override
     public Result updateByTime() {
         restDaysRemaining--;
Index: src/main/java/models/farming/Tree.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package models.farming;\r\n\r\nimport models.App;\r\nimport models.map.Tilable;\r\nimport models.time.DateAndTime;\r\nimport models.time.TimeObserver;\r\n\r\nimport java.util.ArrayList;\r\n\r\npublic class Tree extends Harvestable implements Tilable, TimeObserver {\r\n    private TreeType treeType;\r\n\r\n    public TreeType getTreeType() {\r\n        return treeType;\r\n    }\r\n    public SeedType getSeedType() {\r\n        return treeType.seedType;\r\n    }\r\n    public void setTreeType(TreeType treeType) {\r\n        this.treeType = treeType;\r\n        this.daysUntilHarvest = treeType.getTotalHarvestTime();\r\n    }\r\n\r\n    public Tree(TreeType treeType) {\r\n        this.treeType = treeType;\r\n        this.daysUntilHarvest = treeType.getTotalHarvestTime();\r\n    }\r\n\r\n    @Override\r\n    public void harvest(int number) {\r\n        App.currentGame.getCurrentPlayer().addToBackPack(new Fruit(this),number);\r\n    }\r\n\r\n    @Override\r\n    public ArrayList<Integer> getStages() {\r\n        return null;\r\n    }\r\n\r\n    @Override\r\n    public boolean isOneTime() {\r\n        return false;\r\n    }\r\n\r\n    public String getName(){\r\n        return treeType.name().toLowerCase().replaceAll(\"_\", \" \");\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/models/farming/Tree.java b/src/main/java/models/farming/Tree.java
--- a/src/main/java/models/farming/Tree.java	(revision f11b632d115d8f590fb3410b5d9a8f98a0faaac2)
+++ b/src/main/java/models/farming/Tree.java	(date 1746804285234)
@@ -9,6 +9,7 @@
 
 public class Tree extends Harvestable implements Tilable, TimeObserver {
     private TreeType treeType;
+    private boolean hasBeenAttacked = false;
 
     public TreeType getTreeType() {
         return treeType;
@@ -26,6 +27,13 @@
         this.daysUntilHarvest = treeType.getTotalHarvestTime();
     }
 
+    @Override
+    public void update(DateAndTime dt) {
+        super.update(dt);
+        hasBeenAttacked = false;
+        // TODO : hasBeenAttacked should be updated in suitable time
+    }
+
     @Override
     public void harvest(int number) {
         App.currentGame.getCurrentPlayer().addToBackPack(new Fruit(this),number);
Index: src/main/java/models/npcs/NPCFriendShip.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/models/npcs/NPCFriendShip.java b/src/main/java/models/npcs/NPCFriendShip.java
new file mode 100644
--- /dev/null	(date 1746809159020)
+++ b/src/main/java/models/npcs/NPCFriendShip.java	(date 1746809159020)
@@ -0,0 +1,5 @@
+package models.npcs;
+
+public class NPCFriendShip {
+
+}
Index: src/main/java/views/GameMenu.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package views;\r\n\r\nimport controllers.CheatCodeController;\r\nimport controllers.GameMenuController;\r\nimport models.App;\r\nimport models.Game;\r\nimport models.Player;\r\nimport models.Result;\r\nimport models.enums.commands.CheatCodeCommands;\r\nimport models.enums.commands.Commands;\r\nimport models.enums.commands.GameMenuCommands;\r\n\r\nimport javax.print.attribute.standard.PresentationDirection;\r\nimport java.util.Scanner;\r\nimport java.util.regex.Matcher;\r\n\r\npublic class GameMenu implements AppMenu {\r\n    private final Game game;\r\n\r\n    public GameMenu(Game game) {\r\n        this.game = game;\r\n        game.build();\r\n        System.out.println(\"\\\"\" + game.getCurrentPlayer().getUsername() + \"\\\" it's your turn to begin the game.\");\r\n    }\r\n\r\n    public Result terminateMenu(Scanner scanner) {\r\n        for(Player player : game.getPlayers()) {\r\n            System.out.println(player.getUsername() + \", do you agree with total game termination? (+/-)\");\r\n            String command = scanner.nextLine().trim();\r\n\r\n            if(command.equalsIgnoreCase(\"-\")) {\r\n                return new Result(false, \"All players must agree to completely terminate the game.\");\r\n            }\r\n            else if(!command.equalsIgnoreCase(\"+\")) {\r\n                return new Result(false, \"invalid command\");\r\n            }\r\n        }\r\n\r\n        return new Result(true, \"Game terminated successfully.\");\r\n    }\r\n\r\n    public void run(Scanner scanner) {\r\n        Player currentPlayer = game.getCurrentPlayer();\r\n        String command = scanner.nextLine().trim();\r\n\r\n        if(GameMenuCommands.NEXT_TURN_REGEX.matches(command)) {\r\n            game.nextTurn();\r\n            System.out.println(\"\\\"\" + game.getCurrentPlayer().getUsername() + \"\\\" go on!\");\r\n            return;\r\n        }\r\n\r\n        if(!currentPlayer.isLocked()) {\r\n            if(Commands.checkShowCurrentMenuRegex(command)) {\r\n                System.out.println(\"game menu\");\r\n            }\r\n\r\n            else if(GameMenuCommands.EXIT_GAME_REGEX.matches(command)) {\r\n                if(!currentPlayer.equals(game.getMainPlayer())) {\r\n                    System.out.println(\"Only the creator can exit the game.\");\r\n                }\r\n                else {\r\n                    App.currentGame = null;\r\n                    AppView.currentMenu = new MainMenu();\r\n                    System.out.println(\"game exited successfully!\");\r\n                }\r\n            }\r\n\r\n            else if(GameMenuCommands.TERMINATE_GAME_REGEX.matches(command)) {\r\n                Result terminate = terminateMenu(scanner);\r\n                System.out.println(terminate.message());\r\n\r\n                if(terminate.success()) {\r\n                    App.recentGames.remove(game);\r\n                    App.currentGame = null;\r\n                    AppView.currentMenu = new MainMenu();\r\n                }\r\n            }\r\n\r\n            else if(command.equals(\"time\")) {\r\n                System.out.println(game.getDateAndTime().displayHour());\r\n            }\r\n            else if(command.equals(\"date\")) {\r\n                System.out.println(game.getDateAndTime().displayDate());\r\n            }\r\n            else if(command.equals(\"datetime\")) {\r\n                System.out.println(game.getDateAndTime().displayDateTime());\r\n            }\r\n            else if(command.equals(\"season\")) {\r\n                System.out.println(game.getDateAndTime().displaySeason());\r\n            }\r\n            else if(GameMenuCommands.DAY_OF_WEEK_REGEX.matches(command)) {\r\n                System.out.println(game.getDateAndTime().displayDayOfWeek());\r\n            }\r\n            else if(CheatCodeCommands.ADVANCE_TIME_REGEX.matches(command)) {\r\n                Matcher matcher = CheatCodeCommands.ADVANCE_TIME_REGEX.matcher(command);\r\n\r\n                int hours = matcher.matches() ? Integer.parseInt(matcher.group(\"hours\")) : 0;\r\n\r\n                Result result = CheatCodeController.cheatAdvanceTime(hours);\r\n                System.out.println(result.message());\r\n            }\r\n            else if(CheatCodeCommands.ADVANCE_DATE_REGEX.matches(command)) {\r\n                Matcher matcher = CheatCodeCommands.ADVANCE_DATE_REGEX.matcher(command);\r\n\r\n                int days = matcher.matches() ? Integer.parseInt(matcher.group(\"days\")) : 0;\r\n\r\n                Result result = CheatCodeController.cheatAdvanceDate(days);\r\n                System.out.println(result.message());\r\n            }\r\n\r\n            else if(command.equals(\"weather\")) {\r\n                System.out.println(game.getWeather().displayWeather());\r\n            }\r\n            else if(GameMenuCommands.WEATHER_FORECAST_REGEX.matches(command)) {\r\n                System.out.println(game.getWeather().displayForecast());\r\n            }\r\n            else if(CheatCodeCommands.WEATHER_SET_REGEX.matches(command)) {\r\n                Matcher matcher = CheatCodeCommands.WEATHER_SET_REGEX.matcher(command);\r\n\r\n                String weatherType = matcher.matches() ? matcher.group(\"weatherType\") : \"\";\r\n\r\n                Result result = CheatCodeController.cheatSetWeather(weatherType);\r\n                System.out.println(result.message());\r\n            }\r\n\r\n            else if(GameMenuCommands.PRINT_MAP_REGEX.matches(command)) {\r\n                game.getMap().printMap();\r\n            }\r\n            else if(GameMenuCommands.MAP_GUIDE_REGEX.matches(command)) {\r\n                game.getMap().mapGuide();\r\n            }\r\n\r\n            else if(GameMenuCommands.WALK_REGEX.matches(command)) {\r\n                Matcher matcher = GameMenuCommands.WALK_REGEX.matcher(command);\r\n\r\n                int x = matcher.matches() ? Integer.parseInt(matcher.group(\"x\")) : 0;\r\n                int y = Integer.parseInt(matcher.group(\"y\"));\r\n\r\n                Result result = GameMenuController.walk(x, y);\r\n                System.out.println(result.message());\r\n\r\n                if(result.success()) {\r\n                    command = scanner.nextLine().trim();\r\n                    if(command.equalsIgnoreCase(\"y\")) {\r\n                        result = GameMenuController.setPosition(x, y);\r\n                        System.out.println(result.message());\r\n\r\n                        if(!result.success()) {\r\n                            game.nextTurn();\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            else if(GameMenuCommands.SHOW_ENERGY_REGEX.matches(command)) {\r\n                System.out.println(\"energy: \" + game.getCurrentPlayer().getEnergy());\r\n            }\r\n            else if(CheatCodeCommands.ENERGY_SET_REGEX.matches(command)) {\r\n                Matcher matcher = CheatCodeCommands.ENERGY_SET_REGEX.matcher(command);\r\n\r\n                int value = matcher.matches() ? Integer.parseInt(matcher.group(\"value\")) : 0;\r\n\r\n                Result result = CheatCodeController.cheatSetEnergy(value);\r\n                System.out.println(result.message());\r\n            }\r\n            else if(CheatCodeCommands.ENERGY_UNLIMITED_REGEX.matches(command)) {\r\n                Result result = CheatCodeController.cheatUnlimitedEnergy();\r\n                System.out.println(result.message());\r\n            }\r\n\r\n            else if(GameMenuCommands.INVENTORY_SHOW_REGEX.matches(command)) {\r\n                System.out.print(game.getCurrentPlayer().getInventory().display());\r\n            }\r\n            else if(GameMenuCommands.INVENTORY_TRASH_REGEX.matches(command)) {\r\n                Matcher matcher = GameMenuCommands.INVENTORY_TRASH_REGEX.matcher(command);\r\n\r\n                String itemName = matcher.matches() ? matcher.group(\"itemName\") : \"\";\r\n                int number = matcher.group(\"count\") != null ? Integer.parseInt(matcher.group(\"count\")) : -1;\r\n\r\n                Result result = GameMenuController.removeFromInventory(itemName, number);\r\n                System.out.println(result.message());\r\n            }\r\n\r\n            else if(GameMenuCommands.EQUIP_TOOL_REGEX.matches(command)) {\r\n                Matcher matcher = GameMenuCommands.EQUIP_TOOL_REGEX.matcher(command);\r\n\r\n                String toolName = matcher.matches() ? matcher.group(\"toolName\") : \"\";\r\n\r\n                Result result = GameMenuController.equipTool(toolName);\r\n                System.out.println(result.message());\r\n            }\r\n            else if(GameMenuCommands.SHOW_CURRENT_TOOL_REGEX.matches(command)) {\r\n                Result result = GameMenuController.showCurrentTool();\r\n                System.out.println(result.message());\r\n            }\r\n            else if(GameMenuCommands.SHOW_ALL_TOOLS_REGEX.matches(command)) {\r\n                System.out.print(game.getCurrentPlayer().getInventory().showTools());\r\n            }\r\n            else if(GameMenuCommands.TOOL_UPGRADE_REGEX.matches(command)) {\r\n                Matcher matcher = GameMenuCommands.TOOL_UPGRADE_REGEX.matcher(command);\r\n\r\n                String toolName = matcher.matches() ? matcher.group(\"toolName\") : \"\";\r\n\r\n                Result result = GameMenuController.upgradeTool(toolName);\r\n                System.out.println(result.message());\r\n            }\r\n            else if(GameMenuCommands.TOOL_USE_REGEX.matches(command)) {\r\n                Matcher matcher = GameMenuCommands.TOOL_USE_REGEX.matcher(command);\r\n\r\n                int dx = matcher.matches() ? Integer.parseInt(matcher.group(\"dx\")) : 0;\r\n                int dy = Integer.parseInt(matcher.group(\"dy\"));\r\n\r\n                Result result = GameMenuController.useTool(dx, dy);\r\n                System.out.println(result.message());\r\n            }\r\n\r\n            else if(GameMenuCommands.FRIDGE_REGEX.matches(command)) {\r\n                Matcher matcher = GameMenuCommands.FRIDGE_REGEX.matcher(command);\r\n\r\n                String action = matcher.matches() ? matcher.group(\"action\") : \"\";\r\n                String itemName = matcher.group(\"itemName\");\r\n\r\n                Result result;\r\n                if(action.equalsIgnoreCase(\"put\")) {\r\n                    result = GameMenuController.putInFridge(itemName);\r\n                }\r\n                else {\r\n                    result = GameMenuController.pickFromFridge(itemName);\r\n                }\r\n\r\n                System.out.println(result.message());\r\n            }\r\n            else if(GameMenuCommands.SHOW_COOKING_RECIPES_REGEX.matches(command)) {\r\n                System.out.print(\"Available cooking recipes: \\n\" + game.getCurrentPlayer().showAvailableFoods());\r\n            }\r\n            else if(GameMenuCommands.EAT_FOOD_REGEX.matches(command)) {\r\n                Matcher matcher = GameMenuCommands.EAT_FOOD_REGEX.matcher(command);\r\n\r\n                String foodName = matcher.matches() ? matcher.group(\"foodName\") : \"\";\r\n\r\n                Result result = GameMenuController.eatFood(foodName);\r\n                System.out.println(result.message());\r\n            }\r\n\r\n            else if(GameMenuCommands.BUILD_BUILDING_REGEX.matches(command)) {\r\n                Matcher matcher = GameMenuCommands.BUILD_BUILDING_REGEX.matcher(command);\r\n\r\n                String buildingName = matcher.matches() ? matcher.group(\"buildingName\") : \"\";\r\n                int x = Integer.parseInt(matcher.group(\"x\"));\r\n                int y = Integer.parseInt(matcher.group(\"y\"));\r\n\r\n                Result result;\r\n                if(buildingName.equals(\"barn\")) {\r\n                    result = GameMenuController.buildBarn(x, y);\r\n                }\r\n                else {\r\n                    result = GameMenuController.buildCoop(x, y);\r\n                }\r\n\r\n                System.out.println(result.message());\r\n            }\r\n            else if(GameMenuCommands.BUY_ANIMAL_REGEX.matches(command)) {\r\n                Matcher matcher = GameMenuCommands.BUY_ANIMAL_REGEX.matcher(command);\r\n\r\n                String animal = matcher.matches() ? matcher.group(\"animal\") : \"\";\r\n                String name = matcher.group(\"name\");\r\n\r\n                Result result = GameMenuController.buyAnimal(animal, name);\r\n                System.out.println(result.message());\r\n            }\r\n            else if(GameMenuCommands.PET_ANIMAL_REGEX.matches(command)) {\r\n                Matcher matcher = GameMenuCommands.PET_ANIMAL_REGEX.matcher(command);\r\n\r\n                String name = matcher.matches() ? matcher.group(\"name\") : \"\";\r\n\r\n                Result result = GameMenuController.petAnimal(name);\r\n                System.out.println(result.message());\r\n            }\r\n            else if(CheatCodeCommands.ANIMAL_FRIENDSHIP_REGEX.matches(command)) {\r\n                Matcher matcher = CheatCodeCommands.ANIMAL_FRIENDSHIP_REGEX.matcher(command);\r\n\r\n                String name = matcher.matches() ? matcher.group(\"name\") : \"\";\r\n                int amount = Integer.parseInt(matcher.group(\"amount\"));\r\n\r\n                Result result = CheatCodeController.cheatAnimalFriendship(name, amount);\r\n                System.out.println(result.message());\r\n            }\r\n            else if(command.equals(\"animals\")) {\r\n                System.out.print(\"Animals: \\n\" + game.getCurrentPlayer().showAnimals());\r\n            }\r\n            else if(GameMenuCommands.SHEPHERD_ANIMAL_REGEX.matches(command)) {\r\n                Matcher matcher = GameMenuCommands.SHEPHERD_ANIMAL_REGEX.matcher(command);\r\n\r\n                String name = matcher.matches() ? matcher.group(\"name\") : \"\";\r\n                int x = Integer.parseInt(matcher.group(\"x\"));\r\n                int y = Integer.parseInt(matcher.group(\"y\"));\r\n\r\n                Result result = GameMenuController.shepherdAnimal(name, x, y);\r\n                System.out.println(result.message());\r\n            }\r\n            else if(GameMenuCommands.FEED_ANIMAL_REGEX.matches(command)) {\r\n                Matcher matcher = GameMenuCommands.FEED_ANIMAL_REGEX.matcher(command);\r\n\r\n                String name = matcher.matches() ? matcher.group(\"name\") : \"\";\r\n\r\n                Result result = GameMenuController.feedHayAnimal(name);\r\n                System.out.println(result.message());\r\n            }\r\n            else if(command.equals(\"produces\")) {\r\n                Result result = GameMenuController.showAnimalProducts();\r\n                System.out.println(result.message());\r\n            }\r\n            else if(GameMenuCommands.COLLECT_PRODUCE_REGEX.matches(command)) {\r\n                Matcher matcher = GameMenuCommands.COLLECT_PRODUCE_REGEX.matcher(command);\r\n\r\n                String name = matcher.matches() ? matcher.group(\"name\") : \"\";\r\n\r\n                Result result = GameMenuController.collectProduce(name);\r\n                System.out.println(result.message());\r\n            }\r\n            else if(GameMenuCommands.SELL_ANIMAL_REGEX.matches(command)) {\r\n                Matcher matcher = GameMenuCommands.SELL_ANIMAL_REGEX.matcher(command);\r\n\r\n                String name = matcher.matches() ? matcher.group(\"name\") : \"\";\r\n\r\n                Result result = GameMenuController.sellAnimal(name);\r\n                System.out.println(result.message());\r\n            }\r\n            else if(GameMenuCommands.FISHING_REGEX.matches(command)) {\r\n                Matcher matcher = GameMenuCommands.FISHING_REGEX.matcher(command);\r\n\r\n                String fishingPole = matcher.matches() ? matcher.group(\"fishingPole\") : \"\";\r\n\r\n                Result result = GameMenuController.fishing(fishingPole);\r\n                System.out.println(result.message());\r\n            }\r\n\r\n            else if(GameMenuCommands.SHOW_STORE_PRODUCTS_REGEX.matches(command)) {\r\n                Result result = GameMenuController.showStoreProducts();\r\n                System.out.print(result.message());\r\n            }\r\n\r\n            else if(GameMenuCommands.CROP_INFO.matches(command)) {\r\n                Matcher matcher = GameMenuCommands.CROP_INFO.matcher(command);\r\n                matcher.matches();\r\n                System.out.println(GameMenuController.showCropInfo(matcher.group(\"craft_name\")));\r\n            }\r\n            else if(GameMenuCommands.PLANT_SEED.matches(command)) {\r\n                Matcher matcher = GameMenuCommands.PLANT_SEED.matcher(command);\r\n                matcher.matches();\r\n                System.out.println(GameMenuController.plant(matcher.group(\"seed\"),\r\n                        Integer.parseInt(matcher.group(\"dx\")),Integer.parseInt(matcher.group(\"dy\"))));\r\n            }\r\n            else if(GameMenuCommands.Recipe.matches(command)) {\r\n                Matcher matcher = GameMenuCommands.Recipe.matcher(command);\r\n                matcher.matches();\r\n                System.out.println(GameMenuController.ShowRecipe());\r\n            }\r\n            else if(GameMenuCommands.Crafting.matches(command)) {\r\n                Matcher matcher = GameMenuCommands.Crafting.matcher(command);\r\n                matcher.matches();\r\n                System.out.println(GameMenuController.crafting(matcher.group(\"itemName\")));\r\n            }\r\n            else if(CheatCodeCommands.ADD_ITEM.matches(command)) {\r\n                Matcher matcher = CheatCodeCommands.ADD_ITEM.matcher(command);\r\n                matcher.matches();\r\n                Result result = CheatCodeController.cheatAddItem(matcher.group(\"itemName\"),matcher.group(\"count\"));\r\n                System.out.println(result.message());\r\n            }\r\n            else if (GameMenuCommands.PlaceItem.matches(command)) {\r\n                Matcher matcher = GameMenuCommands.PlaceItem.matcher(command);\r\n                matcher.matches();\r\n                System.out.println(GameMenuController.PlaceItem(matcher.group(\"itemName\"),matcher.group(\"direction\")));\r\n            }\r\n            else if(GameMenuCommands.ARTISAN_USE.matches(command)) {\r\n                Matcher matcher = GameMenuCommands.ARTISAN_USE.matcher(command);\r\n                matcher.matches();\r\n                System.out.println(GameMenuController.UseArtisan(matcher.group(\"artisanName\"),matcher.group(\"itemName\")));\r\n            }\r\n            else if (GameMenuCommands.GET_ARTISAN.matches(command)) {\r\n                Matcher matcher = GameMenuCommands.GET_ARTISAN.matcher(command);\r\n                matcher.matches();\r\n                System.out.println(GameMenuController.GetArtisan(matcher.group(\"artisanName\")));\r\n            }\r\n            else {\r\n                System.out.println(\"invalid command\");\r\n            }\r\n        }\r\n        else if(GameMenuCommands.PLANT_MIXED_SEED.matches(command)) {\r\n            Matcher matcher = GameMenuCommands.PLANT_MIXED_SEED.matcher(command);\r\n            matcher.matches();\r\n\r\n            System.out.println(GameMenuController.plantMixedSeed(\r\n                    Integer.parseInt(matcher.group(\"dx\")),Integer.parseInt(matcher.group(\"dy\"))));\r\n        }\r\n        else if(GameMenuCommands.HARVEST.matches(command)) {\r\n            Matcher matcher = GameMenuCommands.HARVEST.matcher(command);\r\n            matcher.matches();\r\n            // TODO : check using tools for harvesting\r\n            System.out.println();\r\n        }\r\n        else {\r\n            System.out.println(\"You are locked! (maximum energy per turn consumed). Use \\\"next turn\\\" command to continue.\");\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/views/GameMenu.java b/src/main/java/views/GameMenu.java
--- a/src/main/java/views/GameMenu.java	(revision f11b632d115d8f590fb3410b5d9a8f98a0faaac2)
+++ b/src/main/java/views/GameMenu.java	(date 1746870302821)
@@ -351,6 +351,26 @@
                 System.out.println(GameMenuController.plant(matcher.group("seed"),
                         Integer.parseInt(matcher.group("dx")),Integer.parseInt(matcher.group("dy"))));
             }
+            else if(GameMenuCommands.PLANT_MIXED_SEED.matches(command)) {
+                Matcher matcher = GameMenuCommands.PLANT_MIXED_SEED.matcher(command);
+                matcher.matches();
+
+                System.out.println(GameMenuController.plantMixedSeed(
+                        Integer.parseInt(matcher.group("dx")),Integer.parseInt(matcher.group("dy"))));
+            }
+            else if(GameMenuCommands.HARVEST.matches(command)) {
+                Matcher matcher = GameMenuCommands.HARVEST.matcher(command);
+                matcher.matches();
+                // TODO : check using tools for harvesting
+                System.out.println();
+            }
+            else if(GameMenuCommands.SHOW_PLANT.matches(command)){
+                Matcher matcher = GameMenuCommands.SHOW_PLANT.matcher(command);
+                matcher.matches();
+                System.out.println(GameMenuController.showPlant(
+                        Integer.parseInt(matcher.group("x")),Integer.parseInt(matcher.group("y"))));
+            }
+
             else if(GameMenuCommands.Recipe.matches(command)) {
                 Matcher matcher = GameMenuCommands.Recipe.matcher(command);
                 matcher.matches();
@@ -382,23 +402,11 @@
                 matcher.matches();
                 System.out.println(GameMenuController.GetArtisan(matcher.group("artisanName")));
             }
+
             else {
                 System.out.println("invalid command");
             }
         }
-        else if(GameMenuCommands.PLANT_MIXED_SEED.matches(command)) {
-            Matcher matcher = GameMenuCommands.PLANT_MIXED_SEED.matcher(command);
-            matcher.matches();
-
-            System.out.println(GameMenuController.plantMixedSeed(
-                    Integer.parseInt(matcher.group("dx")),Integer.parseInt(matcher.group("dy"))));
-        }
-        else if(GameMenuCommands.HARVEST.matches(command)) {
-            Matcher matcher = GameMenuCommands.HARVEST.matcher(command);
-            matcher.matches();
-            // TODO : check using tools for harvesting
-            System.out.println();
-        }
         else {
             System.out.println("You are locked! (maximum energy per turn consumed). Use \"next turn\" command to continue.");
         }
Index: src/main/java/models/npcs/NPC.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package models.npcs;\r\n\r\nimport models.Player;\r\nimport models.relation.NPCFriendShip;\r\nimport models.tools.BackPackable;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.HashMap;\r\n\r\npublic class NPC {\r\n    protected String name;\r\n    protected String job;\r\n\r\n    protected ArrayList<String> dialogues = new ArrayList<>();\r\n\r\n    protected ArrayList<BackPackable> favourites = new ArrayList<>();\r\n\r\n    protected ArrayList<Boolean> questsAvailability = new ArrayList<>();\r\n    protected HashMap<BackPackable, Integer> quests = new HashMap<>();\r\n    protected HashMap<BackPackable, Integer> rewards = new HashMap<>();\r\n\r\n    protected HashMap<Player, NPCFriendShip> friendships = new HashMap<>();\r\n\r\n    public void meet(String message) {\r\n\r\n    }\r\n    public void gift(BackPackable item) {\r\n\r\n    }\r\n\r\n    public void showQuests() {\r\n\r\n    }\r\n    public void finishQuest(BackPackable item) {\r\n\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/models/npcs/NPC.java b/src/main/java/models/npcs/NPC.java
--- a/src/main/java/models/npcs/NPC.java	(revision f11b632d115d8f590fb3410b5d9a8f98a0faaac2)
+++ b/src/main/java/models/npcs/NPC.java	(date 1746811997842)
@@ -1,6 +1,7 @@
 package models.npcs;
 
 import models.Player;
+import models.map.Tile;
 import models.relation.NPCFriendShip;
 import models.tools.BackPackable;
 
@@ -11,6 +12,16 @@
     protected String name;
     protected String job;
 
+    private Tile homeLocation;
+
+    protected HashMap<Player, NPCFriendShip> friendships = new HashMap<>();
+
+    int friendshipPoints;
+    int friendshipLevel;
+    static final int MAX_FRIENDSHIP_POINTS = 799;
+
+
+
     protected ArrayList<String> dialogues = new ArrayList<>();
 
     protected ArrayList<BackPackable> favourites = new ArrayList<>();
@@ -19,13 +30,18 @@
     protected HashMap<BackPackable, Integer> quests = new HashMap<>();
     protected HashMap<BackPackable, Integer> rewards = new HashMap<>();
 
-    protected HashMap<Player, NPCFriendShip> friendships = new HashMap<>();
-
-    public void meet(String message) {
+    public NPC(String name, String job, Tile homeLocation) {
+        this.name = name;
+        this.job = job;
+        this.homeLocation = homeLocation;
+    }
 
+    public void meet(Player player) {
+        NPCFriendShip friendShipWithPlayer = friendships.computeIfAbsent(player, k -> new NPCFriendShip());
+        // should be completed
     }
-    public void gift(BackPackable item) {
-
+    public void gift(Player player,BackPackable item) {
+        NPCFriendShip friendShipWithPlayer = friendships.computeIfAbsent(player, k -> new NPCFriendShip());
     }
 
     public void showQuests() {
Index: src/main/java/models/Result.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package models;\r\n\r\npublic record Result(boolean success, String message) {\r\n    public Result(boolean success, String message) {\r\n        this.success = success;\r\n        this.message = message;\r\n    }\r\n    public boolean isSuccessFull() {\r\n        return success;\r\n    }\r\n\r\n    public String getMessage() {\r\n        return message;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/models/Result.java b/src/main/java/models/Result.java
--- a/src/main/java/models/Result.java	(revision f11b632d115d8f590fb3410b5d9a8f98a0faaac2)
+++ b/src/main/java/models/Result.java	(date 1746870302815)
@@ -12,4 +12,9 @@
     public String getMessage() {
         return message;
     }
+
+    @Override
+    public String toString() {
+        return getMessage();
+    }
 }
Index: src/main/java/models/relation/NPCFriendShip.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package models.relation;\r\n\r\npublic class NPCFriendShip {\r\n    private int xp;\r\n    private int level;\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/models/relation/NPCFriendShip.java b/src/main/java/models/relation/NPCFriendShip.java
--- a/src/main/java/models/relation/NPCFriendShip.java	(revision f11b632d115d8f590fb3410b5d9a8f98a0faaac2)
+++ b/src/main/java/models/relation/NPCFriendShip.java	(date 1746811908190)
@@ -1,6 +1,25 @@
 package models.relation;
 
 public class NPCFriendShip {
-    private int xp;
-    private int level;
+    private int xp = 0;
+    private int level = 0;
+
+    public NPCFriendShip() {
+    }
+
+    public void setXp(int xp) {
+        this.xp = xp;
+    }
+
+    public void setLevel(int level) {
+        this.level = level;
+    }
+
+    public int getXp() {
+        return xp;
+    }
+
+    public int getLevel() {
+        return level;
+    }
 }
Index: src/main/java/models/time/DateAndTime.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package models.time;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\npublic class DateAndTime {\r\n    private final List<TimeObserver> observers = new ArrayList<>();\r\n\r\n    public void addObserver(TimeObserver observer) {\r\n        observers.add(observer);\r\n    }\r\n    public void removeObserver(TimeObserver observer) {\r\n        observers.remove(observer);\r\n    }\r\n    private void notifyObservers() {\r\n        for (TimeObserver observer : observers) {\r\n            observer.update(this);\r\n        }\r\n    }\r\n\r\n    private int year = 0;\r\n    private Season season = Season.SPRING;\r\n    private DaysOfWeek dayOfWeek = DaysOfWeek.MONDAY;\r\n    private int day = 1;\r\n    private int hour = 9;\r\n\r\n    public void nextYear(){\r\n        year++;\r\n    }\r\n\r\n    public void nextSeason() {\r\n        if(season == Season.SUMMER) {\r\n            season = Season.AUTUMN;\r\n        } else if(season == Season.AUTUMN) {\r\n            season = Season.WINTER;\r\n        } else if(season == Season.WINTER) {\r\n            season = Season.SPRING;\r\n            nextYear();\r\n        } else if(season == Season.SPRING) {\r\n            season = Season.SUMMER;\r\n        }\r\n    }\r\n\r\n    public void nextDayOfWeek() {\r\n        if (dayOfWeek == DaysOfWeek.MONDAY) {\r\n            dayOfWeek = DaysOfWeek.TUESDAY;\r\n        } else if (dayOfWeek == DaysOfWeek.TUESDAY) {\r\n            dayOfWeek = DaysOfWeek.WEDNESDAY;\r\n        } else if (dayOfWeek == DaysOfWeek.WEDNESDAY) {\r\n            dayOfWeek = DaysOfWeek.THURSDAY;\r\n        } else if (dayOfWeek == DaysOfWeek.THURSDAY) {\r\n            dayOfWeek = DaysOfWeek.FRIDAY;\r\n        } else if (dayOfWeek == DaysOfWeek.FRIDAY) {\r\n            dayOfWeek = DaysOfWeek.SATURDAY;\r\n        } else if (dayOfWeek == DaysOfWeek.SATURDAY) {\r\n            dayOfWeek = DaysOfWeek.SUNDAY;\r\n        } else if (dayOfWeek == DaysOfWeek.SUNDAY) {\r\n            dayOfWeek = DaysOfWeek.MONDAY;\r\n        }\r\n    }\r\n\r\n    public void nextDay() {\r\n        if(day == 28) {\r\n            day = 1;\r\n            nextSeason();\r\n        }\r\n        else {\r\n            this.day++;\r\n        }\r\n\r\n        this.hour = 9;\r\n        nextDayOfWeek();\r\n        notifyObservers();\r\n    }\r\n    public void nextNDays(int n) {\r\n        for(int i = 0; i < n; i++) {\r\n            nextDay();\r\n        }\r\n    }\r\n\r\n    public void nextHour(){\r\n        if(hour == 23) {\r\n            hour = 9;\r\n            nextDay();\r\n        }\r\n        else {\r\n            this.hour++;\r\n        }\r\n        notifyObservers();\r\n    }\r\n    public void nextNHours(int n){\r\n        for(int i = 0; i < n; i++) {\r\n            nextHour();\r\n        }\r\n    }\r\n\r\n    public int getYear() {\r\n        return year;\r\n    }\r\n    public String displayYear() {\r\n        return \"year: \" + year;\r\n    }\r\n\r\n    public Season getSeason() {\r\n        return season;\r\n    }\r\n    public String displaySeason() {\r\n        return \"season: \" + season.displaySeason();\r\n    }\r\n\r\n    public int getDay() {\r\n        return day;\r\n    }\r\n    public String displayDay() {\r\n        return \"day: \" + day;\r\n    }\r\n    public String displayDayOfWeek() {\r\n        return dayOfWeek.displayDayOfWeek();\r\n    }\r\n\r\n    public int getHour() {\r\n        return hour;\r\n    }\r\n    public String displayHour() {\r\n        return hour + \":00\";\r\n    }\r\n\r\n    public String displayDate() {\r\n        return displayDay() + \" \" + displaySeason() + \" \" + displayYear();\r\n    }\r\n    public String displayDateTime() {\r\n        return displayHour() + \" \" + displayDate();\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/models/time/DateAndTime.java b/src/main/java/models/time/DateAndTime.java
--- a/src/main/java/models/time/DateAndTime.java	(revision f11b632d115d8f590fb3410b5d9a8f98a0faaac2)
+++ b/src/main/java/models/time/DateAndTime.java	(date 1746868614795)
@@ -4,6 +4,7 @@
 import java.util.List;
 
 public class DateAndTime {
+
     private final List<TimeObserver> observers = new ArrayList<>();
 
     public void addObserver(TimeObserver observer) {
@@ -24,6 +25,7 @@
     private int day = 1;
     private int hour = 9;
 
+
     public void nextYear(){
         year++;
     }
@@ -131,4 +133,6 @@
     public String displayDateTime() {
         return displayHour() + " " + displayDate();
     }
+
+
 }
Index: src/main/java/models/enums/commands/GameMenuCommands.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package models.enums.commands;\r\n\r\n    public enum GameMenuCommands implements Commands {\r\n        EXIT_GAME_REGEX(\"^\\\\s*exit\\\\s+game\\\\s*$\"),\r\n        TERMINATE_GAME_REGEX(\"^\\\\s*terminate\\\\s+game\\\\s*$\"),\r\n        NEXT_TURN_REGEX(\"^\\\\s*next\\\\s+turn\\\\s*$\"),\r\n        DAY_OF_WEEK_REGEX(\"^\\\\s*day\\\\s+of\\\\s+the\\\\s+week\\\\s*$\"),\r\n        WEATHER_FORECAST_REGEX(\"^\\\\s*weather\\\\s+forecast\\\\s*$\"),\r\n        PRINT_MAP_REGEX(\"^\\\\s*print\\\\s+map\\\\s*$\"),\r\n        MAP_GUIDE_REGEX(\"^\\\\s*help\\\\s+reading\\\\s+map\\\\s*$\"),\r\n        SHOW_ENERGY_REGEX(\"^\\\\s*energy\\\\s+show\\\\s*$\"),\r\n        WALK_REGEX(\"^\\\\s*walk\\\\s+-l\\\\s+(?<x>\\\\d+)\\\\s+(?<y>\\\\d+)\\\\s*$\"),\r\n        INVENTORY_SHOW_REGEX(\"^\\\\s*inventory\\\\s+show\\\\s*$\"),\r\n        INVENTORY_TRASH_REGEX(\"^\\\\s*inventory\\\\s+trash\\\\s+-i\\\\s+(?<itemName>.+?)(\\\\s+-n\\\\s+(?<count>\\\\d+))?\\\\s*$\"),\r\n        EQUIP_TOOL_REGEX(\"^\\\\s*tools\\\\s+equip\\\\s+(?<toolName>.+?)\\\\s*$\"),\r\n        SHOW_CURRENT_TOOL_REGEX(\"^\\\\s*tools\\\\s+show\\\\s+current\\\\s*$\"),\r\n        SHOW_ALL_TOOLS_REGEX(\"^\\\\s*tools\\\\s+show\\\\s+available\\\\s*$\"),\r\n        TOOL_UPGRADE_REGEX(\"^\\\\s*tools\\\\s+upgrade\\\\s+(?<toolName>.+?)\\\\s*$\"),\r\n        TOOL_USE_REGEX(\"^\\\\s*tools\\\\s+use\\\\s+-d\\\\s+(?<dx>-1|0|1)\\\\s+(?<dy>-1|0|1)\\\\s*$\"),\r\n        FRIDGE_REGEX(\"^\\\\s*cooking\\\\s+refrigerator\\\\s+(?<action>put|pick)\\\\s+(?<itemName>.+?)\\\\s*$\"),\r\n        SHOW_COOKING_RECIPES_REGEX(\"^\\\\s*cooking\\\\s+show\\\\s+recipes\\\\s*$\"),\r\n        PREPARE_FOOD_REGEX(\"^\\\\s*cooking\\\\s+prepare\\\\s+(?<foodName>.+?)\\\\s*$\"),\r\n        EAT_FOOD_REGEX(\"^\\\\s*eat\\\\s+(?<foodName>.+?)\\\\s*$\"),\r\n        BUILD_BUILDING_REGEX(\"^\\\\s*build\\\\s+-a\\\\s+(?<buildingName>barn|coop)\\\\s+-l\\\\s+(?<x>\\\\d+)\\\\s+(?<y>\\\\d+)\\\\s*$\"),\r\n        BUY_ANIMAL_REGEX(\"^\\\\s*buy\\\\s+animal\\\\s+-a\\\\s+(?<animal>\\\\S+)\\\\s+-n\\\\s+(?<name>.+?)\\\\s*$\"),\r\n        PET_ANIMAL_REGEX(\"^\\\\s*pet\\\\s+-n\\\\s+(?<name>.+?)\\\\s*$\"),\r\n        SHEPHERD_ANIMAL_REGEX(\"^\\\\s*shepherd\\\\s+animals\\\\s+-n\\\\s+(?<name>.+?)\\\\s+-l\\\\s+(?<x>\\\\d+)\\\\s+(?<y>\\\\d+)\\\\s*$\"),\r\n        FEED_ANIMAL_REGEX(\"^\\\\s*feed\\\\s+hay\\\\s+-n\\\\s+(?<name>.+?)\\\\s*$\"),\r\n        COLLECT_PRODUCE_REGEX(\"^\\\\s*collect\\\\s+produce\\\\s+-n\\\\s+(?<name>.+?)\\\\s*$\"),\r\n        SELL_ANIMAL_REGEX(\"^\\\\s*sell\\\\s+animal\\\\s+-n\\\\s+(?<name>.+?)\\\\s*$\"),\r\n        FISHING_REGEX(\"^\\\\s*fishing\\\\s+-p\\\\s+(?<fishingPole>\\\\S+)\\\\s*$\"),\r\n        SHOW_STORE_PRODUCTS_REGEX(\"^\\\\s*show\\\\s+all\\\\s+products\\\\s*$\"),\r\n        PLANT_SEED(\"^\\\\s*plant\\\\s+-s\\\\s+(?<seed>.+\\\\S)\\\\s+-d\\\\s+(?<dx>-1|0|1)\\\\s+(?<dy>-1|0|1)\\\\s*$\"),\r\n        CROP_INFO(\"^\\\\s*craft\\\\s+info\\\\s+-n\\\\s+(?<craftName>\\\\S+)\\\\s*$\"),\r\n        Recipe(\"^\\\\s*crafting\\\\s+show\\\\s+recipes\\\\s*^\"),\r\n        Crafting(\"^\\\\s*crafting\\\\s+craft\\\\s+(?<itemName>\\\\S+)\\\\s*$\"),\r\n        ARTISAN_USE(\"\\\\s*artisan\\\\s+use\\\\s+(?<artisanName>.*)\\\\s+(?<itemName>.*)\\\\s*\"),\r\n        GET_ARTISAN(\"\\\\s*artisan\\\\s+get\\\\s+(?<artisanName>.*)\\\\s*\"),\r\n        PLANT_MIXED_SEED(\"\\\\s*plant\\\\s+mixed\\\\s+seed\\\\s+-d\\\\s+(?<dx>-1|0|1)\\\\s+(?<dy>-1|0|1)\\\\s*\"),\r\n        HARVEST(\"\\\\s*harvest\\\\s+-d\\\\s+(?<dx>-1|0|1)\\\\s+(?<dy>-1|0|1)\\\\s*\"),\r\n        PlaceItem(\"\\\\s*place\\\\s+item\\\\s+-n\\\\s+(?<itemName>.*)\\\\s+-d\\\\s+(?<direction>.*)\\n\");\r\n        private final String regex;\r\n\r\n        GameMenuCommands(String regex) {\r\n            this.regex = regex;\r\n        }\r\n\r\n        @Override\r\n        public String getRegex() {\r\n            return regex;\r\n        }\r\n    }\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/models/enums/commands/GameMenuCommands.java b/src/main/java/models/enums/commands/GameMenuCommands.java
--- a/src/main/java/models/enums/commands/GameMenuCommands.java	(revision f11b632d115d8f590fb3410b5d9a8f98a0faaac2)
+++ b/src/main/java/models/enums/commands/GameMenuCommands.java	(date 1746869406953)
@@ -38,6 +38,7 @@
         GET_ARTISAN("\\s*artisan\\s+get\\s+(?<artisanName>.*)\\s*"),
         PLANT_MIXED_SEED("\\s*plant\\s+mixed\\s+seed\\s+-d\\s+(?<dx>-1|0|1)\\s+(?<dy>-1|0|1)\\s*"),
         HARVEST("\\s*harvest\\s+-d\\s+(?<dx>-1|0|1)\\s+(?<dy>-1|0|1)\\s*"),
+        SHOW_PLANT("^\\s*showplant\\s+-l\\s+(?<x>\\d+)\\s+(?<y>\\d+)\\s*$"),
         PlaceItem("\\s*place\\s+item\\s+-n\\s+(?<itemName>.*)\\s+-d\\s+(?<direction>.*)\n");
         private final String regex;
 
Index: src/main/java/models/farming/GeneralPlants/PloughedState.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package models.farming.GeneralPlants;\r\n\r\nimport models.Result;\r\nimport models.farming.*;\r\n\r\npublic class PloughedState implements PlantState {\r\n\r\n    PloughedPlace tile;\r\n\r\n    public PloughedState(PloughedPlace tile) {\r\n        this.tile = tile;\r\n    }\r\n\r\n\r\n\r\n\r\n    @Override\r\n    public Result updateByTime() {\r\n        return null;\r\n    }\r\n\r\n    @Override\r\n    public Result seed(Seedable seed) {\r\n        if(seed instanceof CropSeeds cropSeed) {\r\n            tile.setCropSeed(cropSeed);\r\n            try{tile.setHarvestable(new Crop(CropSeeds.cropOfThisSeed(cropSeed)));}\r\n            catch(Exception e){\r\n                return new Result(false,\"bug in getting crop of this seed\");\r\n            }\r\n        }\r\n        else if(seed instanceof SeedType treeSeed) {\r\n            tile.setSeed(treeSeed);\r\n            try{tile.setHarvestable(new Tree(SeedType.getTreeOfSeedType(treeSeed)));}\r\n            catch(Exception e){\r\n                return new Result(false,\"bug in getting tree of this seed\");\r\n            }\r\n        }\r\n        tile.setState(new SeededState(tile));\r\n        return new Result(true,\"congratulations! you seeded this tile!\");\r\n    }\r\n\r\n    @Override\r\n    public Result fertilize(Fertilizer fertilizer) {\r\n        if(fertilizer.equals(Fertilizer.Water)){\r\n            tile.setFertilizer(Fertilizer.Water);\r\n            return new Result(true,\"successfully fertilized waterFertilizer!\");\r\n        }\r\n        else if(fertilizer.equals(Fertilizer.Growth)){\r\n            tile.setFertilizer(Fertilizer.Growth);\r\n            return new Result(true,\"successfully fertilized growthFertilizer!\");\r\n        }\r\n        else return new Result(false,\"invalid fertilizer\");\r\n    }\r\n\r\n    @Override\r\n    public Result water() {\r\n        return new Result(false,\"you should seed this tile first\");\r\n    }\r\n\r\n    @Override\r\n    public Result harvest() {\r\n        return new Result(false,\"you should seed this tile first\");\r\n    }\r\n\r\n    @Override\r\n    public Result takeRest() {\r\n        return null;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/models/farming/GeneralPlants/PloughedState.java b/src/main/java/models/farming/GeneralPlants/PloughedState.java
--- a/src/main/java/models/farming/GeneralPlants/PloughedState.java	(revision f11b632d115d8f590fb3410b5d9a8f98a0faaac2)
+++ b/src/main/java/models/farming/GeneralPlants/PloughedState.java	(date 1746867378374)
@@ -11,8 +11,9 @@
         this.tile = tile;
     }
 
-
-
+    public String getState() {
+        return "Ploughed";
+    }
 
     @Override
     public Result updateByTime() {
