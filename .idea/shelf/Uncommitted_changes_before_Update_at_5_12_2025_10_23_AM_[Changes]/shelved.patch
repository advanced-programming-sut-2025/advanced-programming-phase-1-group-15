Index: src/main/java/models/Player.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package models;\r\n\r\nimport models.animals.Animal;\r\nimport models.artisanry.ArtisanItem;\r\nimport models.cooking.Food;\r\nimport models.cooking.FoodType;\r\nimport models.crafting.CraftItem;\r\nimport models.foraging.ForagingSeeds;\r\nimport models.foraging.ForagingSeedsType;\r\nimport models.map.AreaType;\r\nimport models.map.Farm;\r\nimport models.map.Tile;\r\nimport models.relation.PlayerFriendShip;\r\nimport models.map.Position;\r\nimport models.relation.Trade;\r\nimport models.relation.TradeWhitMoney;\r\nimport models.relation.TradeWithItem;\r\nimport models.time.DateAndTime;\r\nimport models.time.TimeObserver;\r\nimport models.tools.*;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.Arrays;\r\nimport java.util.HashMap;\r\n\r\npublic class Player extends User implements TimeObserver {\r\n    private Position homePosition;\r\n    private Position position;\r\n    private Farm farm;\r\n    private int CurrentId;\r\n    private int mapNumber;\r\n\r\n    private int gold = 500;\r\n    private int energy = 200;\r\n    private int energyConsumed = 0;\r\n    private boolean unlimitedEnergy = false;\r\n    private boolean fainted = false;\r\n\r\n    private BackPack inventory = new BackPack();\r\n    private TrashCan trashCan = new TrashCan();\r\n    private Tool currentTool = null;\r\n\r\n    private int farmingAbility = 0;\r\n    private int farmingLevel = 0;\r\n    private int miningAbility = 0;\r\n    private int miningLevel = 0;\r\n    private int foragingAbility = 0;\r\n    private int foragingLevel = 0;\r\n    private int fishingAbility = 0;\r\n    private int fishingLevel = 0;\r\n\r\n    private DateAndTime lastUpdate = new DateAndTime();\r\n\r\n    public void setGame(Game game) {\r\n        this.game = game;\r\n    }\r\n\r\n    public Game getGame() {\r\n        return game;\r\n    }\r\n\r\n    private Game game;\r\n\r\n    private ArrayList<CraftItem> availableCrafts = new ArrayList<>();\r\n\r\n    private ArrayList<Food> availableFoods = new ArrayList<>(Arrays.asList(new Food(FoodType.FRIED_EGG),\r\n            new Food(FoodType.BACKED_FISH), new Food(FoodType.SALAD)));\r\n    private ArrayList<TradeWhitMoney> tradesWhitMoney = new ArrayList<>();\r\n    private ArrayList<TradeWithItem> tradesWithItem = new ArrayList<>();\r\n    private ArrayList<TradeWithItem> tradesWithItemHistory = new ArrayList<>();\r\n    private ArrayList<TradeWhitMoney> tradesWithMoneyHistory = new ArrayList<>();\r\n    private ArrayList<Animal> animals = new ArrayList<>();\r\n    private ArrayList<ArtisanItem> artisanItems = new ArrayList<>();\r\n    private HashMap<Player,PlayerFriendShip> friendships = new HashMap<>();\r\n    private Player couple;\r\n\r\n    public int getCurrentId() {\r\n        return CurrentId;\r\n    }\r\n\r\n    public void setCurrentId(int currentId) {\r\n        CurrentId = currentId;\r\n    }\r\n\r\n    public Player(User user) {\r\n        super(user.getUsername(), user.getPassword(), user.getNickname(), user.getEmail(), user.getGender());\r\n    }\r\n\r\n    public ArrayList<ArtisanItem> getArtisanItems() {\r\n        return artisanItems;\r\n    }\r\n\r\n    public Position getPosition() {\r\n        return position;\r\n    }\r\n    public void setPosition(Position position) {\r\n        this.position = position;\r\n    }\r\n\r\n    public void setHome(Position homePosition) {\r\n        this.homePosition = homePosition;\r\n        this.position = this.homePosition;\r\n    }\r\n    public void goHome() {\r\n        this.position = homePosition;\r\n    }\r\n\r\n    public int calculateWalkingEnergy(Position nextPosition) {\r\n        int tilesNeeded = game.getMap().findShortestPath(this, position, nextPosition);\r\n        if(tilesNeeded == -1) return -1;\r\n        return tilesNeeded / 5 + 1;\r\n    }\r\n    public void walk(Position position) {\r\n        int energyNeeded = calculateWalkingEnergy(position);\r\n\r\n        if(energyNeeded > energy) {\r\n            faint();\r\n        }\r\n        else {\r\n            subtractEnergy(energyNeeded);\r\n            setPosition(position);\r\n        }\r\n    }\r\n\r\n    public Farm getFarm() {\r\n        return farm;\r\n    }\r\n    public void setFarm(Farm farm) {\r\n        this.farm = farm;\r\n    }\r\n\r\n    public int getMapNumber() {\r\n        return mapNumber;\r\n    }\r\n    public void setMapNumber(int mapNumber) {\r\n        this.mapNumber = mapNumber;\r\n    }\r\n\r\n    public int getGold() {\r\n        return gold;\r\n    }\r\n    public void addGold(int gold) {\r\n        this.gold += gold;\r\n    }\r\n    public void subtractGold(int gold) {\r\n        this.gold -= gold;\r\n    }\r\n\r\n    public int getEnergy() {\r\n        return energy;\r\n    }\r\n    public void setEnergy(int energy) {\r\n        this.energy = energy;\r\n    }\r\n    public void subtractEnergy(int amount) {\r\n        if(!unlimitedEnergy) {\r\n            energyConsumed += amount;\r\n            energy -= amount;\r\n        }\r\n    }\r\n    public void addEnergy(int amount) {\r\n        energy = Math.min(200, energy + amount);\r\n    }\r\n\r\n    public boolean isLocked() {\r\n        return !unlimitedEnergy && energyConsumed >= 50;\r\n    }\r\n    public void unlock() {\r\n        if(isLocked()) {\r\n            energyConsumed = 0;\r\n        }\r\n    }\r\n\r\n    public void unlimitedEnergy() {\r\n        unlimitedEnergy = true;\r\n        energy = Integer.MAX_VALUE;\r\n    }\r\n\r\n    public boolean isFainted() {\r\n        return fainted;\r\n    }\r\n    public void faint() {\r\n        energy = 0;\r\n        fainted = true;\r\n    }\r\n\r\n    public BackPack getInventory() {\r\n        return inventory;\r\n    }\r\n    public void addToBackPack(BackPackable bp, int count) {\r\n        if(!inventory.checkFilled()) {\r\n            inventory.addToBackPack(bp, count);\r\n        }\r\n    }\r\n\r\n    public TrashCan getTrashCan() {\r\n        return trashCan;\r\n    }\r\n\r\n    public Tool getCurrentTool() {\r\n        return currentTool;\r\n    }\r\n    public void setCurrentTool(Tool currentTool) {\r\n        this.currentTool = currentTool;\r\n    }\r\n\r\n    public int getFarmingAbility() {\r\n        return farmingAbility;\r\n    }\r\n    public int getFarmingLevel() {\r\n        return farmingLevel;\r\n    }\r\n    public void upgradeFarmingAbility(int amount) {\r\n        this.farmingAbility += amount;\r\n        if(farmingAbility > 100 * farmingLevel + 50 && farmingLevel != 4) {\r\n            farmingLevel++;\r\n        }\r\n    }\r\n\r\n    public int getMiningAbility() {\r\n        return miningAbility;\r\n    }\r\n    public int getMiningLevel() {\r\n        return miningLevel;\r\n    }\r\n    public void upgradeMiningAbility(int amount) {\r\n        this.miningAbility += amount;\r\n        if(miningAbility > 100 * miningLevel + 50 && miningLevel != 4) {\r\n            miningLevel++;\r\n        }\r\n    }\r\n\r\n    public int getForagingAbility() {\r\n        return foragingAbility;\r\n    }\r\n    public int getForagingLevel() {\r\n        return foragingLevel;\r\n    }\r\n    public void upgradeForagingAbility(int amount) {\r\n        this.foragingAbility += amount;\r\n        if(foragingAbility > 100 * foragingLevel + 50 && foragingLevel != 4) {\r\n            foragingLevel++;\r\n        }\r\n    }\r\n\r\n    public int getFishingAbility() {\r\n        return fishingAbility;\r\n    }\r\n    public int getFishingLevel() {\r\n        return fishingLevel;\r\n    }\r\n    public void upgradeFishingAbility(int amount) {\r\n        this.fishingAbility += amount;\r\n        if(fishingAbility > 100 * fishingLevel + 50 && fishingLevel != 4) {\r\n            fishingLevel++;\r\n        }\r\n    }\r\n\r\n    public ArrayList<CraftItem> getAvailableCrafts() {\r\n        return availableCrafts;\r\n    }\r\n\r\n    public ArrayList<Food> getAvailableFoods() {\r\n        return availableFoods;\r\n    }\r\n\r\n    public Animal getAnimalByName(String name) {\r\n        for(Animal animal : animals) {\r\n            if(animal.getName().equals(name)) {\r\n                return animal;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n    public ArrayList<Animal> getAnimals() {\r\n        return animals;\r\n    }\r\n\r\n    public ArrayList<TradeWhitMoney> getTradesWhitMoney() {\r\n        return tradesWhitMoney;\r\n    }\r\n\r\n    public ArrayList<TradeWithItem> getTradesWithItem() {\r\n        return tradesWithItem;\r\n    }\r\n\r\n    public ArrayList<TradeWithItem> getTradesWithItemHistory() {\r\n        return tradesWithItemHistory;\r\n    }\r\n\r\n    public ArrayList<TradeWhitMoney> getTradesWithMoneyHistory() {\r\n        return tradesWithMoneyHistory;\r\n    }\r\n\r\n    public void setGold(int gold) {\r\n        this.gold = gold;\r\n    }\r\n\r\n    public Player getCouple() {\r\n        return couple;\r\n    }\r\n    public void marry(Player couple) {\r\n        this.couple = couple;\r\n    }\r\n\r\n    public void eat(Food food) {\r\n        addEnergy(food.getEnergy());\r\n    }\r\n\r\n    public void showAvailableCrafts() {\r\n\r\n    }\r\n    public String showAvailableFoods() {\r\n        StringBuilder display = new StringBuilder();\r\n        for(Food food : availableFoods) {\r\n            display.append(food.getName()).append(\"    \");\r\n            display.append(food.getRecipe()).append(\"\\n\");\r\n        }\r\n\r\n        return display.toString();\r\n    }\r\n    public String showAnimals() {\r\n        StringBuilder display = new StringBuilder();\r\n        for(Animal animal: animals) {\r\n            display.append(animal.getName()).append(\"    \");\r\n            display.append(animal.getAnimalTypeName()).append(\"    \");\r\n            display.append(\"friendship: \").append(animal.getFriendship()).append(\"  \");\r\n            display.append(\"petted: \").append(animal.isPetted()).append(\"  \");\r\n            display.append(\"fed: \").append(animal.isFed()).append(\"\\n\");\r\n        }\r\n\r\n        return display.toString();\r\n    }\r\n    public void showFriendships() {\r\n\r\n    }\r\n\r\n    public void attackOfCrows(){\r\n        int remainder = RandomGenerator.getInstance().randomInt(0,15);\r\n        for(int i=0;i<farm.getTiles().size();i++) {\r\n            for (int j = 0; j < farm.getTiles().get(i).size(); j++) {\r\n                Tile tile = farm.getTiles().get(i).get(j);\r\n                if(tile.getAreaType() == AreaType.GREENHOUSE) continue;\r\n                if(tile.isPlowed()){\r\n                    // TODO: check if it is in a Green house\r\n                    remainder++;    remainder %= 16;\r\n                    if(remainder == 0){\r\n                        if(RandomGenerator.getInstance().randomInt(0,3) == 1) {\r\n                            tile.unplow();\r\n                            // TODO: check the effect for tree when you implemented tree\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    public void ForagingSeedsAndCrops(){\r\n        for(int i=0;i<farm.getTiles().size();i++){\r\n            for(int j=0;j<farm.getTiles().get(i).size();j++){\r\n                Tile tile = farm.getTiles().get(i).get(j);\r\n                if(tile.isPlowed()||tile.getAreaType() == AreaType.GREENHOUSE){\r\n                    continue;\r\n                }\r\n                if(RandomGenerator.getInstance().randomInt(0,100)==1){\r\n                    ForagingSeedsType.getSeasonForagingSeed(App.currentGame.getDateAndTime().getSeason());\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void update(DateAndTime dateAndTime) {\r\n        if(dateAndTime.getHour() == 9) {\r\n            if(fainted) {\r\n                fainted = false;\r\n                energy = 150;\r\n            }\r\n            else {\r\n                energy = 200;\r\n                goHome();\r\n            }\r\n        }\r\n        if(lastUpdate.getDay() != dateAndTime.getDay()) {\r\n            attackOfCrows();\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/models/Player.java b/src/main/java/models/Player.java
--- a/src/main/java/models/Player.java	(revision cb96ebc7e52e1aedd03e584722967e70fa4ed649)
+++ b/src/main/java/models/Player.java	(date 1746938896753)
@@ -342,7 +342,6 @@
                 Tile tile = farm.getTiles().get(i).get(j);
                 if(tile.getAreaType() == AreaType.GREENHOUSE) continue;
                 if(tile.isPlowed()){
-                    // TODO: check if it is in a Green house
                     remainder++;    remainder %= 16;
                     if(remainder == 0){
                         if(RandomGenerator.getInstance().randomInt(0,3) == 1) {
Index: src/main/java/views/GameMenu.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package views;\r\n\r\nimport controllers.CheatCodeController;\r\nimport controllers.GameMenuController;\r\nimport models.App;\r\nimport models.Game;\r\nimport models.Player;\r\nimport models.Result;\r\nimport models.enums.commands.CheatCodeCommands;\r\nimport models.enums.commands.Commands;\r\nimport models.enums.commands.GameMenuCommands;\r\n\r\nimport javax.print.attribute.standard.PresentationDirection;\r\nimport java.util.Scanner;\r\nimport java.util.regex.Matcher;\r\n\r\npublic class GameMenu implements AppMenu {\r\n    private final Game game;\r\n\r\n    public GameMenu(Game game) {\r\n        this.game = game;\r\n        game.build();\r\n        System.out.println(\"\\\"\" + game.getCurrentPlayer().getUsername() + \"\\\" it's your turn to begin the game.\");\r\n    }\r\n\r\n    public Result terminateMenu(Scanner scanner) {\r\n        for(Player player : game.getPlayers()) {\r\n            System.out.println(player.getUsername() + \", do you agree with total game termination? (+/-)\");\r\n            String command = scanner.nextLine().trim();\r\n\r\n            if(command.equalsIgnoreCase(\"-\")) {\r\n                return new Result(false, \"All players must agree to completely terminate the game.\");\r\n            }\r\n            else if(!command.equalsIgnoreCase(\"+\")) {\r\n                return new Result(false, \"invalid command\");\r\n            }\r\n        }\r\n\r\n        return new Result(true, \"Game terminated successfully.\");\r\n    }\r\n\r\n    public void run(Scanner scanner) {\r\n        Player currentPlayer = game.getCurrentPlayer();\r\n        String command = scanner.nextLine().trim();\r\n\r\n        if(GameMenuCommands.NEXT_TURN_REGEX.matches(command)) {\r\n            game.nextTurn();\r\n            System.out.println(\"\\\"\" + game.getCurrentPlayer().getUsername() + \"\\\" go on!\");\r\n            return;\r\n        }\r\n\r\n        if(!currentPlayer.isLocked()) {\r\n            if(Commands.checkShowCurrentMenuRegex(command)) {\r\n                System.out.println(\"game menu\");\r\n            }\r\n\r\n            else if(GameMenuCommands.EXIT_GAME_REGEX.matches(command)) {\r\n                if(!currentPlayer.equals(game.getMainPlayer())) {\r\n                    System.out.println(\"Only the creator can exit the game.\");\r\n                }\r\n                else {\r\n                    App.currentGame = null;\r\n                    AppView.currentMenu = new MainMenu();\r\n                    System.out.println(\"game exited successfully!\");\r\n                }\r\n            }\r\n\r\n            else if(GameMenuCommands.TERMINATE_GAME_REGEX.matches(command)) {\r\n                Result terminate = terminateMenu(scanner);\r\n                System.out.println(terminate.message());\r\n\r\n                if(terminate.success()) {\r\n                    App.recentGames.remove(game);\r\n                    App.currentGame = null;\r\n                    AppView.currentMenu = new MainMenu();\r\n                }\r\n            }\r\n\r\n            else if(command.equals(\"time\")) {\r\n                System.out.println(game.getDateAndTime().displayHour());\r\n            }\r\n            else if(command.equals(\"date\")) {\r\n                System.out.println(game.getDateAndTime().displayDate());\r\n            }\r\n            else if(command.equals(\"datetime\")) {\r\n                System.out.println(game.getDateAndTime().displayDateTime());\r\n            }\r\n            else if(command.equals(\"season\")) {\r\n                System.out.println(game.getDateAndTime().displaySeason());\r\n            }\r\n            else if(GameMenuCommands.DAY_OF_WEEK_REGEX.matches(command)) {\r\n                System.out.println(game.getDateAndTime().displayDayOfWeek());\r\n            }\r\n            else if(CheatCodeCommands.ADVANCE_TIME_REGEX.matches(command)) {\r\n                Matcher matcher = CheatCodeCommands.ADVANCE_TIME_REGEX.matcher(command);\r\n\r\n                int hours = matcher.matches() ? Integer.parseInt(matcher.group(\"hours\")) : 0;\r\n\r\n                Result result = CheatCodeController.cheatAdvanceTime(hours);\r\n                System.out.println(result.message());\r\n            }\r\n            else if(CheatCodeCommands.ADVANCE_DATE_REGEX.matches(command)) {\r\n                Matcher matcher = CheatCodeCommands.ADVANCE_DATE_REGEX.matcher(command);\r\n\r\n                int days = matcher.matches() ? Integer.parseInt(matcher.group(\"days\")) : 0;\r\n\r\n                Result result = CheatCodeController.cheatAdvanceDate(days);\r\n                System.out.println(result.message());\r\n            }\r\n\r\n            else if(command.equals(\"weather\")) {\r\n                System.out.println(game.getWeather().displayWeather());\r\n            }\r\n            else if(GameMenuCommands.WEATHER_FORECAST_REGEX.matches(command)) {\r\n                System.out.println(game.getWeather().displayForecast());\r\n            }\r\n            else if(CheatCodeCommands.WEATHER_SET_REGEX.matches(command)) {\r\n                Matcher matcher = CheatCodeCommands.WEATHER_SET_REGEX.matcher(command);\r\n\r\n                String weatherType = matcher.matches() ? matcher.group(\"weatherType\") : \"\";\r\n\r\n                Result result = CheatCodeController.cheatSetWeather(weatherType);\r\n                System.out.println(result.message());\r\n            }\r\n\r\n            else if(GameMenuCommands.PRINT_MAP_REGEX.matches(command)) {\r\n                game.getMap().printMap();\r\n            }\r\n            else if(GameMenuCommands.MAP_GUIDE_REGEX.matches(command)) {\r\n                game.getMap().mapGuide();\r\n            }\r\n\r\n            else if(GameMenuCommands.WALK_REGEX.matches(command)) {\r\n                Matcher matcher = GameMenuCommands.WALK_REGEX.matcher(command);\r\n\r\n                int x = matcher.matches() ? Integer.parseInt(matcher.group(\"x\")) : 0;\r\n                int y = Integer.parseInt(matcher.group(\"y\"));\r\n\r\n                Result result = GameMenuController.walk(x, y);\r\n                System.out.println(result.message());\r\n\r\n                if(result.success()) {\r\n                    command = scanner.nextLine().trim();\r\n                    if(command.equalsIgnoreCase(\"y\")) {\r\n                        result = GameMenuController.setPosition(x, y);\r\n                        System.out.println(result.message());\r\n\r\n                        if(!result.success()) {\r\n                            game.nextTurn();\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            else if(GameMenuCommands.SHOW_ENERGY_REGEX.matches(command)) {\r\n                System.out.println(\"energy: \" + game.getCurrentPlayer().getEnergy());\r\n            }\r\n            else if(GameMenuCommands.SHOW_GOLD_REGEX.matches(command)) {\r\n                System.out.println(\"gold: \" + game.getCurrentPlayer().getGold());\r\n            }\r\n            else if(CheatCodeCommands.ENERGY_SET_REGEX.matches(command)) {\r\n                Matcher matcher = CheatCodeCommands.ENERGY_SET_REGEX.matcher(command);\r\n\r\n                int value = matcher.matches() ? Integer.parseInt(matcher.group(\"value\")) : 0;\r\n\r\n                Result result = CheatCodeController.cheatSetEnergy(value);\r\n                System.out.println(result.message());\r\n            }\r\n            else if(CheatCodeCommands.ENERGY_UNLIMITED_REGEX.matches(command)) {\r\n                Result result = CheatCodeController.cheatUnlimitedEnergy();\r\n                System.out.println(result.message());\r\n            }\r\n\r\n            else if(GameMenuCommands.INVENTORY_SHOW_REGEX.matches(command)) {\r\n                System.out.print(game.getCurrentPlayer().getInventory().display());\r\n            }\r\n            else if(GameMenuCommands.INVENTORY_TRASH_REGEX.matches(command)) {\r\n                Matcher matcher = GameMenuCommands.INVENTORY_TRASH_REGEX.matcher(command);\r\n\r\n                String itemName = matcher.matches() ? matcher.group(\"itemName\") : \"\";\r\n                int number = matcher.group(\"count\") != null ? Integer.parseInt(matcher.group(\"count\")) : -1;\r\n\r\n                Result result = GameMenuController.removeFromInventory(itemName, number);\r\n                System.out.println(result.message());\r\n            }\r\n\r\n            else if(GameMenuCommands.EQUIP_TOOL_REGEX.matches(command)) {\r\n                Matcher matcher = GameMenuCommands.EQUIP_TOOL_REGEX.matcher(command);\r\n\r\n                String toolName = matcher.matches() ? matcher.group(\"toolName\") : \"\";\r\n\r\n                Result result = GameMenuController.equipTool(toolName);\r\n                System.out.println(result.message());\r\n            }\r\n            else if(GameMenuCommands.SHOW_CURRENT_TOOL_REGEX.matches(command)) {\r\n                Result result = GameMenuController.showCurrentTool();\r\n                System.out.println(result.message());\r\n            }\r\n            else if(GameMenuCommands.SHOW_ALL_TOOLS_REGEX.matches(command)) {\r\n                System.out.print(game.getCurrentPlayer().getInventory().showTools());\r\n            }\r\n            else if(GameMenuCommands.TOOL_UPGRADE_REGEX.matches(command)) {\r\n                Matcher matcher = GameMenuCommands.TOOL_UPGRADE_REGEX.matcher(command);\r\n\r\n                String toolName = matcher.matches() ? matcher.group(\"toolName\") : \"\";\r\n\r\n                Result result = GameMenuController.upgradeTool(toolName);\r\n                System.out.println(result.message());\r\n            }\r\n            else if(GameMenuCommands.TOOL_USE_REGEX.matches(command)) {\r\n                Matcher matcher = GameMenuCommands.TOOL_USE_REGEX.matcher(command);\r\n\r\n                int dx = matcher.matches() ? Integer.parseInt(matcher.group(\"dx\")) : 0;\r\n                int dy = Integer.parseInt(matcher.group(\"dy\"));\r\n\r\n                Result result = GameMenuController.useTool(dx, dy);\r\n                System.out.println(result.message());\r\n            }\r\n\r\n            else if(GameMenuCommands.FRIDGE_REGEX.matches(command)) {\r\n                Matcher matcher = GameMenuCommands.FRIDGE_REGEX.matcher(command);\r\n\r\n                String action = matcher.matches() ? matcher.group(\"action\") : \"\";\r\n                String itemName = matcher.group(\"itemName\");\r\n\r\n                Result result;\r\n                if(action.equalsIgnoreCase(\"put\")) {\r\n                    result = GameMenuController.putInFridge(itemName);\r\n                }\r\n                else {\r\n                    result = GameMenuController.pickFromFridge(itemName);\r\n                }\r\n\r\n                System.out.println(result.message());\r\n            }\r\n            else if(GameMenuCommands.SHOW_COOKING_RECIPES_REGEX.matches(command)) {\r\n                System.out.print(\"Available cooking recipes: \\n\" + game.getCurrentPlayer().showAvailableFoods());\r\n            }\r\n            else if(GameMenuCommands.EAT_FOOD_REGEX.matches(command)) {\r\n                Matcher matcher = GameMenuCommands.EAT_FOOD_REGEX.matcher(command);\r\n\r\n                String foodName = matcher.matches() ? matcher.group(\"foodName\") : \"\";\r\n\r\n                Result result = GameMenuController.eatFood(foodName);\r\n                System.out.println(result.message());\r\n            }\r\n\r\n            else if(GameMenuCommands.BUILD_BUILDING_REGEX.matches(command)) {\r\n                Matcher matcher = GameMenuCommands.BUILD_BUILDING_REGEX.matcher(command);\r\n\r\n                String buildingName = matcher.matches() ? matcher.group(\"buildingName\") : \"\";\r\n                int x = Integer.parseInt(matcher.group(\"x\"));\r\n                int y = Integer.parseInt(matcher.group(\"y\"));\r\n\r\n                Result result;\r\n                if(buildingName.equals(\"barn\")) {\r\n                    result = GameMenuController.buildBarn(x, y);\r\n                }\r\n                else {\r\n                    result = GameMenuController.buildCoop(x, y);\r\n                }\r\n\r\n                System.out.println(result.message());\r\n            }\r\n            else if(GameMenuCommands.BUY_ANIMAL_REGEX.matches(command)) {\r\n                Matcher matcher = GameMenuCommands.BUY_ANIMAL_REGEX.matcher(command);\r\n\r\n                String animal = matcher.matches() ? matcher.group(\"animal\") : \"\";\r\n                String name = matcher.group(\"name\");\r\n\r\n                Result result = GameMenuController.buyAnimal(animal, name);\r\n                System.out.println(result.message());\r\n            }\r\n            else if(GameMenuCommands.PET_ANIMAL_REGEX.matches(command)) {\r\n                Matcher matcher = GameMenuCommands.PET_ANIMAL_REGEX.matcher(command);\r\n\r\n                String name = matcher.matches() ? matcher.group(\"name\") : \"\";\r\n\r\n                Result result = GameMenuController.petAnimal(name);\r\n                System.out.println(result.message());\r\n            }\r\n            else if(CheatCodeCommands.ANIMAL_FRIENDSHIP_REGEX.matches(command)) {\r\n                Matcher matcher = CheatCodeCommands.ANIMAL_FRIENDSHIP_REGEX.matcher(command);\r\n\r\n                String name = matcher.matches() ? matcher.group(\"name\") : \"\";\r\n                int amount = Integer.parseInt(matcher.group(\"amount\"));\r\n\r\n                Result result = CheatCodeController.cheatAnimalFriendship(name, amount);\r\n                System.out.println(result.message());\r\n            }\r\n            else if(command.equals(\"animals\")) {\r\n                System.out.print(\"Animals: \\n\" + game.getCurrentPlayer().showAnimals());\r\n            }\r\n            else if(GameMenuCommands.SHEPHERD_ANIMAL_REGEX.matches(command)) {\r\n                Matcher matcher = GameMenuCommands.SHEPHERD_ANIMAL_REGEX.matcher(command);\r\n\r\n                String name = matcher.matches() ? matcher.group(\"name\") : \"\";\r\n                int x = Integer.parseInt(matcher.group(\"x\"));\r\n                int y = Integer.parseInt(matcher.group(\"y\"));\r\n\r\n                Result result = GameMenuController.shepherdAnimal(name, x, y);\r\n                System.out.println(result.message());\r\n            }\r\n            else if(GameMenuCommands.FEED_ANIMAL_REGEX.matches(command)) {\r\n                Matcher matcher = GameMenuCommands.FEED_ANIMAL_REGEX.matcher(command);\r\n\r\n                String name = matcher.matches() ? matcher.group(\"name\") : \"\";\r\n\r\n                Result result = GameMenuController.feedHayAnimal(name);\r\n                System.out.println(result.message());\r\n            }\r\n            else if(command.equals(\"produces\")) {\r\n                Result result = GameMenuController.showAnimalProducts();\r\n                System.out.println(result.message());\r\n            }\r\n            else if(GameMenuCommands.COLLECT_PRODUCE_REGEX.matches(command)) {\r\n                Matcher matcher = GameMenuCommands.COLLECT_PRODUCE_REGEX.matcher(command);\r\n\r\n                String name = matcher.matches() ? matcher.group(\"name\") : \"\";\r\n\r\n                Result result = GameMenuController.collectProduce(name);\r\n                System.out.println(result.message());\r\n            }\r\n            else if(GameMenuCommands.SELL_ANIMAL_REGEX.matches(command)) {\r\n                Matcher matcher = GameMenuCommands.SELL_ANIMAL_REGEX.matcher(command);\r\n\r\n                String name = matcher.matches() ? matcher.group(\"name\") : \"\";\r\n\r\n                Result result = GameMenuController.sellAnimal(name);\r\n                System.out.println(result.message());\r\n            }\r\n            else if(GameMenuCommands.FISHING_REGEX.matches(command)) {\r\n                Matcher matcher = GameMenuCommands.FISHING_REGEX.matcher(command);\r\n\r\n                String fishingPole = matcher.matches() ? matcher.group(\"fishingPole\") : \"\";\r\n\r\n                Result result = GameMenuController.fishing(fishingPole);\r\n                System.out.println(result.message());\r\n            }\r\n\r\n            else if(GameMenuCommands.SHOW_STORE_PRODUCTS_REGEX.matches(command)) {\r\n                Result result = GameMenuController.showStoreProducts();\r\n                System.out.print(result.message());\r\n            }\r\n            else if(GameMenuCommands.SHOW_AVAILABLE_PRODUCTS_REGEX.matches(command)) {\r\n                Result result = GameMenuController.showAvailableStoreProducts();\r\n                System.out.print(result.message());\r\n            }\r\n            else if(GameMenuCommands.PURCHASE_PRODUCT_REGEX.matches(command)) {\r\n                Matcher matcher = GameMenuCommands.PURCHASE_PRODUCT_REGEX.matcher(command);\r\n\r\n                String productName = matcher.matches() ? matcher.group(\"productName\") : \"\";\r\n                int count = matcher.matches() ? Integer.parseInt(matcher.group(\"count\")) : 1;\r\n\r\n                Result result = GameMenuController.purchaseProduct(productName, count);\r\n                System.out.println(result.message());\r\n            }\r\n            else if(CheatCodeCommands.ADD_GOLD_REGEX.matches(command)) {\r\n                Matcher matcher = CheatCodeCommands.ADD_GOLD_REGEX.matcher(command);\r\n\r\n                int amount = matcher.matches() ? Integer.parseInt(matcher.group(\"amount\")) : 0;\r\n\r\n                Result result = CheatCodeController.cheatAddGold(amount);\r\n                System.out.println(result.message());\r\n            }\r\n            else if(GameMenuCommands.SELL_PRODUCT_REGEX.matches(command)) {\r\n                Matcher matcher = GameMenuCommands.SELL_PRODUCT_REGEX.matcher(command);\r\n\r\n                String productName = matcher.matches() ? matcher.group(\"productName\") : \"\";\r\n                int count = matcher.matches() ? Integer.parseInt(matcher.group(\"count\")) : -1;\r\n\r\n                Result result = GameMenuController.sellProduct(productName, count);\r\n                System.out.println(result.message());\r\n            }\r\n\r\n            else if(GameMenuCommands.CROP_INFO.matches(command)) {\r\n                Matcher matcher = GameMenuCommands.CROP_INFO.matcher(command);\r\n                matcher.matches();\r\n                System.out.println(GameMenuController.showCropInfo(matcher.group(\"craftName\")));\r\n            }\r\n            else if(GameMenuCommands.PLANT_SEED.matches(command)) {\r\n                Matcher matcher = GameMenuCommands.PLANT_SEED.matcher(command);\r\n                matcher.matches();\r\n                System.out.println(GameMenuController.plant(matcher.group(\"seed\"),\r\n                        Integer.parseInt(matcher.group(\"dx\")),Integer.parseInt(matcher.group(\"dy\"))));\r\n            }\r\n            else if(GameMenuCommands.Recipe.matches(command)) {\r\n                Matcher matcher = GameMenuCommands.Recipe.matcher(command);\r\n                matcher.matches();\r\n                System.out.println(GameMenuController.ShowRecipe());\r\n            }\r\n            else if(GameMenuCommands.Crafting.matches(command)) {\r\n                Matcher matcher = GameMenuCommands.Crafting.matcher(command);\r\n                matcher.matches();\r\n                System.out.println(GameMenuController.crafting(matcher.group(\"itemName\")));\r\n            }\r\n            else if(CheatCodeCommands.ADD_ITEM.matches(command)) {\r\n                Matcher matcher = CheatCodeCommands.ADD_ITEM.matcher(command);\r\n                matcher.matches();\r\n                Result result = CheatCodeController.cheatAddItem(matcher.group(\"itemName\"),matcher.group(\"count\"));\r\n                System.out.println(result.message());\r\n            }\r\n            else if (GameMenuCommands.PlaceItem.matches(command)) {\r\n                Matcher matcher = GameMenuCommands.PlaceItem.matcher(command);\r\n                matcher.matches();\r\n                System.out.println(GameMenuController.PlaceItem(matcher.group(\"itemName\"),matcher.group(\"x\"),matcher.group(\"y\")));\r\n            }\r\n            else if(GameMenuCommands.ARTISAN_USE.matches(command)) {\r\n                Matcher matcher = GameMenuCommands.ARTISAN_USE.matcher(command);\r\n                matcher.matches();\r\n                System.out.println(GameMenuController.UseArtisan(matcher.group(\"artisanName\"),matcher.group(\"itemName\")));\r\n            }\r\n            else if (GameMenuCommands.GET_ARTISAN.matches(command)) {\r\n                Matcher matcher = GameMenuCommands.GET_ARTISAN.matcher(command);\r\n                matcher.matches();\r\n                System.out.println(GameMenuController.GetArtisan(matcher.group(\"artisanName\")));\r\n            }\r\n            else if(GameMenuCommands.PLANT_MIXED_SEED.matches(command)) {\r\n                Matcher matcher = GameMenuCommands.PLANT_MIXED_SEED.matcher(command);\r\n                matcher.matches();\r\n\r\n                System.out.println(GameMenuController.plantMixedSeed(\r\n                        Integer.parseInt(matcher.group(\"dx\")),Integer.parseInt(matcher.group(\"dy\"))));\r\n            }\r\n            else if(GameMenuCommands.HARVEST.matches(command)) {\r\n                Matcher matcher = GameMenuCommands.HARVEST.matcher(command);\r\n                matcher.matches();\r\n                // TODO : check using tools for harvesting\r\n                System.out.println();\r\n            }\r\n            else if(GameMenuCommands.SHOW_PLANT.matches(command)) {\r\n                Matcher matcher = GameMenuCommands.SHOW_PLANT.matcher(command);\r\n                matcher.matches();\r\n                System.out.println(GameMenuController.showPlant(\r\n                        Integer.parseInt(matcher.group(\"x\")),Integer.parseInt(matcher.group(\"y\"))\r\n                ));\r\n            }\r\n            else {\r\n                System.out.println(\"invalid command\");\r\n            }\r\n        }\r\n        else {\r\n            System.out.println(\"You are locked! (maximum energy per turn consumed). Use \\\"next turn\\\" command to continue.\");\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/views/GameMenu.java b/src/main/java/views/GameMenu.java
--- a/src/main/java/views/GameMenu.java	(revision cb96ebc7e52e1aedd03e584722967e70fa4ed649)
+++ b/src/main/java/views/GameMenu.java	(date 1746938896788)
@@ -425,7 +425,6 @@
             else if(GameMenuCommands.HARVEST.matches(command)) {
                 Matcher matcher = GameMenuCommands.HARVEST.matcher(command);
                 matcher.matches();
-                // TODO : check using tools for harvesting
                 System.out.println();
             }
             else if(GameMenuCommands.SHOW_PLANT.matches(command)) {
Index: src/main/java/models/farming/GeneralPlants/GiantPlant.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package models.farming.GeneralPlants;\r\n\r\nimport models.farming.Harvestable;\r\nimport models.map.Tilable;\r\nimport models.map.Tile;\r\nimport models.time.DateAndTime;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class GiantPlant extends PloughedPlace implements Tilable {\r\n    private List<Tile> parts;\r\n    private int daysUntilHarvest; //?\r\n\r\n    public GiantPlant(List<Tile> parts) {\r\n        super();\r\n        this.parts= parts;\r\n        ArrayList<PloughedPlace> ploughedParts = new ArrayList<>();\r\n        for(Tile part: parts) {\r\n            ploughedParts.add((PloughedPlace) part.getObjectInTile());\r\n        }\r\n        applyStateIfPossible(new PloughedState(this));\r\n        applyStateIfPossible(new SeededState(this));\r\n        applyStateIfPossible(new WateredState(this));\r\n        ArrayList<Harvestable> harvestables = new ArrayList<>();\r\n        for(PloughedPlace p: ploughedParts) {\r\n            harvestables.add(p.getHarvestable());\r\n        }\r\n        this.daysUntilHarvest = minOfList((ArrayList<Integer>)\r\n                harvestables.stream().map(Harvestable::getDaysUntilHarvest).collect(Collectors.toList()));\r\n\r\n        // TODO: days Until Harvest Calculation\r\n    }\r\n\r\n    public void applyStateIfPossible(PlantState state) {\r\n        for(Tile part: parts){\r\n            PloughedPlace place = (PloughedPlace) part.getObjectInTile();\r\n            if(state.getClass() == PloughedState.class){\r\n                this.setState(new PloughedState(this));\r\n                return;\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    @Override\r\n    public void update(DateAndTime dateAndTime) {\r\n    }\r\n\r\n    private static int minOfList(ArrayList<Integer> list) {\r\n        int min = list.get(0);\r\n        for(Integer i: list){\r\n            min = Math.min(min, i);\r\n        }\r\n        return min;\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/models/farming/GeneralPlants/GiantPlant.java b/src/main/java/models/farming/GeneralPlants/GiantPlant.java
--- a/src/main/java/models/farming/GeneralPlants/GiantPlant.java	(revision cb96ebc7e52e1aedd03e584722967e70fa4ed649)
+++ b/src/main/java/models/farming/GeneralPlants/GiantPlant.java	(date 1746938858255)
@@ -29,8 +29,6 @@
         }
         this.daysUntilHarvest = minOfList((ArrayList<Integer>)
                 harvestables.stream().map(Harvestable::getDaysUntilHarvest).collect(Collectors.toList()));
-
-        // TODO: days Until Harvest Calculation
     }
 
     public void applyStateIfPossible(PlantState state) {
