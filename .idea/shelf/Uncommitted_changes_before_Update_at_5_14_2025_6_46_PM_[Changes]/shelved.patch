Index: src/main/java/models/npcs/NPC.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package models.npcs;\r\n\r\nimport models.App;\r\nimport models.Player;\r\nimport models.RandomGenerator;\r\nimport models.map.Tile;\r\nimport models.time.DateAndTime;\r\nimport models.time.Season;\r\nimport models.time.TimeObserver;\r\nimport models.tools.BackPackable;\r\nimport models.tools.Tool;\r\nimport models.weather.WeatherOption;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.HashMap;\r\nimport java.util.Random;\r\n\r\npublic class NPC implements TimeObserver {\r\n    protected String name;\r\n    protected String job;\r\n    private Tile homeLocation;\r\n    private int lastDayUpdate = App.currentGame.getDateAndTime().getDay();\r\n\r\n    protected ArrayList<BackPackable> favourites = new ArrayList<>();\r\n\r\n    protected HashMap<Quest,Integer> questTemplates = new HashMap<>();\r\n\r\n    public HashMap<Player, NPCFriendShip> getFriendships() {\r\n        return friendships;\r\n    }\r\n\r\n    protected HashMap<Player, NPCFriendShip> friendships = new HashMap<>();\r\n\r\n    public NPC(String name, String job, Tile homeLocation) {\r\n        this.name = name;\r\n        this.job = job;\r\n        this.homeLocation = homeLocation;\r\n    }\r\n\r\n    public Tile getHomeLocation() {\r\n        return homeLocation;\r\n    }\r\n\r\n    public String meet(Player player) {\r\n        NPCFriendShip fs = friendships.computeIfAbsent(player, k -> new NPCFriendShip(this,player));\r\n        if (!fs.hasTalkedToday()) {\r\n            fs.addPoints(20);\r\n            fs.markTalked();\r\n        }\r\n\r\n\r\n        StringBuilder message = new StringBuilder();\r\n\r\n        message.append(getHiBasedOnFriendShipLevel(fs));\r\n\r\n        message.append(\"it's \")\r\n                .append(getWeatherDescriptor(App.currentGame.getWeather().getCurrentWeather()))\r\n                .append(\" \")\r\n                .append(getTimeOfDayPhrase())\r\n                .append(\" of \")\r\n                .append(getSeasonPhrase())\r\n                .append(\", isn't it?\");\r\n\r\n        return message.toString();\r\n    }\r\n\r\n    private String getHiBasedOnFriendShipLevel(NPCFriendShip fs) {\r\n        switch (fs.getLevel()) {\r\n            case 0: return \"Hello, \";\r\n            case 1: return \"Hi my friend, \";\r\n            case 2: return \"Hi bro, \";\r\n            default: return \"Hey bestie, \";\r\n        }\r\n    }\r\n\r\n    private String getWeatherDescriptor(WeatherOption weather) {\r\n        switch (weather) {\r\n            case SUNNY: return \"a good sunny\";\r\n            case SNOW:  return \"a snowy\";\r\n            case RAINY: return \"a rainy\";\r\n            case STORM: return \"a stormy\";\r\n            default:    return \"nice\";\r\n        }\r\n    }\r\n\r\n    private String getTimeOfDayPhrase() {\r\n        int hour = App.currentGame.getDateAndTime().getHour();\r\n        if (hour < 6)  return \"night\";\r\n        if (hour < 12) return \"morning\";\r\n        if (hour < 18) return \"afternoon\";\r\n        return \"day\";\r\n    }\r\n\r\n    private String getSeasonPhrase() {\r\n        Season season = App.currentGame.getDateAndTime().getSeason();\r\n        return season.displaySeason();\r\n    }\r\n\r\n    public String gift(Player player, BackPackable item) {\r\n        if (item instanceof Tool) {\r\n            return \"Cannot gift tools to NPCs\";\r\n        }\r\n        NPCFriendShip friendShip = friendships.computeIfAbsent(player, k -> new NPCFriendShip(this,player));\r\n        if (!friendShip.hasGiftedToday()) {\r\n            friendShip.addPoints(50);\r\n            friendShip.markGifted();\r\n        }\r\n        if (favourites.contains(item)) {\r\n            friendShip.addPoints(150);\r\n            return \"thank you for your gift! 200 points added to our friendship!\";\r\n        }\r\n        return \"thank you for your gift! 50 points added to our friendship!\";\r\n    }\r\n\r\n    public void addQuestTemplate(BackPackable quest,int questAmount, BackPackable reward, int rewardAmount,int level) {\r\n        questTemplates.put(new Quest(quest,reward,questAmount,rewardAmount),level);\r\n    }\r\n\r\n    public String showQuests(Player player) {\r\n        NPCFriendShip fs = friendships.get(player);\r\n        if (fs != null) return fs.showQuests();\r\n        return \"no quest for this player\";\r\n    }\r\n\r\n    public void finishQuest(Player player,BackPackable item) {\r\n        NPCFriendShip fs = friendships.get(player);\r\n        if (fs != null) fs.finishQuest(item);\r\n    }\r\n\r\n    public String getName() {\r\n        return name;\r\n    }\r\n\r\n    @Override\r\n    public void update(DateAndTime dateAndTime) {\r\n        if(lastDayUpdate != dateAndTime.getDay()){\r\n            lastDayUpdate = dateAndTime.getDay();\r\n            for(NPCFriendShip fs : friendships.values()){\r\n                if(fs.getLevel()>=3){\r\n                    if(RandomGenerator.getInstance().randomInt(0,21) % 2 == 0){\r\n                        Random rand = new Random();\r\n                        fs.player.getInventory().addToBackPack(favourites.get(rand.nextInt(favourites.size())),1);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/models/npcs/NPC.java b/src/main/java/models/npcs/NPC.java
--- a/src/main/java/models/npcs/NPC.java	(revision 9600f74ce9f40bdf6ce4f3eb8aa4c2a8daf43e90)
+++ b/src/main/java/models/npcs/NPC.java	(date 1747230862670)
@@ -29,6 +29,10 @@
         return friendships;
     }
 
+    public void addFriendships(Player player) {
+        this.friendships.put(player,new NPCFriendShip(this, player));
+    }
+
     protected HashMap<Player, NPCFriendShip> friendships = new HashMap<>();
 
     public NPC(String name, String job, Tile homeLocation) {
Index: src/main/java/models/npcs/NPCFriendShip.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package models.npcs;\r\n\r\nimport models.App;\r\nimport models.Player;\r\nimport models.Result;\r\nimport models.time.Season;\r\nimport models.tools.BackPackable;\r\n\r\nimport java.util.HashMap;\r\nimport models.time.DateAndTime;\r\n\r\npublic class NPCFriendShip {\r\n    NPC npc;\r\n    Player player;\r\n\r\n    private DateAndTime levelOneReachedDate = null;\r\n\r\n\r\n    public NPCFriendShip(NPC npc, Player player) {\r\n        this.npc = npc;\r\n        this.player = player;\r\n    }\r\n\r\n    public int getPoints() {\r\n        return points;\r\n    }\r\n\r\n    private int points = 0;\r\n    private boolean talkedToday = false;\r\n    private boolean giftedToday = false;\r\n\r\n    static final int MAX_POINTS = 799;\r\n    static final int POINTS_PER_LEVEL = 200;\r\n\r\n    private HashMap<Quest,Boolean> playerQuests = new HashMap<>();\r\n\r\n    void addPoints(int points) {\r\n        int oldLevel = getLevel();\r\n        this.points += points;\r\n        if(points > MAX_POINTS) {\r\n            this.points = MAX_POINTS;\r\n        }\r\n        int newLevel = getLevel();\r\n\r\n        if (oldLevel < 1 && newLevel >= 1) {\r\n            levelOneReachedDate = new DateAndTime();\r\n            levelOneReachedDate.setDay(App.currentGame.getDateAndTime().getDay());\r\n        }\r\n\r\n\r\n        activateQuests();\r\n    }\r\n\r\n    public int getLevel() {\r\n        return points / POINTS_PER_LEVEL;\r\n    }\r\n\r\n    boolean hasTalkedToday() {\r\n        return talkedToday;\r\n    }\r\n\r\n    boolean hasGiftedToday() {\r\n        return giftedToday;\r\n    }\r\n\r\n    void markTalked() {\r\n        talkedToday = true;\r\n    }\r\n\r\n    void markGifted() {\r\n        giftedToday = true;\r\n    }\r\n\r\n    void resetDaily() {\r\n        talkedToday = false;\r\n        giftedToday = false;\r\n    }\r\n\r\n    void activateQuests() {\r\n        int lvl = getLevel();\r\n        DateAndTime now = App.currentGame.getDateAndTime();\r\n\r\n        for (Quest quest : npc.questTemplates.keySet()) {\r\n            int required = npc.questTemplates.get(quest);\r\n            if (playerQuests.containsKey(quest)) continue;\r\n\r\n            if (required == 0) {\r\n                playerQuests.put(quest, true);\r\n            }\r\n            else if (required == 1 && lvl >= 1) {\r\n                playerQuests.put(quest, true);\r\n            }\r\n            else if (required == 2 && lvl >= 1\r\n                    && levelOneReachedDate != null\r\n                    && levelOneReachedDate.getSeason() != now.getSeason()) {\r\n                playerQuests.put(quest, true);\r\n            }\r\n        }\r\n    }\r\n\r\n    public HashMap<Quest, Boolean> getPlayerQuests() {\r\n        return playerQuests;\r\n    }\r\n\r\n    String showQuests() {\r\n        StringBuilder sj = new StringBuilder(\"\\n\");\r\n        for (Quest pq : playerQuests.keySet()) {\r\n            if (playerQuests.get(pq)) {\r\n                sj.append(\"Deliver \" + pq.getRequestAmount() +\r\n                        \" x \" + pq.getRequest().getName() + \"\\n\");\r\n            }\r\n        }\r\n        return sj.toString();\r\n    }\r\n\r\n    public Result finishQuest(BackPackable item) {\r\n        Quest found = null;\r\n\r\n        for (Quest pq : playerQuests.keySet()) {\r\n            if (pq.getRequest().getName().equals(item.getName())\r\n                    && playerQuests.get(pq)\r\n                    && !pq.isDoneBySomeone()) {\r\n                found = pq;\r\n                break;\r\n            }\r\n        }\r\n\r\n        if (found == null) {\r\n            return new Result(false, \"no available quest for this NPC!\");\r\n        }\r\n        if (player.getInventory().getItemByName(item.getName()) == null) {\r\n            return new Result(false, \"you don't have this item!\");\r\n        }\r\n        if (player.getInventory().getItemCount(item.getName()) < found.getRequestAmount()) {\r\n            return new Result(false, \"you don't have enough of this item!\");\r\n        }\r\n\r\n        found.setDoneBySomeone(true);\r\n\r\n        playerQuests.put(found, false);\r\n\r\n        player.getInventory().removeCountFromBackPack(item, found.getRequestAmount());\r\n        player.getInventory()\r\n                .addToBackPack(found.getReward(),\r\n                        found.getRewardAmount() * ((getLevel() + 1) / 2));\r\n\r\n        return new Result(true, \"well done! quest completed!\");\r\n    }\r\n\r\n\r\n}\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/models/npcs/NPCFriendShip.java b/src/main/java/models/npcs/NPCFriendShip.java
--- a/src/main/java/models/npcs/NPCFriendShip.java	(revision 9600f74ce9f40bdf6ce4f3eb8aa4c2a8daf43e90)
+++ b/src/main/java/models/npcs/NPCFriendShip.java	(date 1747230499349)
@@ -19,6 +19,7 @@
     public NPCFriendShip(NPC npc, Player player) {
         this.npc = npc;
         this.player = player;
+        activateQuests();
     }
 
     public int getPoints() {
Index: src/main/java/models/Player.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package models;\r\n\r\nimport models.animals.Animal;\r\nimport models.artisanry.ArtisanItem;\r\nimport models.cooking.Food;\r\nimport models.cooking.FoodType;\r\nimport models.crafting.CraftItem;\r\nimport models.farming.GeneralPlants.PloughedPlace;\r\nimport models.farming.Tree;\r\nimport models.foraging.ForagingSeedsType;\r\nimport models.map.AreaType;\r\nimport models.map.Farm;\r\nimport models.map.Tile;\r\nimport models.map.Position;\r\nimport models.relation.PlayerFriendship;\r\nimport models.relation.TradeWhitMoney;\r\nimport models.relation.TradeWithItem;\r\nimport models.time.DateAndTime;\r\nimport models.time.TimeObserver;\r\nimport models.tools.*;\r\n\r\nimport java.util.*;\r\n\r\npublic class Player extends User implements TimeObserver {\r\n    private Position homePosition;\r\n    private Position position;\r\n    private Farm farm;\r\n    private int CurrentId;\r\n    private int mapNumber;\r\n\r\n    private int gold = 1000;\r\n    private int energy = 200;\r\n    private int energyConsumed = 0;\r\n    private boolean unlimitedEnergy = false;\r\n    private boolean fainted = false;\r\n\r\n    private BackPack inventory = new BackPack();\r\n    private TrashCan trashCan = new TrashCan();\r\n    private Tool currentTool = null;\r\n\r\n    private int farmingAbility = 0;\r\n    private int farmingLevel = 0;\r\n    private int miningAbility = 0;\r\n    private int miningLevel = 0;\r\n    private int foragingAbility = 0;\r\n    private int foragingLevel = 0;\r\n    private int fishingAbility = 0;\r\n    private int fishingLevel = 0;\r\n\r\n    private DateAndTime lastUpdate = new DateAndTime();\r\n\r\n    public void setGame(Game game) {\r\n        this.game = game;\r\n    }\r\n\r\n    public Game getGame() {\r\n        return game;\r\n    }\r\n\r\n    private Game game;\r\n\r\n    private ArrayList<CraftItem> availableCrafts = new ArrayList<>();\r\n\r\n    private ArrayList<Food> availableFoods = new ArrayList<>(Arrays.asList(new Food(FoodType.FRIED_EGG),\r\n            new Food(FoodType.BACKED_FISH), new Food(FoodType.SALAD)));\r\n\r\n    private ArrayList<TradeWhitMoney> tradesWhitMoney = new ArrayList<>();\r\n    private ArrayList<TradeWithItem> tradesWithItem = new ArrayList<>();\r\n    private ArrayList<TradeWithItem> tradesWithItemHistory = new ArrayList<>();\r\n    private ArrayList<TradeWhitMoney> tradesWithMoneyHistory = new ArrayList<>();\r\n\r\n    private ArrayList<Animal> animals = new ArrayList<>();\r\n\r\n    private ArrayList<ArtisanItem> artisanItems = new ArrayList<>();\r\n\r\n    private ArrayList<PlayerFriendship.Message> receivedMessages = new ArrayList<>();\r\n    public void addMessage(PlayerFriendship.Message message) {\r\n        receivedMessages.add(message);\r\n    }\r\n    private Player couple;\r\n\r\n    public int getCurrentId() {\r\n        return CurrentId;\r\n    }\r\n\r\n    public void setCurrentId(int currentId) {\r\n        CurrentId = currentId;\r\n    }\r\n\r\n    public Player(User user) {\r\n        super(user.getUsername(), user.getPassword(), user.getNickname(), user.getEmail(), user.getGender());\r\n    }\r\n\r\n    public ArrayList<ArtisanItem> getArtisanItems() {\r\n        return artisanItems;\r\n    }\r\n\r\n    public Position getPosition() {\r\n        return position;\r\n    }\r\n    public void setPosition(Position position) {\r\n        this.position = position;\r\n    }\r\n\r\n    public void setHome(Position homePosition) {\r\n        this.homePosition = homePosition;\r\n        this.position = this.homePosition;\r\n    }\r\n    public void goHome() {\r\n        this.position = homePosition;\r\n    }\r\n\r\n    public int calculateWalkingEnergy(Position nextPosition) {\r\n        int tilesNeeded = game.getMap().findShortestPath(this, position, nextPosition);\r\n        if(tilesNeeded == -1) return -1;\r\n        return game.getMap().calculatePath(position,nextPosition) / 5 + 1;\r\n    }\r\n    public void walk(Position position) {\r\n        int energyNeeded = calculateWalkingEnergy(position);\r\n\r\n        if(energyNeeded > energy) {\r\n            faint();\r\n        }\r\n        else {\r\n            subtractEnergy(energyNeeded);\r\n            setPosition(position);\r\n        }\r\n    }\r\n\r\n    public Farm getFarm() {\r\n        return farm;\r\n    }\r\n\r\n    public void setFarm(Farm farm) {\r\n        this.farm = farm;\r\n    }\r\n\r\n    public boolean checkTerritory(Farm farm) {\r\n        if(this.farm.equals(farm)) return true;\r\n        if(couple != null) {\r\n            return couple.getFarm().equals(farm);\r\n        }\r\n        return false;\r\n    }\r\n\r\n    public int getMapNumber() {\r\n        return mapNumber;\r\n    }\r\n\r\n    public void setMapNumber(int mapNumber) {\r\n        this.mapNumber = mapNumber;\r\n    }\r\n\r\n    public int getGold() {\r\n        return gold;\r\n    }\r\n    public int getWood() {\r\n        return inventory.getItemCount(\"wood\");\r\n    }\r\n    public int getStone() {\r\n        return inventory.getItemCount(\"stone\");\r\n    }\r\n\r\n    public void addGold(int gold) {\r\n        this.gold += gold;\r\n        if(couple != null) {\r\n            couple.setGold(gold);\r\n        }\r\n    }\r\n\r\n    public void subtractGold(int gold) {\r\n        this.gold -= gold;\r\n        if(couple != null) {\r\n            couple.setGold(gold);\r\n        }\r\n    }\r\n    public void subtractWood(int wood) {\r\n        inventory.removeCountFromBackPack(inventory.getItemByName(\"wood\"), wood);\r\n    }\r\n    public void subtractStone(int stone) {\r\n        inventory.removeCountFromBackPack(inventory.getItemByName(\"stone\"), stone);\r\n    }\r\n\r\n    public int getEnergy() {\r\n        return energy;\r\n    }\r\n    public void setEnergy(int energy) {\r\n        this.energy = energy;\r\n    }\r\n    public void subtractEnergy(int amount) {\r\n        if(!unlimitedEnergy) {\r\n            energyConsumed += amount;\r\n            energy -= amount;\r\n        }\r\n    }\r\n    public void addEnergy(int amount) {\r\n        energy = Math.min(200, energy + amount);\r\n    }\r\n\r\n    public boolean isLocked() {\r\n        return !unlimitedEnergy && energyConsumed >= 50;\r\n    }\r\n    public void unlock() {\r\n        if(isLocked()) {\r\n            energyConsumed = 0;\r\n        }\r\n    }\r\n\r\n    public void unlimitedEnergy() {\r\n        unlimitedEnergy = true;\r\n        energy = Integer.MAX_VALUE;\r\n    }\r\n\r\n    public boolean isFainted() {\r\n        return fainted;\r\n    }\r\n    public void faint() {\r\n        energy = 0;\r\n        fainted = true;\r\n    }\r\n\r\n    public BackPack getInventory() {\r\n        return inventory;\r\n    }\r\n    public void addToBackPack(BackPackable bp, int count) {\r\n        if(!inventory.checkFilled()) {\r\n            inventory.addToBackPack(bp, count);\r\n        }\r\n    }\r\n\r\n    public TrashCan getTrashCan() {\r\n        return trashCan;\r\n    }\r\n\r\n    public Tool getCurrentTool() {\r\n        return currentTool;\r\n    }\r\n    public void setCurrentTool(Tool currentTool) {\r\n        this.currentTool = currentTool;\r\n    }\r\n\r\n    public int getFarmingAbility() {\r\n        return farmingAbility;\r\n    }\r\n    public int getFarmingLevel() {\r\n        return farmingLevel;\r\n    }\r\n    public void upgradeFarmingAbility(int amount) {\r\n        this.farmingAbility += amount;\r\n        if(farmingAbility > 100 * farmingLevel + 50 && farmingLevel != 4) {\r\n            farmingLevel++;\r\n        }\r\n    }\r\n\r\n    public int getMiningAbility() {\r\n        return miningAbility;\r\n    }\r\n    public int getMiningLevel() {\r\n        return miningLevel;\r\n    }\r\n    public void upgradeMiningAbility(int amount) {\r\n        this.miningAbility += amount;\r\n        if(miningAbility > 100 * miningLevel + 50 && miningLevel != 4) {\r\n            miningLevel++;\r\n        }\r\n    }\r\n\r\n    public int getForagingAbility() {\r\n        return foragingAbility;\r\n    }\r\n    public int getForagingLevel() {\r\n        return foragingLevel;\r\n    }\r\n    public void upgradeForagingAbility(int amount) {\r\n        this.foragingAbility += amount;\r\n        if(foragingAbility > 100 * foragingLevel + 50 && foragingLevel != 4) {\r\n            foragingLevel++;\r\n        }\r\n    }\r\n\r\n    public int getFishingAbility() {\r\n        return fishingAbility;\r\n    }\r\n    public int getFishingLevel() {\r\n        return fishingLevel;\r\n    }\r\n    public void upgradeFishingAbility(int amount) {\r\n        this.fishingAbility += amount;\r\n        if(fishingAbility > 100 * fishingLevel + 50 && fishingLevel != 4) {\r\n            fishingLevel++;\r\n        }\r\n    }\r\n\r\n    public ArrayList<CraftItem> getAvailableCrafts() {\r\n        return availableCrafts;\r\n    }\r\n\r\n    public void addToAvailableFoods(Food food) {\r\n        availableFoods.add(food);\r\n    }\r\n    public ArrayList<Food> getAvailableFoods() {\r\n        return availableFoods;\r\n    }\r\n\r\n    public Animal getAnimalByName(String name) {\r\n        for(Animal animal : animals) {\r\n            if(animal.getName().equals(name)) {\r\n                return animal;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n    public ArrayList<Animal> getAnimals() {\r\n        return animals;\r\n    }\r\n\r\n    public ArrayList<TradeWhitMoney> getTradesWhitMoney() {\r\n        return tradesWhitMoney;\r\n    }\r\n\r\n    public ArrayList<TradeWithItem> getTradesWithItem() {\r\n        return tradesWithItem;\r\n    }\r\n\r\n    public ArrayList<TradeWithItem> getTradesWithItemHistory() {\r\n        return tradesWithItemHistory;\r\n    }\r\n\r\n    public ArrayList<TradeWhitMoney> getTradesWithMoneyHistory() {\r\n        return tradesWithMoneyHistory;\r\n    }\r\n\r\n    public void setGold(int gold) {\r\n        this.gold = gold;\r\n    }\r\n\r\n    public ArrayList<PlayerFriendship.Message> getReceivedMessages() {\r\n        return receivedMessages;\r\n    }\r\n    public Player getCouple() {\r\n        return couple;\r\n    }\r\n    public void marry(Player couple) {\r\n        this.couple = couple;\r\n    }\r\n\r\n    public void eat(Food food) {\r\n        addEnergy(food.getEnergy());\r\n    }\r\n\r\n    public void showAvailableCrafts() {\r\n\r\n    }\r\n    public String showAvailableFoods() {\r\n        StringBuilder display = new StringBuilder();\r\n        for(Food food : availableFoods) {\r\n            display.append(food.getName()).append(\"    \");\r\n            display.append(food.getRecipe()).append(\"\\n\");\r\n        }\r\n\r\n        return display.toString();\r\n    }\r\n    public String showAnimals() {\r\n        StringBuilder display = new StringBuilder();\r\n        for(Animal animal: animals) {\r\n            display.append(animal.getName()).append(\"    \");\r\n            display.append(animal.getAnimalTypeName()).append(\"    \");\r\n            display.append(\"friendship: \").append(animal.getFriendship()).append(\"  \");\r\n            display.append(\"petted: \").append(animal.isPetted()).append(\"  \");\r\n            display.append(\"fed: \").append(animal.isFed()).append(\"\\n\");\r\n        }\r\n\r\n        return display.toString();\r\n    }\r\n\r\n    public void attackOfCrows(){\r\n        int remainder = RandomGenerator.getInstance().randomInt(0,15);\r\n        if(farm.doesHaveScareCrow()) return;\r\n        for(int i=0;i<farm.getTiles().size();i++) {\r\n            for (int j = 0; j < farm.getTiles().get(i).size(); j++) {\r\n                Tile tile = farm.getTiles().get(i).get(j);\r\n                if(tile.getAreaType() == AreaType.GREENHOUSE) continue;\r\n                if(tile.isPlowed()){\r\n                    remainder++;    remainder %= 16;\r\n                    if(remainder == 0){\r\n                        if(RandomGenerator.getInstance().randomInt(0,3) == 1) {\r\n                            if(tile.getObjectInTile() instanceof PloughedPlace) {\r\n                                PloughedPlace place = (PloughedPlace) tile.getObjectInTile();\r\n                                if(place.getHarvestable() instanceof Tree) {\r\n                                    place.setAttackedByCrow(2);\r\n                                }\r\n                                else{\r\n                                    place.unPlough();\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    public void ForagingSeedsAndCrops(){\r\n        for(int i=0;i<farm.getTiles().size();i++){\r\n            for(int j=0;j<farm.getTiles().get(i).size();j++){\r\n                Tile tile = farm.getTiles().get(i).get(j);\r\n                if(tile.isPlowed()||tile.getAreaType() == AreaType.GREENHOUSE){\r\n                    continue;\r\n                }\r\n                if(RandomGenerator.getInstance().randomInt(0,100)==1){\r\n                    ForagingSeedsType.getSeasonForagingSeed(App.currentGame.getDateAndTime().getSeason());\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void update(DateAndTime dateAndTime) {\r\n        if(dateAndTime.getHour() == 9) {\r\n            energyConsumed = 0;\r\n            if(fainted) {\r\n                fainted = false;\r\n                energy = 150;\r\n            }\r\n            else {\r\n                energy = 200;\r\n                goHome();\r\n            }\r\n        }\r\n        if(lastUpdate.getDay() != dateAndTime.getDay()) {\r\n            attackOfCrows();\r\n            ForagingSeedsAndCrops(); // check if causes bug\r\n        }\r\n    }\r\n\r\n    public void thorOnThreeTiles(){\r\n        List<PloughedPlace> ploughed = new ArrayList<>();\r\n        // collect all ploughed places on the farm\r\n        for (List<Tile> row : farm.getTiles()) {\r\n            for (Tile tile : row) {\r\n                if (tile.getObjectInTile() instanceof PloughedPlace) {\r\n                    ploughed.add((PloughedPlace) tile.getObjectInTile());\r\n                }\r\n            }\r\n        }\r\n        // shuffle and strike up to 3\r\n        Random random = new Random();\r\n        Collections.shuffle(ploughed, random );\r\n        for (int i = 0; i < Math.min(3, ploughed.size()); i++) {\r\n            ploughed.get(i).thor();\r\n        }\r\n    }\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/models/Player.java b/src/main/java/models/Player.java
--- a/src/main/java/models/Player.java	(revision 9600f74ce9f40bdf6ce4f3eb8aa4c2a8daf43e90)
+++ b/src/main/java/models/Player.java	(date 1747235753664)
@@ -12,6 +12,8 @@
 import models.map.Farm;
 import models.map.Tile;
 import models.map.Position;
+import models.npcs.DefaultNPCs;
+import models.npcs.NPC;
 import models.relation.PlayerFriendship;
 import models.relation.TradeWhitMoney;
 import models.relation.TradeWithItem;
@@ -89,6 +91,14 @@
 
     public Player(User user) {
         super(user.getUsername(), user.getPassword(), user.getNickname(), user.getEmail(), user.getGender());
+        //initializeFriendships();
+    }
+
+    private void initializeFriendships() {
+        var defaultNPCs = DefaultNPCs.getInstance().getDefaultOnes();
+        for (NPC npc : defaultNPCs.values()) {
+            npc.addFriendships(this);
+        }
     }
 
     public ArrayList<ArtisanItem> getArtisanItems() {
@@ -382,8 +392,8 @@
                 if(tile.getAreaType() == AreaType.GREENHOUSE) continue;
                 if(tile.isPlowed()){
                     remainder++;    remainder %= 16;
-                    if(remainder == 0){
-                        if(RandomGenerator.getInstance().randomInt(0,3) == 1) {
+                    //if(remainder == 0){
+                        //if(RandomGenerator.getInstance().randomInt(0,3) == 1) {
                             if(tile.getObjectInTile() instanceof PloughedPlace) {
                                 PloughedPlace place = (PloughedPlace) tile.getObjectInTile();
                                 if(place.getHarvestable() instanceof Tree) {
@@ -392,9 +402,9 @@
                                 else{
                                     place.unPlough();
                                 }
-                            }
+                            //}
                         }
-                    }
+                    //}
                 }
             }
         }
@@ -429,13 +439,12 @@
         }
         if(lastUpdate.getDay() != dateAndTime.getDay()) {
             attackOfCrows();
-            ForagingSeedsAndCrops(); // check if causes bug
+            ForagingSeedsAndCrops();
         }
     }
 
     public void thorOnThreeTiles(){
         List<PloughedPlace> ploughed = new ArrayList<>();
-        // collect all ploughed places on the farm
         for (List<Tile> row : farm.getTiles()) {
             for (Tile tile : row) {
                 if (tile.getObjectInTile() instanceof PloughedPlace) {
@@ -443,7 +452,6 @@
                 }
             }
         }
-        // shuffle and strike up to 3
         Random random = new Random();
         Collections.shuffle(ploughed, random );
         for (int i = 0; i < Math.min(3, ploughed.size()); i++) {
Index: src/main/java/models/npcs/DefaultNPCs.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package models.npcs;\r\n\r\nimport models.App;\r\nimport models.animals.Fish;\r\nimport models.animals.FishType;\r\nimport models.map.Map;\r\nimport models.map.Position;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.HashMap;\r\nimport java.util.List;\r\n\r\npublic class DefaultNPCs {\r\n    private static final DefaultNPCs defaultNPCs = new DefaultNPCs();\r\n\r\n    public static DefaultNPCs getInstance() {\r\n        return defaultNPCs;\r\n    }\r\n\r\n    private DefaultNPCs() {\r\n    }\r\n\r\n    public HashMap<String, NPC> defaultOnes() {\r\n        Map gameMap = App.currentGame.getMap();\r\n        HashMap<String, NPC> list = new HashMap<>();\r\n\r\n        // Sebastian\r\n        NPC seb = new NPC(\"Sebastian\", \"Programmer\", gameMap.getTile(new Position(25, 27)));\r\n        seb.favourites.add(new Fish(FishType.MIDNIGHT_CARP));\r\n        seb.favourites.add(new Fish(FishType.GLACIER_FISH));\r\n        seb.favourites.add(new Fish(FishType.SQUID));\r\n        seb.addQuestTemplate(new Fish(FishType.MIDNIGHT_CARP), 2, new Fish(FishType.SQUID), 1, 0);\r\n        seb.addQuestTemplate(new Fish(FishType.GLACIER_FISH), 3, new Fish(FishType.TUNA), 2, 1);\r\n        seb.addQuestTemplate(new Fish(FishType.SQUID), 5, new Fish(FishType.FLOUNDER), 1, 2);\r\n        list.put(seb.getName(), seb);\r\n\r\n        // Abigail\r\n        NPC abi = new NPC(\"Abigail\", \"Adventurer\", gameMap.getTile(new Position(25, 25)));\r\n        abi.favourites.add(new Fish(FishType.FLOUNDER));\r\n        abi.favourites.add(new Fish(FishType.HERRING));\r\n        abi.favourites.add(new Fish(FishType.SUNFISH));\r\n        abi.addQuestTemplate(new Fish(FishType.FLOUNDER), 1, new Fish(FishType.HERRING), 2, 0);\r\n        abi.addQuestTemplate(new Fish(FishType.HERRING), 4, new Fish(FishType.RAINBOW_TROUT), 1, 1);\r\n        abi.addQuestTemplate(new Fish(FishType.SUNFISH), 6, new Fish(FishType.DORADO), 1, 2);\r\n        list.put(abi.getName(), abi);\r\n\r\n        // Harvey\r\n        NPC harv = new NPC(\"Harvey\", \"Doctor\", gameMap.getTile(new Position(27, 25)));\r\n        harv.favourites.add(new Fish(FishType.SARDINE));\r\n        harv.favourites.add(new Fish(FishType.SHAD));\r\n        harv.favourites.add(new Fish(FishType.SQUID));\r\n        harv.addQuestTemplate(new Fish(FishType.SARDINE), 1, new Fish(FishType.SQUID), 2, 0);\r\n        harv.addQuestTemplate(new Fish(FishType.SHAD), 5, new Fish(FishType.TUNA), 1, 1);\r\n        harv.addQuestTemplate(new Fish(FishType.TUNA), 10, new Fish(FishType.FLOUNDER), 3, 2);\r\n        list.put(harv.getName(), harv);\r\n\r\n        // Leah\r\n        NPC lea = new NPC(\"Leah\", \"Artist\", gameMap.getTile(new Position(27, 27)));\r\n        lea.favourites.add(new Fish(FishType.LIONFISH));\r\n        lea.favourites.add(new Fish(FishType.GHOST_FISH));\r\n        lea.favourites.add(new Fish(FishType.HERRING));\r\n        lea.addQuestTemplate(new Fish(FishType.HERRING), 3, new Fish(FishType.GHOST_FISH), 1, 0);\r\n        lea.addQuestTemplate(new Fish(FishType.LIONFISH), 2, new Fish(FishType.RAINBOW_TROUT), 2, 1);\r\n        lea.addQuestTemplate(new Fish(FishType.RAINBOW_TROUT), 5, new Fish(FishType.LEGEND), 1, 2);\r\n        list.put(lea.getName(), lea);\r\n\r\n        // Robin\r\n        NPC rob = new NPC(\"Robin\", \"Carpenter\", gameMap.getTile(new Position(23, 27)));\r\n        rob.favourites.add(new Fish(FishType.TILAPIA));\r\n        rob.favourites.add(new Fish(FishType.SUNFISH));\r\n        rob.favourites.add(new Fish(FishType.DORADO));\r\n        rob.addQuestTemplate(new Fish(FishType.TILAPIA), 4, new Fish(FishType.PERCH), 3, 0);\r\n        rob.addQuestTemplate(new Fish(FishType.SUNFISH), 2, new Fish(FishType.GLACIER_FISH), 1, 1);\r\n        rob.addQuestTemplate(new Fish(FishType.DORADO), 6, new Fish(FishType.ANGLER), 1, 2);\r\n        list.put(rob.getName(), rob);\r\n\r\n        return list;\r\n    }\r\n\r\n    public NPC getNPCByName(String name) {\r\n        return defaultOnes().getOrDefault(name, null);\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/models/npcs/DefaultNPCs.java b/src/main/java/models/npcs/DefaultNPCs.java
--- a/src/main/java/models/npcs/DefaultNPCs.java	(revision 9600f74ce9f40bdf6ce4f3eb8aa4c2a8daf43e90)
+++ b/src/main/java/models/npcs/DefaultNPCs.java	(date 1747234557061)
@@ -13,6 +13,12 @@
 public class DefaultNPCs {
     private static final DefaultNPCs defaultNPCs = new DefaultNPCs();
 
+    HashMap<String,NPC> defaultOnes = buildDefaultOnes();
+
+    public HashMap<String, NPC> getDefaultOnes() {
+        return defaultOnes;
+    }
+
     public static DefaultNPCs getInstance() {
         return defaultNPCs;
     }
@@ -20,7 +26,9 @@
     private DefaultNPCs() {
     }
 
-    public HashMap<String, NPC> defaultOnes() {
+
+
+    public HashMap<String, NPC> buildDefaultOnes() {
         Map gameMap = App.currentGame.getMap();
         HashMap<String, NPC> list = new HashMap<>();
 
@@ -78,6 +86,6 @@
     }
 
     public NPC getNPCByName(String name) {
-        return defaultOnes().getOrDefault(name, null);
+        return getDefaultOnes().getOrDefault(name, null);
     }
 }
Index: src/main/java/controllers/GameMenuController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package controllers;\r\n\r\nimport models.App;\r\nimport models.Game;\r\nimport models.Player;\r\nimport models.Result;\r\nimport models.animals.*;\r\nimport models.artisanry.ArtisanItem;\r\nimport models.artisanry.ArtisanItemType;\r\nimport models.cooking.Food;\r\nimport models.cooking.FoodType;\r\nimport models.crafting.CraftItem;\r\nimport models.crafting.CraftItemType;\r\nimport models.enums.Gender;\r\nimport models.farming.*;\r\nimport models.farming.GeneralPlants.PloughedPlace;\r\nimport models.map.*;\r\nimport models.npcs.DefaultNPCs;\r\nimport models.npcs.NPC;\r\nimport models.npcs.NPCFriendShip;\r\nimport models.npcs.Quest;\r\nimport models.relation.PlayerFriendship;\r\nimport models.relation.TradeWhitMoney;\r\nimport models.relation.TradeWithItem;\r\nimport models.stores.*;\r\nimport models.tools.*;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\npublic class GameMenuController {\r\n    public static Player getCurrentPlayer() {\r\n        return App.currentGame.getCurrentPlayer();\r\n    }\r\n\r\n    public static Result buildGreenHouse() {\r\n        GreenHouse greenHouse = getCurrentPlayer().getFarm().getGreenHouse();\r\n\r\n        if(greenHouse.isBuilt()) {\r\n            return new Result(false, \"you can't build your greenhouse twice\");\r\n        }\r\n        else if(getCurrentPlayer().getGold() < 1000) {\r\n            return new Result(false, \"not enough gold to build your greenhouse\");\r\n        }\r\n        else if (getCurrentPlayer().getWood() < 500) {\r\n            return new Result(false, \"not enough wood to build your greenhouse\");\r\n        }\r\n\r\n        getCurrentPlayer().subtractGold(1000);\r\n        getCurrentPlayer().subtractWood(500);\r\n        greenHouse.buildGreenHouse();\r\n        return new Result(true, \"greenhouse built successfully!\");\r\n    }\r\n\r\n    public static Result walk(int x, int y) {\r\n        if(x >= Map.COLS || y >= Map.ROWS || x < 0 || y < 0) {\r\n            return new Result(false, \"you are out of bounds!\");\r\n        }\r\n\r\n        Tile tile = App.currentGame.getTile(x, y);\r\n        if(!tile.isEmpty()) {\r\n            return new Result(false, \"you can't stand on a tile which is not empty.\");\r\n        }\r\n        else if(tile.getAreaType().equals(AreaType.LAKE)) {\r\n            return new Result(false, \"you're destination is in the lake!\");\r\n        }\r\n        else if(tile.getAreaType().equals(AreaType.FARM)) {\r\n            Farm farm = (Farm) tile.getArea();\r\n            if(!getCurrentPlayer().checkTerritory(farm)) {\r\n                return new Result(false, \"you cannot enter other players' territory.\");\r\n            }\r\n        }\r\n\r\n        int energyNeeded = getCurrentPlayer().calculateWalkingEnergy(new Position(x, y));\r\n\r\n        if(energyNeeded == -1) {\r\n            return new Result(false, \"tile is unreachable!\");\r\n        }\r\n        return new Result(true, energyNeeded + \" energy would be consumed. Do you agree? (y/n)\");\r\n    }\r\n\r\n    public static Result setPosition(int x, int y) {\r\n        Position position = new Position(x, y);\r\n\r\n        getCurrentPlayer().walk(position);\r\n        if(getCurrentPlayer().isFainted()) {\r\n            return new Result(false, \"Oops! you've fainted!\");\r\n        }\r\n\r\n        return new Result(true, \"moved to position \" + position + \" successfully.\");\r\n    }\r\n\r\n    public static Result removeFromInventory(String itemName, int count) {\r\n        BackPackable item = getCurrentPlayer().getInventory().getItemByName(itemName);\r\n        int availableCount = getCurrentPlayer().getInventory().getItemCount(itemName);\r\n        if(item == null) {\r\n            return new Result(false, \"You don't have that item.\");\r\n        }\r\n        else if(count > availableCount) {\r\n            return new Result(false, \"You only have \" + availableCount + \" \" + item.getName() + \" in your inventory.\");\r\n        }\r\n\r\n        TrashCan trashCan = getCurrentPlayer().getTrashCan();\r\n        if(count == -1) {\r\n            int returnedAmount = trashCan.use(item, availableCount, getCurrentPlayer());\r\n            getCurrentPlayer().getInventory().removeFromBackPack(item);\r\n            return new Result(true, item.getName() + \" moved to trash can.\\n\" +\r\n                    returnedAmount + \" gold added to your account.\");\r\n        }\r\n        else {\r\n            int returnedAmount = trashCan.use(item, count, getCurrentPlayer());\r\n            getCurrentPlayer().getInventory().removeCountFromBackPack(item, count);\r\n            return new Result(true, count + \" \" + item.getName() + \" moved to trash can.\\n\" +\r\n                    returnedAmount + \" gold added to your account.\");\r\n        }\r\n    }\r\n\r\n    public static Result equipTool(String toolName) {\r\n        Tool tool = (Tool) getCurrentPlayer().getInventory().getItemByName(toolName);\r\n\r\n        if(tool == null) {\r\n            return new Result(false, \"You don't have that tool.\");\r\n        }\r\n\r\n        getCurrentPlayer().setCurrentTool(tool);\r\n        return new Result(true, \"equipped tool \" + tool.getName() + \" successfully.\");\r\n    }\r\n    public static Result showCurrentTool() {\r\n        Tool tool = getCurrentPlayer().getCurrentTool();\r\n        if(tool == null) {\r\n            return new Result(false, \"you're not holding any tool!\");\r\n        }\r\n\r\n        return new Result(true, tool.getName());\r\n    }\r\n    public static Result upgradeTool(String toolName) {\r\n        Tile playerTile = App.currentGame.getTile(getCurrentPlayer().getPosition());\r\n\r\n        if(!(playerTile.getArea() instanceof Blacksmith)) {\r\n            return new Result(false, \"you have to be inside blacksmith to run this command.\");\r\n        }\r\n\r\n        Tool tool = (Tool) getCurrentPlayer().getInventory().getItemByName(toolName);\r\n\r\n        if(tool == null) {\r\n            return new Result(false, \"You don't have that tool.\");\r\n        }\r\n\r\n        return new Result(true, tool.upgrade(getCurrentPlayer()));\r\n    }\r\n    public static Result useTool(int dx, int dy) {\r\n        Tool tool = getCurrentPlayer().getCurrentTool();\r\n        if(tool == null) {\r\n            return new Result(false, \"choose a tool first\");\r\n        }\r\n        Position usePosition = new Position(getCurrentPlayer().getPosition().x + dx, getCurrentPlayer().getPosition().y + dy);\r\n        if(!Map.isBoundValid(usePosition)) {\r\n            return new Result(false, \"you are out of bounds!\");\r\n        }\r\n\r\n        Tile useTile = App.currentGame.getTile(usePosition);\r\n\r\n        return new Result(true, tool.use(useTile, getCurrentPlayer()));\r\n    }\r\n\r\n    public static Result putInFridge(String itemName) {\r\n        Tile tile = App.currentGame.getTile(getCurrentPlayer().getPosition());\r\n        if(!(tile.getArea() instanceof House playersHouse)) {\r\n            return new Result(false, \"you should be in your house to use fridge!\");\r\n        }\r\n        Fridge fridge = playersHouse.getFridge();\r\n\r\n        BackPackable item = getCurrentPlayer().getInventory().getItemByName(itemName);\r\n        if(item == null) {\r\n            return new Result(false, \"You don't have that item in your inventory.\");\r\n        }\r\n\r\n        int itemCount = getCurrentPlayer().getInventory().getItemCount(itemName);\r\n        fridge.addToFridge(item, itemCount);\r\n        getCurrentPlayer().getInventory().removeFromBackPack(item);\r\n\r\n        return new Result(true, item.getName() + \" moved to fridge.\");\r\n    }\r\n    public static Result pickFromFridge(String itemName) {\r\n        Tile tile = App.currentGame.getTile(getCurrentPlayer().getPosition());\r\n        if(!(tile.getArea() instanceof House playersHouse)) {\r\n            return new Result(false, \"you should be in your house to use fridge!\");\r\n        }\r\n        Fridge fridge = playersHouse.getFridge();\r\n\r\n        BackPackable item = fridge.getItemByName(itemName);\r\n        if(item == null) {\r\n            return new Result(false, \"You don't have that item in your fridge.\");\r\n        }\r\n\r\n        int itemCount = fridge.getItemCount(itemName);\r\n        getCurrentPlayer().getInventory().addToBackPack(item, itemCount);\r\n        fridge.removeFromFridge(item);\r\n\r\n        return new Result(true, item.getName() +  \" moved to inventory.\");\r\n    }\r\n    public static Result eatFood(String foodName) {\r\n        Food food = (Food) getCurrentPlayer().getInventory().getItemByName(foodName);\r\n        if(food == null) {\r\n            return new Result(false, \"You don't have that food.\");\r\n        }\r\n\r\n        getCurrentPlayer().eat(food);\r\n        getCurrentPlayer().getInventory().removeCountFromBackPack(food, 1);\r\n        return new Result(true, \"You ate \" + food.getName() + \". \" + food.getEnergy() + \" energy added.\");\r\n    }\r\n\r\n    public static Result buildBarn(int type, int x, int y) {\r\n        Tile playerTile = App.currentGame.getTile(getCurrentPlayer().getPosition());\r\n        if(!(playerTile.getArea() instanceof CarpenterShop)) {\r\n            return new Result(false, \"you should be inside carpenter shop to run this command.\");\r\n        }\r\n\r\n        boolean buildable = true;\r\n        int requiredGold; int requiredWood; int requiredStone;\r\n        int y_scale = 2, x_scale = 2;\r\n        switch (type) {\r\n            case 1 -> {\r\n                requiredGold = 12000; requiredWood = 450; requiredStone = 200;\r\n                x_scale = 4;\r\n            }\r\n            case 2 -> {\r\n                requiredGold = 25000; requiredWood = 550; requiredStone = 300;\r\n                y_scale = 3;\r\n                x_scale = 4;\r\n            }\r\n            default -> {\r\n                requiredGold = 6000; requiredWood = 350; requiredStone = 150;\r\n            }\r\n        }\r\n        for(int row = y; row < y + y_scale; row++) {\r\n            for(int col = x; col < x + x_scale; col++) {\r\n                Tile tile = App.currentGame.getTile(col, row);\r\n                if(!tile.isBuildable()) {\r\n                    buildable = false;\r\n                }\r\n            }\r\n        }\r\n\r\n        if(!buildable) {\r\n            return new Result(false, \"You can't build a barn in this Area.\");\r\n        }\r\n        else if(getCurrentPlayer().getGold() < requiredGold) {\r\n            return new Result(false, \"not enough gold to build.\");\r\n        }\r\n        else if(getCurrentPlayer().getWood() < requiredWood) {\r\n            return new Result(false, \"not enough wood to build.\");\r\n        }\r\n        else if(getCurrentPlayer().getStone() < requiredStone) {\r\n            return new Result(false, \"not enough stone to build.\");\r\n        }\r\n        else {\r\n            Barn barn = new Barn();\r\n            switch (type) {\r\n                case 1 -> barn.setBig();\r\n                case 2 -> barn.setDeluxe();\r\n            }\r\n            for(int row = y; row < y + y_scale; row++) {\r\n                for(int col = x; col < x + x_scale; col++) {\r\n                    Tile tile = App.currentGame.getTile(col, row);\r\n                    tile.setArea(barn);\r\n                }\r\n            }\r\n            getCurrentPlayer().subtractGold(requiredGold); getCurrentPlayer().subtractWood(requiredWood);\r\n            getCurrentPlayer().subtractStone(requiredStone);\r\n            return new Result(true, \"barn built successfully.\");\r\n        }\r\n    }\r\n    public static Result buildCoop(int type, int x, int y) {\r\n        Tile playerTile = App.currentGame.getTile(getCurrentPlayer().getPosition());\r\n        if(!(playerTile.getArea() instanceof CarpenterShop)) {\r\n            return new Result(false, \"you should be inside carpenter shop to run this command.\");\r\n        }\r\n\r\n        boolean buildable = true;\r\n        int requiredGold; int requiredWood; int requiredStone;\r\n        int y_scale = 2, x_scale = 2;\r\n        switch (type) {\r\n            case 1 -> {\r\n                requiredGold = 10000; requiredWood = 400; requiredStone = 150;\r\n                x_scale = 4;\r\n            }\r\n            case 2 -> {\r\n                requiredGold = 20000; requiredWood = 500; requiredStone = 200;\r\n                y_scale = 3;\r\n                x_scale = 4;\r\n            }\r\n            default -> {\r\n                requiredGold = 4000; requiredWood = 300; requiredStone = 100;\r\n            }\r\n        }\r\n        for(int row = y; row < y + y_scale; row++) {\r\n            for(int col = x; col < x + x_scale; col++) {\r\n                Tile tile = App.currentGame.getTile(col, row);\r\n                if(!tile.isBuildable()) {\r\n                    buildable = false;\r\n                }\r\n            }\r\n        }\r\n\r\n        if(!buildable) {\r\n            return new Result(false, \"You can't build a coop in this Area.\");\r\n        }\r\n        else if(getCurrentPlayer().getGold() < requiredGold) {\r\n            return new Result(false, \"not enough gold to build.\");\r\n        }\r\n        else if(getCurrentPlayer().getWood() < requiredWood) {\r\n            return new Result(false, \"not enough wood to build.\");\r\n        }\r\n        else if(getCurrentPlayer().getStone() < requiredStone) {\r\n            return new Result(false, \"not enough stone to build.\");\r\n        }\r\n        else {\r\n            Coop coop = new Coop();\r\n            switch (type) {\r\n                case 1 -> coop.setBig();\r\n                case 2 -> coop.setDeluxe();\r\n            }\r\n            for(int row = y; row < y + y_scale; row++) {\r\n                for(int col = x; col < x + x_scale; col++) {\r\n                    Tile tile = App.currentGame.getTile(col, row);\r\n                    tile.setArea(coop);\r\n                }\r\n            }\r\n            getCurrentPlayer().subtractGold(requiredGold); getCurrentPlayer().subtractWood(requiredWood);\r\n            getCurrentPlayer().subtractStone(requiredStone);\r\n            return new Result(true, \"coop built successfully.\");\r\n        }\r\n    }\r\n    public static Result buyAnimal(String animalType, String name) {\r\n        Tile playerTile = App.currentGame.getTile(getCurrentPlayer().getPosition());\r\n        if(!(playerTile.getArea() instanceof MarnieRanch)) {\r\n            return new Result(false, \"you have to be inside marnie's ranch to run this command.\");\r\n        }\r\n\r\n        Animal animal = Animal.animalFactory(animalType, name);\r\n        if(animal == null) {\r\n            return new Result(false, \"invalid animal type!\");\r\n        }\r\n\r\n        for(Animal playerAnimal : getCurrentPlayer().getAnimals()) {\r\n            if(animal.getName().equals(playerAnimal.getName())) {\r\n                return new Result(false, \"each animal must have a unique name.\");\r\n            }\r\n        }\r\n\r\n        boolean placed = getCurrentPlayer().getFarm().place(animal);\r\n\r\n        if(placed) {\r\n            App.currentGame.getDateAndTime().addObserver(animal);\r\n            getCurrentPlayer().getAnimals().add(animal);\r\n            getCurrentPlayer().subtractGold(animal.getBasePrice());\r\n\r\n            return new Result(true, \"a new \" + animal.getAnimalTypeName() + \" named \" + animal.getName() + \" has been bought.\");\r\n        }\r\n        else {\r\n            return new Result(false, \"not enough/not the required level \" + animal.getMaintenance() + \" space to buy this animal.\");\r\n        }\r\n    }\r\n    public static Result petAnimal(String name) {\r\n        Animal animal = getCurrentPlayer().getAnimalByName(name);\r\n\r\n        if(animal == null) {\r\n            return new Result(false, \"animal name is not correct.\");\r\n        }\r\n        else if(!getCurrentPlayer().getPosition().isAdjacent(animal.getPosition())) {\r\n            return new Result(false, \"your position is not adjacent!\");\r\n        }\r\n\r\n        animal.pet();\r\n        return new Result(true, \"you pet \" + animal.getName() + \".\");\r\n    }\r\n    public static Result shepherdAnimal(String name, int x, int y) {\r\n        Animal animal = getCurrentPlayer().getAnimalByName(name);\r\n        if(animal == null) {\r\n            return new Result(false, \"animal name is not correct.\");\r\n        }\r\n\r\n        if(x >= Map.COLS || y >= Map.ROWS || x < 0 || y < 0) {\r\n            return new Result(false, \"invalid x or y!\");\r\n        }\r\n\r\n        Tile tile = App.currentGame.getTile(x, y);\r\n        if(!App.currentGame.getWeather().couldShepherdAnimals()) {\r\n            return new Result(false, \"you cannot shepherd animals in this weather!\");\r\n        }\r\n        else if(!tile.isEmpty()) {\r\n            return new Result(false, \"animal can't stand on a tile which is not empty.\");\r\n        }\r\n        else if(tile.getAreaType().equals(AreaType.LAKE) && !animal.getAnimalType().equals(AnimalType.DUCK)) {\r\n            return new Result(false, \"only ducks can swim.\");\r\n        }\r\n        else if(tile.getAreaType().equals(AreaType.BARN) && !animal.getMaintenance().equals(Maintenance.BARN)) {\r\n            return new Result(false, \"you can't put a \" + animal.getAnimalType() + \" in a barn.\");\r\n        }\r\n        else if(tile.getAreaType().equals(AreaType.COOP) && !animal.getMaintenance().equals(Maintenance.COOP)) {\r\n            return new Result(false, \"you can't put a \" + animal.getAnimalType() + \" in a coop.\");\r\n        }\r\n        else if(tile.getAreaType().equals(AreaType.FARM)) {\r\n            Farm farm = (Farm) tile.getArea();\r\n            if(!getCurrentPlayer().checkTerritory(farm)) {\r\n                return new Result(false, \"your animals cannot enter other players' territory.\");\r\n            }\r\n        }\r\n\r\n        Tile initialTile = App.currentGame.getTile(animal.getPosition());\r\n        animal.setPosition(tile.getPosition());\r\n\r\n        tile.put(animal);\r\n        initialTile.empty();\r\n\r\n        animal.feed();\r\n        return new Result(true, \"shepherd \" + animal.getName() + \" successfully.\");\r\n    }\r\n    public static Result feedHayAnimal(String name) {\r\n        Animal animal = getCurrentPlayer().getAnimalByName(name);\r\n        if(animal == null) {\r\n            return new Result(false, \"animal name is not correct.\");\r\n        }\r\n        else if(!getCurrentPlayer().getPosition().isAdjacent(animal.getPosition())) {\r\n            return new Result(false, \"your position is not adjacent!\");\r\n        }\r\n        GeneralItem Hay = (GeneralItem) getCurrentPlayer().getInventory().getItemByName(\"hay\");\r\n        if(Hay == null) {\r\n            return new Result(false, \"you don't have any hay.\");\r\n        }\r\n\r\n        animal.feed();\r\n        getCurrentPlayer().getInventory().removeCountFromBackPack(Hay, 1);\r\n        return new Result(true, animal.getName() + \" fed with hay.\");\r\n    }\r\n    public static Result showAnimalProducts() {\r\n        StringBuilder sb = new StringBuilder();\r\n        sb.append(\"Available animal products: \\n\");\r\n        for(Animal animal : getCurrentPlayer().getAnimals()) {\r\n            if(animal.getCurrentProduct() != null) {\r\n                sb.append(animal.getName()).append(\"    \");\r\n                sb.append(animal.getCurrentProduct().getName()).append(\"  quality: \");\r\n                sb.append(animal.getCurrentProduct().getProductQuality()).append(\"\\n\");\r\n            }\r\n        }\r\n\r\n        return new Result(true, sb.toString());\r\n    }\r\n    public static Result collectProduce(String name) {\r\n        Animal animal = getCurrentPlayer().getAnimalByName(name);\r\n        if(animal == null) {\r\n            return new Result(false, \"animal name is not correct.\");\r\n        }\r\n        else if(!getCurrentPlayer().getPosition().isAdjacent(animal.getPosition())) {\r\n            return new Result(false, \"your position is not adjacent!\");\r\n        }\r\n\r\n        else if(animal.getCurrentProduct() == null) {\r\n            return new Result(false, \"no product is available for this animal!\");\r\n        }\r\n        else if(animal.getAnimalType().equals(AnimalType.COW) || animal.getAnimalType().equals(AnimalType.GOAT)) {\r\n            return new Result(false, \"you have to use milk pail to collect these products.\");\r\n        }\r\n        else if(animal.getAnimalType().equals(AnimalType.SHEEP)) {\r\n            return new Result(false, \"you have to use shear to collect this product.\");\r\n        }\r\n        getCurrentPlayer().getInventory().addToBackPack(animal.getCurrentProduct(), 1);\r\n        animal.setCurrentProduct(null);\r\n\r\n        return new Result(true, \"product added to the inventory.\");\r\n    }\r\n    public static Result sellAnimal(String name) {\r\n        Animal animal = getCurrentPlayer().getAnimalByName(name);\r\n        if(animal == null) {\r\n            return new Result(false, \"animal name is not correct.\");\r\n        }\r\n        Tile animalTile = App.currentGame.getTile(animal.getPosition());\r\n\r\n        App.currentGame.getDateAndTime().removeObserver(animal);\r\n        getCurrentPlayer().getAnimals().remove(animal);\r\n        getCurrentPlayer().addGold(animal.getPrice());\r\n        animalTile.empty();\r\n\r\n        return new Result(true,  animal.getName() + \" has been sold with price \" + animal.getPrice());\r\n    }\r\n    public static Result fishing(String material) {\r\n        Lake lake = null;\r\n        for(int row = getCurrentPlayer().getPosition().y - 1; row <= getCurrentPlayer().getPosition().y + 1; row++) {\r\n            for(int col = getCurrentPlayer().getPosition().x - 1; col <= getCurrentPlayer().getPosition().x + 1; col++) {\r\n                if(App.currentGame.getTile(col, row).getArea() instanceof Lake) {\r\n                    lake = (Lake) App.currentGame.getTile(col, row).getArea();\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        if(lake == null) {\r\n            return new Result(false, \"You need to stand adjacent to lake.\");\r\n        }\r\n        else {\r\n            FishingPole fishingPole = getCurrentPlayer().getInventory().getFishingPole(material);\r\n\r\n            if(fishingPole == null) {\r\n                return new Result(false, \"fishing pole not found.\");\r\n            }\r\n\r\n            return new Result(true, fishingPole.use(lake, getCurrentPlayer(), App.currentGame.getWeather().getCurrentWeather()));\r\n        }\r\n    }\r\n\r\n    public static Result showStoreProducts() {\r\n        Tile playerTile = App.currentGame.getTile(getCurrentPlayer().getPosition());\r\n\r\n        if(!playerTile.getAreaType().equals(AreaType.STORE)) {\r\n            return new Result(false, \"You need to be in a store to run this command.\\n\");\r\n        }\r\n\r\n        Store store = (Store) playerTile.getArea();\r\n        if(!store.isOpen(App.currentGame.getDateAndTime().getHour())) {\r\n            return new Result(false, \"store is closed now!\\n\");\r\n        }\r\n\r\n        return new Result(true, \"All Items: \\n\" + store.displayItems());\r\n    }\r\n    public static Result showAvailableStoreProducts() {\r\n        Tile playerTile = App.currentGame.getTile(getCurrentPlayer().getPosition());\r\n\r\n        if(!playerTile.getAreaType().equals(AreaType.STORE)) {\r\n            return new Result(false, \"You need to be in a store to run this command.\\n\");\r\n        }\r\n\r\n        Store store = (Store) playerTile.getArea();\r\n        if(!store.isOpen(App.currentGame.getDateAndTime().getHour())) {\r\n            return new Result(false, \"store is closed now!\\n\");\r\n        }\r\n\r\n        return new Result(true, \"All Available Items Fot You: \\n\" + store.displayAvailableItems());\r\n    }\r\n    public static Result purchaseProduct(String productName, int count) {\r\n        Tile playerTile = App.currentGame.getTile(getCurrentPlayer().getPosition());\r\n\r\n        if(!playerTile.getAreaType().equals(AreaType.STORE)) {\r\n            return new Result(false, \"You need to be in a store to run this command.\");\r\n        }\r\n\r\n        Store store = (Store) playerTile.getArea();\r\n        if(!store.isOpen(App.currentGame.getDateAndTime().getHour())) {\r\n            return new Result(false, \"store is closed now!\");\r\n        }\r\n\r\n        if(!store.checkAvailable(productName)) {\r\n            return new Result(false, \"product is not available!\");\r\n        }\r\n        else if(!store.checkAmount(productName, count)) {\r\n            return new Result(false, \"daily limit exceeded!\");\r\n        }\r\n\r\n        return new Result(true, store.sell(getCurrentPlayer(), productName, count));\r\n    }\r\n    public static Result sellProduct(String productName, int count) {\r\n        BackPackable item = getCurrentPlayer().getInventory().getItemByName(productName);\r\n        int availableCount = getCurrentPlayer().getInventory().getItemCount(productName);\r\n\r\n        if(item == null) {\r\n            return new Result(false, \"You don't have that item.\");\r\n        }\r\n        else if(count > availableCount) {\r\n            return new Result(false, \"You only have \" + availableCount + \" \" + item.getName() + \" in your inventory.\");\r\n        }\r\n        else if(item.getPrice() == 0) {\r\n            return new Result(false, \"this item is not sellable.\");\r\n        }\r\n\r\n        if(availableCount == -1) {\r\n            getCurrentPlayer().addGold(availableCount * item.getPrice());\r\n            getCurrentPlayer().getInventory().removeFromBackPack(item);\r\n            return new Result(true, \"Sold all of your \" + item.getName() + \". You earned \" + availableCount * item.getPrice() + \"gold.\");\r\n        }\r\n        else {\r\n            getCurrentPlayer().addGold(count * item.getPrice());\r\n            getCurrentPlayer().getInventory().removeCountFromBackPack(item, count);\r\n            return new Result(true, \"Sold \" + count + \" of your \" + item.getName() + \". You earned \" + count * item.getPrice() + \"gold.\");\r\n        }\r\n    }\r\n\r\n    public static Result showFriendships() {\r\n        StringBuilder sb = new StringBuilder();\r\n        for (PlayerFriendship friendship : App.currentGame.getFriendships()) {\r\n            if(friendship.getPlayer1().equals(getCurrentPlayer())) {\r\n                sb.append(\"with \").append(friendship.getPlayer2().getUsername());\r\n                sb.append(\" xp: \").append(friendship.getXP()).append(\" level: \").append(friendship.getLevel()).append(\"\\n\");\r\n            }\r\n            else if(friendship.getPlayer2().equals(getCurrentPlayer())) {\r\n                sb.append(\"with \").append(friendship.getPlayer1().getUsername());\r\n                sb.append(\" xp: \").append(friendship.getXP()).append(\" level: \").append(friendship.getLevel()).append(\"\\n\");\r\n            }\r\n        }\r\n\r\n        return new Result(true, sb.toString());\r\n    }\r\n    public static Result talkFriendship(String username, String message) {\r\n        Player receiver = App.currentGame.getPlayerByUsername(username);\r\n        if(receiver == null) {\r\n            return new Result(false, \"invalid player username!\");\r\n        }\r\n        if(getCurrentPlayer().equals(receiver)) {\r\n            return new Result(false, \"you can't message yourself!\");\r\n        }\r\n\r\n        Tile playerTile = App.currentGame.getTile(getCurrentPlayer().getPosition());\r\n        Tile recieverTile = App.currentGame.getTile(receiver.getPosition());\r\n        if(!playerTile.isAdjacent(recieverTile)) {\r\n            return new Result(false, \"you have to be next to a player to talk to them.\");\r\n        }\r\n\r\n        PlayerFriendship friendship = App.currentGame.getFriendshipByPlayers(getCurrentPlayer(), receiver);\r\n        friendship.talk(getCurrentPlayer(), message);\r\n\r\n        return new Result(true, \"your message sent successfully.\");\r\n    }\r\n    public static Result talkHistory(String username) {\r\n        Player target = App.currentGame.getPlayerByUsername(username);\r\n        if(target == null) {\r\n            return new Result(false, \"invalid player username!\\n\");\r\n        }\r\n        if(getCurrentPlayer().equals(target)) {\r\n            return new Result(false, \"you don't have any messages with yourself!\\n\");\r\n        }\r\n\r\n        PlayerFriendship friendship = App.currentGame.getFriendshipByPlayers(getCurrentPlayer(), target);\r\n        StringBuilder sb = new StringBuilder();\r\n\r\n        for(PlayerFriendship.Message message : friendship.getMessages()) {\r\n            if(message.sender().equals(getCurrentPlayer())) {\r\n                sb.append(\"from: you    message: \\\"\").append(message.message()).append(\"\\\"\\n\");\r\n            }\r\n            else {\r\n                sb.append(\"from: \").append(message.sender().getUsername()).append(\"    message: \\\"\").append(message.message()).append(\"\\\"\\n\");\r\n            }\r\n        }\r\n\r\n        return new Result(true, sb.toString());\r\n    }\r\n    public static Result gift(String username, String itemName, int amount) {\r\n        Player receiver = App.currentGame.getPlayerByUsername(username);\r\n        if(receiver == null) {\r\n            return new Result(false, \"invalid player username!\");\r\n        }\r\n        if(getCurrentPlayer().equals(receiver)) {\r\n            return new Result(false, \"you can't gift yourself!\");\r\n        }\r\n\r\n        BackPackable item = getCurrentPlayer().getInventory().getItemByName(itemName);\r\n        int availableCount = getCurrentPlayer().getInventory().getItemCount(itemName);\r\n        if(item == null) {\r\n            return new Result(false, \"you don't have that item.\");\r\n        }\r\n        if(amount > availableCount) {\r\n            return new Result(false, \"you don't have enough amount of that item.\");\r\n        }\r\n\r\n        Player sender = getCurrentPlayer();\r\n        PlayerFriendship friendship = App.currentGame.getFriendshipByPlayers(getCurrentPlayer(), receiver);\r\n        if(friendship.getLevel() < 1) {\r\n            return new Result(false, \"at least 1 level of friendship required!\");\r\n        }\r\n        friendship.gift(sender, item);\r\n        receiver.addToBackPack(item, amount);\r\n        sender.getInventory().removeCountFromBackPack(item, amount);\r\n\r\n        return new Result(true, \"you gave \"  + amount + \" \" + itemName + \" to \" + receiver.getUsername() + \"!\");\r\n    }\r\n    public static Result giftList(String username) {\r\n        Player sender = App.currentGame.getPlayerByUsername(username);\r\n        if(sender == null) {\r\n            return new Result(false, \"invalid player username!\");\r\n        }\r\n        if(getCurrentPlayer().equals(sender)) {\r\n            return new Result(false, \"Oops!\");\r\n        }\r\n\r\n        PlayerFriendship friendship = App.currentGame.getFriendshipByPlayers(sender, getCurrentPlayer());\r\n        StringBuilder sb = new StringBuilder();\r\n        sb.append(\"gift list: \\n\");\r\n        if(friendship.getGifts(sender) != null) {\r\n            for (int i = 0; i < friendship.getGifts(sender).size(); i++) {\r\n                PlayerFriendship.Gift gift = friendship.getGifts(sender).get(i);\r\n                sb.append((i + 1)).append(\".  \").append(gift.getItem().getName());\r\n                if (gift.getRate() == 0) {\r\n                    sb.append(\"    unrated\\n\");\r\n                } else {\r\n                    sb.append(\"    rate: \").append(gift.getRate()).append(\"/5\\n\");\r\n                }\r\n            }\r\n        }\r\n\r\n        return new Result(true, sb.toString());\r\n    }\r\n    public static Result rateGift(String username, int giftNumber, int rate) {\r\n        Player sender = App.currentGame.getPlayerByUsername(username);\r\n        if(sender == null) {\r\n            return new Result(false, \"invalid player username!\");\r\n        }\r\n        if(getCurrentPlayer().equals(sender)) {\r\n            return new Result(false, \"Oops!\");\r\n        }\r\n\r\n        PlayerFriendship friendship = App.currentGame.getFriendshipByPlayers(sender, getCurrentPlayer());\r\n        if(giftNumber <= 0 || giftNumber > friendship.getGifts(sender).size()) {\r\n            return new Result(false, \"invalid gift number!\");\r\n        }\r\n        else if(!(1 <= rate && rate <= 5)) {\r\n            return new Result(false, \"choose between 1 to 5.\");\r\n        }\r\n        else if(friendship.getGifts(sender).get(giftNumber - 1).getRate() != 0) {\r\n            return new Result(false, \"you can rate each gift once.\");\r\n        }\r\n\r\n        friendship.getGifts(sender).get(giftNumber - 1).setRate(rate);\r\n        friendship.rateGift(rate);\r\n        return new Result(true, \"you rated \" + friendship.getGifts(sender).get(giftNumber - 1).getItem().getName()\r\n                + \" with \" + rate + \"/5\");\r\n    }\r\n    public static Result giftHistory(String username) {\r\n        Player sender = App.currentGame.getPlayerByUsername(username);\r\n        if(sender == null) {\r\n            return new Result(false, \"invalid player username!\");\r\n        }\r\n        if(getCurrentPlayer().equals(sender)) {\r\n            return new Result(false, \"Oops!\");\r\n        }\r\n\r\n        PlayerFriendship friendship = App.currentGame.getFriendshipByPlayers(sender, getCurrentPlayer());\r\n        StringBuilder sb = new StringBuilder();\r\n        if(friendship.getGifts(sender) != null) {\r\n            sb.append(\"gifts from \").append(sender.getUsername()).append(\": \\n\");\r\n            for(PlayerFriendship.Gift gift : friendship.getGifts(sender)) {\r\n                sb.append(gift.getItem().getName());\r\n                if(gift.getRate() == 0) {\r\n                    sb.append(\"    unrated\\n\");\r\n                }\r\n                else {\r\n                    sb.append(\"    rate: \").append(gift.getRate()).append(\"/5\\n\");\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            sb.append(\"no gifts from \").append(sender.getUsername()).append(\"!\\n\");\r\n        }\r\n\r\n        if(friendship.getGifts(getCurrentPlayer()) != null) {\r\n            sb.append(\"gifts from you: \\n\");\r\n            for(PlayerFriendship.Gift gift : friendship.getGifts(getCurrentPlayer())) {\r\n                sb.append(gift.getItem().getName());\r\n                if(gift.getRate() == 0) {\r\n                    sb.append(\"    unrated\\n\");\r\n                }\r\n                else {\r\n                    sb.append(\"    rate: \").append(gift.getRate()).append(\"/5\\n\");\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            sb.append(\"no gifts from you!\\n\");\r\n        }\r\n\r\n        return new Result(true, sb.toString());\r\n    }\r\n    public static Result hug(String username) {\r\n        Player receiver = App.currentGame.getPlayerByUsername(username);\r\n        if(receiver == null) {\r\n            return new Result(false, \"invalid player username!\");\r\n        }\r\n        if(getCurrentPlayer().equals(receiver)) {\r\n            return new Result(false, \"you can't hug yourself!\");\r\n        }\r\n\r\n        Tile playerTile = App.currentGame.getTile(getCurrentPlayer().getPosition());\r\n        Tile recieverTile = App.currentGame.getTile(receiver.getPosition());\r\n        if(!playerTile.isAdjacent(recieverTile)) {\r\n            return new Result(false, \"you have to be next to a player to hug them.\");\r\n        }\r\n\r\n        PlayerFriendship friendship = App.currentGame.getFriendshipByPlayers(getCurrentPlayer(), receiver);\r\n        if(friendship.getLevel() < 2) {\r\n            return new Result(false, \"at least 2 levels of friendship required!\");\r\n        }\r\n\r\n        friendship.hug();\r\n        return new Result(true, \"you hugged \"  + receiver.getUsername() + \"!\");\r\n    }\r\n    public static Result flower(String username) {\r\n        Player receiver = App.currentGame.getPlayerByUsername(username);\r\n        if(receiver == null) {\r\n            return new Result(false, \"invalid player username!\");\r\n        }\r\n        if(getCurrentPlayer().equals(receiver)) {\r\n            return new Result(false, \"you can't give flower to yourself!\");\r\n        }\r\n\r\n        Tile playerTile = App.currentGame.getTile(getCurrentPlayer().getPosition());\r\n        Tile recieverTile = App.currentGame.getTile(receiver.getPosition());\r\n        if(!playerTile.isAdjacent(recieverTile)) {\r\n            return new Result(false, \"you have to be next to a player to give flower to them.\");\r\n        }\r\n\r\n        PlayerFriendship friendship = App.currentGame.getFriendshipByPlayers(getCurrentPlayer(), receiver);\r\n        if(friendship.getLevel() < 2) {\r\n            return new Result(false, \"at least 2 levels of friendship required!\");\r\n        }\r\n\r\n        friendship.flower();\r\n        return new Result(true, \"you gave flower to \"  + receiver.getUsername() + \". friendship upgraded to level 3.\");\r\n    }\r\n    public static Result marry(String username) {\r\n        Player target = App.currentGame.getPlayerByUsername(username);\r\n        if(target == null) {\r\n            return new Result(false, \"invalid player username!\\n\");\r\n        }\r\n\r\n        Tile playerTile = App.currentGame.getTile(getCurrentPlayer().getPosition());\r\n        Tile targetTile = App.currentGame.getTile(target.getPosition());\r\n        if(!playerTile.isAdjacent(targetTile)) {\r\n            return new Result(false, \"you have to be next to a player to ask for marriage!\");\r\n        }\r\n\r\n        if(getCurrentPlayer().getGender().equals(Gender.GIRL)) {\r\n            return new Result(false, \"you have to be a boy to ask for marriage!\");\r\n        }\r\n        else if(target.getGender().equals(Gender.BOY)) {\r\n            return new Result(false, \"Why are you gay?\");\r\n        }\r\n        PlayerFriendship friendship = App.currentGame.getFriendshipByPlayers(getCurrentPlayer(), target);\r\n        if(friendship.getLevel() < 3) {\r\n            return new Result(false, \"at least 3 levels of friendship required!\");\r\n        }\r\n\r\n        target.addMessage(new PlayerFriendship.Message(getCurrentPlayer(), \"Will you Marry me?\"));\r\n        return new Result(true, \"You're proposal has been sent to \" + target.getUsername() + \".\");\r\n    }\r\n    public static Result respondMarriage(String username, String answer) {\r\n        Player husband = App.currentGame.getPlayerByUsername(username);\r\n        if(husband == null) {\r\n            return new Result(false, \"invalid player username!\\n\");\r\n        }\r\n\r\n        PlayerFriendship friendship = App.currentGame.getFriendshipByPlayers(husband, getCurrentPlayer());\r\n        if(answer.equals(\"-accept\")) {\r\n            friendship.marry();\r\n            return new Result(true, \"CONGRATS ON YOUR WEDDING!\");\r\n        }\r\n        else {\r\n            friendship.reject();\r\n            return new Result(true, \"you broke his heart :(\");\r\n        }\r\n    }\r\n\r\n    public static Result showCropInfo(String name) {\r\n        Crops crop = Crops.getByName(name);\r\n        if(crop != null)\r\n            return new Result(true,crop.toString());\r\n        TreeType tree = TreeType.getTreeTypeByName(name);\r\n        if(tree != null)\r\n            return new Result(true,tree.toString());\r\n        return new Result(false, \"No such crop '\" + name + \"'.\");\r\n    }\r\n\r\n    public static Result plant(String seedName, int dx, int dy) {\r\n        Game current = App.currentGame;\r\n        int nextX = current.getCurrentPlayer().getPosition().x + dx;\r\n        int nextY = current.getCurrentPlayer().getPosition().y + dy;\r\n\r\n        if(dx==0 && dy==0) {return new Result(false,\"this is not a valid direction!\");}\r\n\r\n        if(nextX>Map.COLS||nextY>Map.ROWS||nextX<0||nextY<0) {\r\n            return new Result(false,\"you are going out of bounds!\");}\r\n\r\n        Tile goalTile = App.currentGame.getMap().getTile(new Position(nextX,nextY));\r\n\r\n        if(!goalTile.getObjectInTile().getClass().equals(PloughedPlace.class))\r\n            return new Result(false,\"you should plough the tile first!\");\r\n\r\n        PloughedPlace tobeSeeded = (PloughedPlace) goalTile.getObjectInTile();\r\n\r\n        if(CropSeeds.getByName(seedName) != null){\r\n            return tobeSeeded.seed(CropSeeds.getByName(seedName));\r\n        }\r\n\r\n        if(SeedType.getByName(seedName) != null){\r\n            return tobeSeeded.seed(SeedType.getByName(seedName));\r\n        }\r\n\r\n        return new Result(false,\"no seed found with this name\");\r\n    }\r\n\r\n    public static Result fertilize(String fertilizerName, Position position) {\r\n        Tile goalTile = App.currentGame.getTile(position.x,position.y);\r\n        if(goalTile.getObjectInTile() == null) return new Result(false,\"goal tile is empty\");\r\n        if(!goalTile.getObjectInTile().getClass().equals(PloughedPlace.class))\r\n            return new Result(false,\"goal tile is not a PloughedPlace\");\r\n        PloughedPlace goalPlace = (PloughedPlace) goalTile.getObjectInTile();\r\n        if(fertilizerName.equals(\"water fertilizer\")){\r\n            return goalPlace.getCurrentState().fertilize(Fertilizer.Water);\r\n        }\r\n        else if(fertilizerName.equals(\"growth fertilizer\")){\r\n            return goalPlace.getCurrentState().fertilize(Fertilizer.Growth);\r\n        }\r\n        else {\r\n            return new Result(false,\"fertilizer not found\");\r\n        }\r\n    }\r\n\r\n    public static Result plantMixedSeed(int dx,int dy) {\r\n\r\n        CropSeeds randomSeed = MixedSeedCrop.getRandomSeed(App.currentGame.getDateAndTime().getSeason());\r\n\r\n        return plant(randomSeed.name(), dx, dy); // if incorrect errors are shown you should check plant method\r\n    }\r\n\r\n\r\n    public static Result showPlant(int x, int y) {\r\n        Position position = new Position(x, y);\r\n        if(position.outOfBounds()) {\r\n            return new Result(false,\"this position is out of bounds!\");\r\n        }\r\n        Tile tile = App.currentGame.getMap().getTile(position);\r\n        if(tile.getObjectInTile() == null)\r\n            return new Result(false,\"this tile is empty\");\r\n        if(!(tile.getObjectInTile() instanceof PloughedPlace))\r\n            return new Result(false,\"this is not a ploughed tile!\");\r\n        PloughedPlace toBeShown = (PloughedPlace) tile.getObjectInTile();\r\n\r\n        if(!toBeShown.hasTreeOrCrop())\r\n            return new Result(false,\"there is not any plant here!\");\r\n        return new Result(true,toBeShown.printInfo());\r\n\r\n    }\r\n\r\n    public static Result placeItem(String itemName, Position position) {\r\n        return null;\r\n    }\r\n\r\n\r\n    public static Result askMarriage(String username, String ringName) {\r\n        return null;\r\n    }\r\n\r\n    public static void AddRecipe(String recipeName) {\r\n        recipeName = recipeName.trim().toLowerCase().replaceAll(\"_\", \" \");\r\n        Player player = App.currentGame.getCurrentPlayer();\r\n        for(FoodType foodType : FoodType.values()) {\r\n            if(foodType.getName().equals(recipeName)) {\r\n                player.getAvailableFoods().add(new Food(foodType));\r\n                System.out.println(\"recipe add to inventory:\" + foodType.getName());\r\n                return;\r\n            }\r\n        }\r\n        for (CraftItemType craftItem : CraftItemType.values()) {\r\n            if (craftItem.getName().equals(recipeName)){\r\n                player.getAvailableCrafts().add(new CraftItem(craftItem));\r\n                System.out.println(\"recipe add to inventory:\" + craftItem.getName());\r\n                return;\r\n            }\r\n        }\r\n        System.out.println(\"invalid recipe type\");\r\n    }\r\n    public static Result meetNPC(String npcName) {\r\n        Player player = App.currentGame.getCurrentPlayer();\r\n        NPC npc = DefaultNPCs.getInstance().getNPCByName(npcName);\r\n        if(npc == null){\r\n            return new Result(false,\"invalid name for npc\");\r\n        }\r\n        return new Result(true,npc.meet(player));\r\n    }\r\n\r\n    public static Result giftNPC(String NPCName, String itemName) {\r\n        Player player = App.currentGame.getCurrentPlayer();\r\n        NPC npc = DefaultNPCs.getInstance().getNPCByName(NPCName);\r\n        if(npc == null){\r\n            return new Result(false,\"invalid name for npc\");\r\n        }\r\n        if(!player.getPosition().isAdjacent(npc.getHomeLocation().getPosition())){\r\n            return new Result(false,\"you are not adjacent with this npc\");\r\n        }\r\n        return new Result(true,npc.gift(player,getCurrentPlayer().getInventory().getItemByName(itemName)));\r\n    }\r\n\r\n    public static Result friendShipNPCList(){\r\n        Player player = getCurrentPlayer();\r\n        StringBuilder answer = new StringBuilder();\r\n        for(NPC npc : DefaultNPCs.getInstance().defaultOnes().values()){\r\n            if(npc.getFriendships().getOrDefault(player,null)!=null){\r\n                NPCFriendShip friendship = npc.getFriendships().get(player);\r\n                answer.append(\"npc name: \"+npc.getName()+\"\\n\"\r\n                        +\"your points: \"+friendship.getPoints()+\"\\n\"+\r\n                        \"your friendship level: \"+friendship.getLevel()+\"\\n\"+\r\n                        \"--------------------------------------\\n\");\r\n            }\r\n        }\r\n        if(answer.isEmpty()) return new Result(false,\"you have not started any relationship \\n\");\r\n        return new Result(true,answer.toString());\r\n    }\r\n\r\n    public static Result questLists() {\r\n        Player player = App.currentGame.getCurrentPlayer();\r\n        StringBuilder answer = new StringBuilder();\r\n        List<Quest> quests = new ArrayList<>();\r\n        int number = 1;\r\n        for (NPC npc : DefaultNPCs.getInstance().defaultOnes().values()) {\r\n            NPCFriendShip fs = npc.getFriendships().get(player);\r\n            if (fs != null) {\r\n                for (Quest q : fs.getPlayerQuests().keySet()) {\r\n                    if (fs.getPlayerQuests().get(q)) {\r\n                        answer.append(q.getInfo(number));\r\n                        number ++;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return new Result(true, answer.toString());\r\n    }\r\n\r\n    public static Result finishQuest(int index) {\r\n        Player player = App.currentGame.getCurrentPlayer();\r\n        ArrayList<Quest> quests = new ArrayList<>();\r\n        ArrayList<NPCFriendShip> friendships = new ArrayList<>();\r\n        for(NPC npc : DefaultNPCs.getInstance().defaultOnes().values()){\r\n            NPCFriendShip fs = npc.getFriendships().get(player);\r\n            if (fs != null) {\r\n                for (Quest q : fs.getPlayerQuests().keySet()) {\r\n                    if (fs.getPlayerQuests().get(q)) {\r\n                        quests.add(q);\r\n                        friendships.add(fs);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return friendships.get(index-1).finishQuest(quests.get(index-1).getRequest());\r\n    }\r\n    public static void ShowRecipe() {\r\n        Player player = getCurrentPlayer();\r\n        for (CraftItem availableCraft : player.getAvailableCrafts()) {\r\n            System.out.println(availableCraft.getCraftItemType().recipe);\r\n        }\r\n    }\r\n    public static Result crafting(String craftingName) {\r\n        Player player = App.currentGame.getCurrentPlayer();\r\n        craftingName = craftingName.trim().toLowerCase().replaceAll(\"_\", \" \");\r\n        if (player.getInventory().getItems().size()==player.getInventory().getCapacity()){\r\n            return new Result(false , \"your inventory is full!\");\r\n        }\r\n        CraftItem temp = null;\r\n        for (CraftItem availableCraft : player.getAvailableCrafts()) {\r\n            if(availableCraft.getName().equals(craftingName)){\r\n                temp = availableCraft;\r\n            }\r\n        }\r\n        if(temp == null) {\r\n            return new Result(false, \"You can't craft this item\");\r\n        }\r\n        for (BackPackable backPackable : temp.getCraftItemType().ingredients.keySet()) {\r\n            boolean find = false;\r\n            for (BackPackable packable : player.getInventory().getItems().keySet()) {\r\n                if(packable.getName().equals(backPackable.getName())){\r\n                    find = true;\r\n                    int num = player.getInventory().getItemCount(packable.getName());\r\n                    int number = temp.getCraftItemType().ingredients.get(backPackable);\r\n                    if(number > num)\r\n                        return new Result(false , \"You don't have enough material\");\r\n                }\r\n                break;\r\n            }\r\n            if(!find) {\r\n                return new Result(false , \"You don't have enough material\");\r\n            }\r\n        }\r\n        for (BackPackable backPackable : player.getInventory().getItems().keySet()) {\r\n            for (BackPackable packable : temp.getCraftItemType().ingredients.keySet()) {\r\n                if(packable.getName().equals(backPackable.getName())){\r\n                    int num = player.getInventory().getItemCount(packable.getName());\r\n                    int number = temp.getCraftItemType().ingredients.get(backPackable);\r\n                    if(number < num)\r\n                        player.getInventory().removeCountFromBackPack(backPackable , number);\r\n                }\r\n            }\r\n        }\r\n        player.getInventory().getItems().put(temp , player.getInventory().getItems().getOrDefault(temp , 1));\r\n        player.subtractEnergy(2);\r\n        return new Result(true,\"craft make successfully\");\r\n    }\r\n    public static Result PlaceItem(String itemName, int x , int y) {\r\n        itemName = itemName.trim().toLowerCase().replaceAll(\"_\",\" \");\r\n        BackPackable item = getCurrentPlayer().getInventory().getItemByName(itemName);\r\n        if(item == null){\r\n            return new Result(false , \"you dont have this item\");\r\n        }\r\n        Tile tile = App.currentGame.getTile(getCurrentPlayer().getPosition().x + x, getCurrentPlayer().getPosition().y + y);\r\n        if(tile.isEmpty() && (tile.getArea() instanceof Farm)) {\r\n            tile.setObjectInTile(item);\r\n            getCurrentPlayer().getInventory().removeCountFromBackPack(item, 1);\r\n            return new Result(true , \"Item placed successfully\");\r\n        }\r\n\r\n        return new Result(false , \"You can't place item in this tile\");\r\n    }\r\n    public static Result UseArtisan(String artisanName , String itemName) {\r\n        artisanName = artisanName.trim().toLowerCase().replaceAll(\"_\",\" \");\r\n        itemName = itemName.trim().toLowerCase().replaceAll(\"_\",\" \");\r\n        Player player = App.currentGame.getCurrentPlayer();\r\n        CraftItem artisan = null;\r\n        for (BackPackable backPackable : player.getInventory().getItems().keySet()) {\r\n            if (backPackable.getName().equals(artisanName)) {\r\n                artisan = (CraftItem) backPackable;\r\n                break;\r\n            }\r\n        }\r\n        if (artisan == null) {\r\n            return new Result(false,\"artisan item not available\");\r\n        }\r\n        ArtisanItem artisanItem = null;\r\n        for(TreeType treeType: TreeType.values()) {\r\n            FruitType fruitType = treeType.getFruitType();\r\n            if (fruitType.getName().equals(itemName)) {\r\n                if(artisanName.equals(\"keg\")){\r\n                    artisanItem = new ArtisanItem(ArtisanItemType.WINE);\r\n                    artisanItem.getArtisanItemType().setMoney(treeType.getBasePrice()*3);\r\n                    artisanItem.getArtisanItemType().setEnergy(treeType.getEnergy()*175/100);\r\n                }\r\n                if(artisanName.equals(\"preserves jar\")){\r\n                    artisanItem = new ArtisanItem(ArtisanItemType.JELLY);\r\n                    artisanItem.getArtisanItemType().setMoney(treeType.getBasePrice()*2 + 50);\r\n                    artisanItem.getArtisanItemType().setEnergy(treeType.energy*2);\r\n                }\r\n                if(artisanName.equals(\"dehydrator\")){\r\n                    artisanItem = new ArtisanItem(ArtisanItemType.DRIED_FRUIT);\r\n                    artisanItem.getArtisanItemType().setMoney(treeType.getBasePrice()*75/10 + 25);\r\n                }\r\n                break;\r\n            }\r\n        }\r\n        for(Crops crop: Crops.values()) {\r\n            if (crop.getName().equals(artisanName)) {\r\n                artisanItem = new ArtisanItem(ArtisanItemType.JUICE);\r\n                artisanItem.getArtisanItemType().setMoney(crop.getBasePrice()*225/100);\r\n                artisanItem.getArtisanItemType().setEnergy(2*crop.getEnergy());\r\n                break;\r\n            }\r\n        }\r\n        for(FishType fish: FishType.values()) {\r\n            if(fish.getName().equals(artisanName)) {\r\n                artisanItem = new ArtisanItem(ArtisanItemType.SMOKED_FISH);\r\n                artisanItem.getArtisanItemType().setMoney(fish.basePrice*2);\r\n            }\r\n        }\r\n        if(artisanItem == null) {\r\n            switch (itemName) {\r\n                case \"\":\r\n                    if(artisan.getName().equals(\"bee house\"))\r\n                        artisanItem = new ArtisanItem(ArtisanItemType.HONEY);\r\n                    break;\r\n                case \"milk\":\r\n                    if(artisan.getName().equals(\"cheese press\"))\r\n                        artisanItem = new ArtisanItem(ArtisanItemType.CHEESE_MILK);\r\n                    break;\r\n                case \"large milk\":\r\n                    if(artisan.getName().equals(\"cheese press\"))\r\n                        artisanItem = new ArtisanItem(ArtisanItemType.CHEESE_LARGE_MILK);\r\n                    break;\r\n                case \"goat milk\":\r\n                    if(artisan.getName().equals(\"cheese press\"))\r\n                        artisanItem = new ArtisanItem(ArtisanItemType.GOAT_CHEESE_MILK);\r\n                    break;\r\n                case \"large goat milk\":\r\n                    if(artisan.getName().equals(\"cheese press\"))\r\n                        artisanItem = new ArtisanItem(ArtisanItemType.GOAT_CHEESE_LARGE_MILK);\r\n                    break;\r\n                case \"wheat\" :\r\n                    if(artisan.getName().equals(\"keg\"))\r\n                        artisanItem = new ArtisanItem(ArtisanItemType.BEER);\r\n                    break;\r\n                case \"rice\" :\r\n                    if(artisan.getName().equals(\"keg\"))\r\n                        artisanItem = new ArtisanItem(ArtisanItemType.VINEGAR);\r\n                    break;\r\n                case \"coffee been\" :\r\n                    if(artisan.getName().equals(\"keg\"))\r\n                        artisanItem = new ArtisanItem(ArtisanItemType.COFFEE);\r\n                    break;\r\n                case \"juice\" :\r\n\r\n                    if(artisan.getName().equals(\"keg\"))// must change\r\n                        artisanItem = new ArtisanItem(ArtisanItemType.JUICE);\r\n                    break;\r\n                case \"honey\" :\r\n                    if(artisan.getName().equals(\"keg\"))\r\n                        artisanItem = new ArtisanItem(ArtisanItemType.MEAD);\r\n                    break;\r\n                case \"hops\" :\r\n                    if(artisan.getName().equals(\"keg\"))\r\n                        artisanItem = new ArtisanItem(ArtisanItemType.PALE_ALE);\r\n                    break;\r\n                case \"common mushroom\" :\r\n                    if(artisan.getName().equals(\"dehydrator\"))\r\n                        artisanItem = new ArtisanItem(ArtisanItemType.DRIED_COMMON_MUSHROOM);\r\n                    break;\r\n                case \"red mushroom\" :\r\n                    if(artisan.getName().equals(\"dehydrator\"))\r\n                        artisanItem = new ArtisanItem(ArtisanItemType.DRIED_RED_MUSHROOM);\r\n                    break;\r\n                case \"purple mushroom\" :\r\n                    if(artisan.getName().equals(\"dehydrator\"))\r\n                        artisanItem = new ArtisanItem(ArtisanItemType.DRIED_PURPLE_MUSHROOM);\r\n                    break;\r\n                case \"grapes\" :\r\n                    if(artisan.getName().equals(\"dehydrator\"))\r\n                        artisanItem = new ArtisanItem(ArtisanItemType.RAISINS);\r\n                    break;\r\n                case \"coal\":\r\n                    if(artisan.getName().equals(\"charcoal klin\"))\r\n                        artisanItem = new ArtisanItem(ArtisanItemType.COAL);\r\n                    break;\r\n                case \"rabbit wool\":\r\n                    if(artisan.getName().equals(\"loom\"))\r\n                        artisanItem = new ArtisanItem(ArtisanItemType.CLOTH_RABBIT);\r\n                    break;\r\n                case \"sheep wool\":\r\n                    if(artisan.getName().equals(\"loom\"))\r\n                        artisanItem = new ArtisanItem(ArtisanItemType.CLOTH_SHEEP);\r\n                    break;\r\n                case \"egg\" :\r\n                    if(artisan.getName().equals(\"mayonnaise machine\"))\r\n                        artisanItem = new ArtisanItem(ArtisanItemType.MAYONNAISE_EGG);\r\n                    break;\r\n                case \"large egg\" :\r\n                    if(artisan.getName().equals(\"mayonnaise machine\"))\r\n                        artisanItem = new ArtisanItem(ArtisanItemType.MAYONNAISE_LARGE_EGG);\r\n                    break;\r\n                case \"dinosaur egg\" :\r\n                    if(artisan.getName().equals(\"mayonnaise machine\"))\r\n                        artisanItem = new ArtisanItem(ArtisanItemType.DINOSAUR_MAYONNAISE);\r\n                    break;\r\n                case \"duck egg\" :\r\n                    if(artisan.getName().equals(\"mayonnaise machine\"))\r\n                        artisanItem = new ArtisanItem(ArtisanItemType.DUCK_MAYONNAISE);\r\n                    break;\r\n                case \"sunflower\" :\r\n                    if(artisan.getName().equals(\"oil maker\"))\r\n                        artisanItem = new ArtisanItem(ArtisanItemType.OIL_SUNFLOWER);\r\n                    break;\r\n                case \"sunflower seed\" :\r\n                    if(artisan.getName().equals(\"oil maker\"))\r\n                        artisanItem = new ArtisanItem(ArtisanItemType.OIL_SUNFLOWER_SEED);\r\n                    break;\r\n                case \"corn\" :\r\n                    if(artisan.getName().equals(\"oil maker\"))\r\n                        artisanItem = new ArtisanItem(ArtisanItemType.OIL_CORN);\r\n                    break;\r\n                case \"truffle\"   :\r\n                    if(artisan.getName().equals(\"oil maker\"))\r\n                        artisanItem = new ArtisanItem(ArtisanItemType.TRUFFLE_OIL);\r\n                    break;\r\n                case \"pickles\":\r\n                    if(artisan.getName().equals(\"preserves jar\"))\r\n                        artisanItem = new ArtisanItem(ArtisanItemType.PICKLES);\r\n                    break;\r\n                case \"smoked fish\":\r\n                    //must be fixed\r\n                    if(artisan.getName().equals(\"fish smoker\"))\r\n                        artisanItem = new ArtisanItem(ArtisanItemType.SMOKED_FISH);\r\n                    break;\r\n                case \"furnace\":\r\n                    artisanItem = new ArtisanItem(ArtisanItemType.METAL_BAR);\r\n                    break;\r\n                default:\r\n                    return new Result(false , \"invalid item type\");\r\n            }\r\n        }\r\n        if (artisanItem == null)\r\n            return new Result(false,\"You cant make this item whit this material\");\r\n        if (artisanItem.getName().equals(\"honey\")){\r\n            Game game = App.currentGame;\r\n            artisanItem.setHour(game.getDateAndTime().getHour());\r\n            artisanItem.setDay(game.getDateAndTime().getDay());\r\n            player.getArtisanItems().add(artisanItem);\r\n            return new Result(true , \"artisan item made successfully\");\r\n        }\r\n        for (BackPackable backPackable : player.getInventory().getItems().keySet()) {\r\n                if(artisanItem.getArtisanItemType().ingredients.getName().trim().toLowerCase().replaceAll(\"_\" , \" \").equals(backPackable.getName())) {\r\n                    if (player.getInventory().getItemCount(backPackable.getName())<artisanItem.getArtisanItemType().number) {\r\n                        return new Result(false , \"You dont have this material\");\r\n                    }\r\n                    Game game = App.currentGame;\r\n                    artisanItem.setHour(game.getDateAndTime().getHour());\r\n                    artisanItem.setDay(game.getDateAndTime().getDay());\r\n                    player.getArtisanItems().add(artisanItem);\r\n                    return new Result(true , \"artisan item made successfully\");\r\n                }\r\n        }\r\n        return new Result(false , \"You dont have this material\");\r\n    }\r\n    public static Result GetArtisan(String artisanName) {\r\n        artisanName = artisanName.trim().toLowerCase().replaceAll(\"_\" , \" \");\r\n        Player player = App.currentGame.getCurrentPlayer();\r\n        ArtisanItem temp = null;\r\n        for (ArtisanItem artisanItem : player.getArtisanItems()) {\r\n            if (artisanItem.getName().equals(artisanName)) {\r\n                temp = artisanItem;\r\n            }\r\n        }\r\n        if (temp == null) {\r\n            return new Result(false, \"Artisan item not found\");\r\n        }\r\n        Game game = App.currentGame;\r\n        if (temp.getArtisanItemType().productionTimeInHours==0){\r\n            if (temp.getDay()>game.getDateAndTime().getDay()) {\r\n                player.getInventory().addToBackPack(temp ,1);\r\n                player.getArtisanItems().remove(temp);\r\n                return new Result(true , \"You receive Artisan item successfully\");\r\n            }\r\n            return new Result(false, \"Artisan item is not ready\");\r\n        }\r\n        int hour = 0;\r\n        hour += (game.getDateAndTime().getHour()-temp.getHour());\r\n        hour += (game.getDateAndTime().getDay()-temp.getDay())*24;\r\n        if(temp.getArtisanItemType().productionTimeInHours>hour) {\r\n            return new Result(false, \"Artisan item is not ready\");\r\n        }\r\n        player.getInventory().addToBackPack(temp ,1);\r\n        player.getArtisanItems().remove(temp);\r\n        return new Result(true , \"You receive Artisan item successfully\");\r\n    }\r\n    public static Result Cooking(String Rcipe){\r\n        Rcipe = Rcipe.trim().toLowerCase().replaceAll(\"_\" , \" \");\r\n        Player player = App.currentGame.getCurrentPlayer();\r\n        if (player.getInventory().getCapacity() == player.getInventory().getItems().size()) {\r\n            return new Result(false, \"Your inventory is full\");\r\n        }\r\n        Food food = null;\r\n        for (Food availableFood : player.getAvailableFoods()) {\r\n            if (availableFood.getName().equals(Rcipe)) {\r\n                food = availableFood;\r\n            }\r\n        }\r\n        if (food == null) {\r\n            return new Result(false, \"You can't cook this food\");\r\n        }\r\n        FoodType ingredient = null;\r\n        for(FoodType foodRecipe : FoodType.values()) {\r\n            if (foodRecipe.getName().equals(Rcipe)) {\r\n                ingredient = foodRecipe;\r\n            }\r\n        }\r\n        Tile tile = App.currentGame.getTile(getCurrentPlayer().getPosition());\r\n        if(!(tile.getArea() instanceof House playersHouse)){\r\n            return new Result(false, \"You must be in your house\");\r\n        }\r\n        Fridge fridge = playersHouse.getFridge();\r\n        for (BackPackable backPackable : ingredient.ingredients.keySet()) {\r\n            boolean find = false;\r\n            for (BackPackable packable : player.getInventory().getItems().keySet()) {\r\n                if (backPackable.getName().equals(packable.getName())) {\r\n                    if(player.getInventory().getItemCount(packable.getName())< ingredient.ingredients.get(backPackable)) {\r\n                        return new Result(false, \"You dont have enough material\");\r\n                    }\r\n                    find = true;\r\n                    break;\r\n                }\r\n            }\r\n            if(!find){\r\n                BackPackable packable = fridge.getItemByName(backPackable.getName());\r\n                if(packable!=null){\r\n                    find = true;\r\n                }\r\n                if(fridge.getItemCount(backPackable.getName())<ingredient.ingredients.get(backPackable)) {\r\n                    return new Result(false, \"You dont have enough material\");\r\n                }\r\n            }\r\n            if (!find) {\r\n                return new Result(false, \"You don't have enough material\");\r\n            }\r\n        }\r\n        for (BackPackable backPackable : ingredient.ingredients.keySet()) {\r\n            int num = ingredient.ingredients.get(backPackable);\r\n            player.getInventory().removeCountFromBackPack(backPackable , num);\r\n        }\r\n        for (BackPackable packable : ingredient.ingredients.keySet()) {\r\n            int num = ingredient.ingredients.get(packable);\r\n            int number = fridge.getItemCount(packable.getName());\r\n            fridge.removeFromFridge(packable);\r\n            fridge.addToFridge(packable , number-num);\r\n        }\r\n        player.getInventory().addToBackPack(food ,1);\r\n        return new Result(true , \"You cook this food\");\r\n    }\r\n    public static void StartTrade(){\r\n        Player player = App.currentGame.getCurrentPlayer();\r\n        System.out.println(\"new trade offers:\");\r\n        for (TradeWhitMoney tradeWhitMoney : player.getTradesWhitMoney()) {\r\n            if (tradeWhitMoney.getType().equals(\"offer\")){\r\n                if (tradeWhitMoney.isNewTrade()){\r\n                    System.out.println(\"user: \"+tradeWhitMoney.getSeller().getUsername()+\r\n                            \" item: \"+ tradeWhitMoney.getName() + \" amount: \"+ tradeWhitMoney.getAmount()+\r\n                            \" price: \"+ tradeWhitMoney.getMoney());\r\n                    tradeWhitMoney.setNewTrade(false);\r\n                }\r\n            }\r\n        }\r\n        for (TradeWithItem tradeWhitItem : player.getTradesWithItem()) {\r\n            if (tradeWhitItem.getType().equals(\"offer\")){\r\n                if (tradeWhitItem.isNewTrade()){\r\n                    System.out.println(\"user: \"+tradeWhitItem.getSeller().getUsername()+\r\n                            \" item: \"+ tradeWhitItem.getName() + \" amount: \"+ tradeWhitItem.getAmount()+\r\n                            \" target item: \"+ tradeWhitItem.getTargetName() + \" number of target item: \"+ tradeWhitItem.getTargetAmount());\r\n                    tradeWhitItem.setNewTrade(false);\r\n                }\r\n            }\r\n        }\r\n        System.out.println(\"new trade requests:\");\r\n        for (TradeWhitMoney tradeWhitMoney : player.getTradesWhitMoney()) {\r\n            if (tradeWhitMoney.getType().equals(\"request\")){\r\n                if (tradeWhitMoney.isNewTrade()){\r\n                    System.out.println(\"user: \"+tradeWhitMoney.getBuyer().getUsername()+\r\n                            \" item: \"+ tradeWhitMoney.getName() + \" amount: \"+ tradeWhitMoney.getAmount()+\r\n                            \" price: \"+ tradeWhitMoney.getMoney());\r\n                    tradeWhitMoney.setNewTrade(false);\r\n                }\r\n            }\r\n        }\r\n        for (TradeWithItem tradeWhitItem : player.getTradesWithItem()) {\r\n            if (tradeWhitItem.getType().equals(\"request\")){\r\n                if (tradeWhitItem.isNewTrade()){\r\n                    System.out.println(\"user: \"+tradeWhitItem.getBuyer().getUsername()+\r\n                            \" item: \"+ tradeWhitItem.getName() + \" amount: \"+ tradeWhitItem.getAmount()+\r\n                            \" target item: \"+ tradeWhitItem.getTargetName() + \" number of target item: \"+ tradeWhitItem.getTargetAmount());\r\n                    tradeWhitItem.setNewTrade(false);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/controllers/GameMenuController.java b/src/main/java/controllers/GameMenuController.java
--- a/src/main/java/controllers/GameMenuController.java	(revision 9600f74ce9f40bdf6ce4f3eb8aa4c2a8daf43e90)
+++ b/src/main/java/controllers/GameMenuController.java	(date 1747234532954)
@@ -989,7 +989,7 @@
     public static Result friendShipNPCList(){
         Player player = getCurrentPlayer();
         StringBuilder answer = new StringBuilder();
-        for(NPC npc : DefaultNPCs.getInstance().defaultOnes().values()){
+        for(NPC npc : DefaultNPCs.getInstance().getDefaultOnes().values()){
             if(npc.getFriendships().getOrDefault(player,null)!=null){
                 NPCFriendShip friendship = npc.getFriendships().get(player);
                 answer.append("npc name: "+npc.getName()+"\n"
@@ -1007,7 +1007,7 @@
         StringBuilder answer = new StringBuilder();
         List<Quest> quests = new ArrayList<>();
         int number = 1;
-        for (NPC npc : DefaultNPCs.getInstance().defaultOnes().values()) {
+        for (NPC npc : DefaultNPCs.getInstance().getDefaultOnes().values()) {
             NPCFriendShip fs = npc.getFriendships().get(player);
             if (fs != null) {
                 for (Quest q : fs.getPlayerQuests().keySet()) {
@@ -1025,7 +1025,7 @@
         Player player = App.currentGame.getCurrentPlayer();
         ArrayList<Quest> quests = new ArrayList<>();
         ArrayList<NPCFriendShip> friendships = new ArrayList<>();
-        for(NPC npc : DefaultNPCs.getInstance().defaultOnes().values()){
+        for(NPC npc : DefaultNPCs.getInstance().getDefaultOnes().values()){
             NPCFriendShip fs = npc.getFriendships().get(player);
             if (fs != null) {
                 for (Quest q : fs.getPlayerQuests().keySet()) {
Index: src/main/java/controllers/MainMenuController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package controllers;\r\n\r\nimport models.*;\r\n\r\nimport java.util.ArrayList;\r\n\r\npublic class MainMenuController {\r\n    public static Result startGame(String username1, String username2, String username3) {\r\n        ArrayList<User> gameUsers = new ArrayList<>();\r\n\r\n        if(username1 != null) {\r\n            User user1 = App.getUserByUsername(username1);\r\n            gameUsers.add(user1);\r\n        }\r\n        if(username2 != null) {\r\n            User user2 = App.getUserByUsername(username2);\r\n            gameUsers.add(user2);\r\n        }\r\n        if(username3 != null) {\r\n            User user3 = App.getUserByUsername(username3);\r\n            gameUsers.add(user3);\r\n        }\r\n\r\n        if(username1 == null && username2 == null && username3 == null) {\r\n            return new Result(false, \"flag can not be totally empty!\");\r\n        }\r\n\r\n        ArrayList<Player> players = new ArrayList<>();\r\n        players.add(new Player(App.currentUser));\r\n\r\n        for (User user : gameUsers) {\r\n            if (user == null) {\r\n                return new Result(false, \"make sure all usernames are valid.\");\r\n            }\r\n            else if (user.equals(App.currentUser)) {\r\n                return new Result(false, \"make sure not to use usernames more than once.\");\r\n            }\r\n\r\n            for (Game game : App.recentGames) {\r\n                for (Player player : game.getPlayers()) {\r\n                    if (player.getUsername().equals(user.getUsername())) {\r\n                        return new Result(false, player.getUsername() + \" is already in another game!\");\r\n                    }\r\n                }\r\n            }\r\n\r\n            players.add(new Player(user));\r\n        }\r\n\r\n        Game game = new Game(players);\r\n        game.setMainPlayer(players.get(0));\r\n        App.currentGame = game;\r\n        App.recentGames.add(game);\r\n\r\n        return new Result(true, \"Game started!\");\r\n    }\r\n\r\n    public static Result loadGame() {\r\n        for (Game game : App.recentGames) {\r\n            for (Player player : game.getPlayers()) {\r\n                if (player.getUsername().equals(App.currentUser.getUsername())) {\r\n                    App.currentGame = game;\r\n                    game.setMainPlayer(player);\r\n                    return new Result(true, \"game loaded successfully!\");\r\n                }\r\n            }\r\n        }\r\n\r\n        return new Result(false, \"you are not part of any game!\");\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/controllers/MainMenuController.java b/src/main/java/controllers/MainMenuController.java
--- a/src/main/java/controllers/MainMenuController.java	(revision 9600f74ce9f40bdf6ce4f3eb8aa4c2a8daf43e90)
+++ b/src/main/java/controllers/MainMenuController.java	(date 1747233960682)
@@ -1,6 +1,8 @@
 package controllers;
 
 import models.*;
+import models.npcs.DefaultNPCs;
+import models.npcs.NPC;
 
 import java.util.ArrayList;
 
Index: src/main/java/models/npcs/Quest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package models.npcs;\r\n\r\nimport models.tools.BackPackable;\r\n\r\npublic class Quest {\r\n    BackPackable request;\r\n    BackPackable reward;\r\n    int requestAmount;\r\n    int rewardAmount;\r\n    boolean doneBySomeone = false;\r\n\r\n    public Quest(BackPackable request, BackPackable reward, int requestAmount, int rewardAmount) {\r\n        this.request = request;\r\n        this.reward = reward;\r\n        this.requestAmount = requestAmount;\r\n        this.rewardAmount = rewardAmount;\r\n    }\r\n\r\n    public BackPackable getRequest() {\r\n        return request;\r\n    }\r\n\r\n    public boolean isDoneBySomeone() {\r\n        return doneBySomeone;\r\n    }\r\n\r\n    public BackPackable getReward() {\r\n        return reward;\r\n    }\r\n\r\n    public int getRewardAmount() {\r\n        return rewardAmount;\r\n    }\r\n\r\n    public int getRequestAmount() {\r\n        return requestAmount;\r\n    }\r\n\r\n    public void setDoneBySomeone(boolean doneBySomeone) {\r\n        this.doneBySomeone = doneBySomeone;\r\n    }\r\n\r\n    public String getInfo(int number) {\r\n        return String.format(\r\n                \"%d : Deliver %d × %s → Reward: %d × %s\",\r\n                number,\r\n                requestAmount,\r\n                request.getName(),\r\n                rewardAmount,\r\n                reward.getName()\r\n        );\r\n    }\r\n\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/models/npcs/Quest.java b/src/main/java/models/npcs/Quest.java
--- a/src/main/java/models/npcs/Quest.java	(revision 9600f74ce9f40bdf6ce4f3eb8aa4c2a8daf43e90)
+++ b/src/main/java/models/npcs/Quest.java	(date 1747234622335)
@@ -42,7 +42,7 @@
 
     public String getInfo(int number) {
         return String.format(
-                "%d : Deliver %d × %s → Reward: %d × %s",
+                "%d : Deliver %d × %s → Reward: %d × %s\n",
                 number,
                 requestAmount,
                 request.getName(),
Index: src/main/java/models/Game.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package models;\r\n\r\nimport models.map.Map;\r\nimport models.map.Position;\r\nimport models.map.Tile;\r\nimport models.relation.PlayerFriendship;\r\nimport models.time.DateAndTime;\r\nimport models.time.TimeObserver;\r\nimport models.weather.WeatherManagement;\r\n\r\nimport java.util.ArrayList;\r\n\r\n\r\npublic class Game implements TimeObserver {\r\n    private ArrayList<Player> players = new ArrayList<>();\r\n    private Player mainPlayer;\r\n    private Player currentPlayer;\r\n\r\n    private DateAndTime dateAndTime;\r\n    private WeatherManagement weather;\r\n\r\n    private ArrayList<ArrayList<Tile>> mapTiles;\r\n    private Map map;\r\n\r\n    private final ArrayList<PlayerFriendship> friendships = new ArrayList<>();\r\n\r\n    private boolean finished = false;\r\n\r\n    public Game(ArrayList<Player> players) {\r\n        this.players = players;\r\n        for (Player player : players) {\r\n            player.setGame(this);\r\n        }\r\n        this.currentPlayer = players.get(0);\r\n    }\r\n    public void build() {\r\n        dateAndTime = new DateAndTime();\r\n        weather = new WeatherManagement();\r\n\r\n        dateAndTime.addObserver(weather);\r\n        for(Player player : players) {\r\n            dateAndTime.addObserver(player);\r\n        }\r\n        for(int i = 0; i < players.size() - 1; i++) {\r\n            for (int j = i + 1; j < players.size(); j++) {\r\n                PlayerFriendship friendship = new PlayerFriendship(players.get(i), players.get(j));\r\n                dateAndTime.addObserver(friendship);\r\n                friendships.add(friendship);\r\n            }\r\n        }\r\n\r\n        mapTiles = Tile.buildMapTiles();\r\n        map = new Map(mapTiles);\r\n        map.build();\r\n        dateAndTime.addObserver(map);\r\n    }\r\n\r\n    public ArrayList<Player> getPlayers() {\r\n        return players;\r\n    }\r\n    public Player getMainPlayer() {\r\n        return mainPlayer;\r\n    }\r\n    public Player getCurrentPlayer() {\r\n        return currentPlayer;\r\n    }\r\n    public Player getPlayerByUsername(String username) {\r\n        for (Player player : players) {\r\n            if (player.getUsername().equals(username)) {\r\n                return player;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    public void setMainPlayer(Player mainPlayer) {\r\n        this.mainPlayer = mainPlayer;\r\n    }\r\n    public void nextTurn() {\r\n        boolean allFainted = true;\r\n        for(Player player : players) {\r\n            allFainted = allFainted && player.isFainted();\r\n        }\r\n        if(allFainted) {\r\n            dateAndTime.nextDay();\r\n            return;\r\n        }\r\n\r\n        int currentIndex = players.indexOf(currentPlayer);\r\n        int nextIndex = (currentIndex + 1) % players.size();\r\n        while (players.get(nextIndex).isFainted()) {\r\n            nextIndex = (nextIndex + 1) % players.size();\r\n        }\r\n\r\n        if(nextIndex == 0) {\r\n            dateAndTime.nextHour();\r\n        }\r\n\r\n        currentPlayer.unlock();\r\n        currentPlayer = players.get(nextIndex);\r\n    }\r\n\r\n    public DateAndTime getDateAndTime() {\r\n        return dateAndTime;\r\n    }\r\n    public WeatherManagement getWeather() {\r\n        return weather;\r\n    }\r\n\r\n    public boolean isFinished() {\r\n        return finished;\r\n    }\r\n    public void finish() {\r\n        this.finished = true;\r\n    }\r\n\r\n    public Tile getTile(int x, int y) {\r\n        return mapTiles.get(y).get(x);\r\n    }\r\n    public Tile getTile(Position position) {\r\n        return mapTiles.get(position.y).get(position.x);\r\n    }\r\n    public Map getMap() {\r\n        return map;\r\n    }\r\n\r\n    public ArrayList<PlayerFriendship> getFriendships() {\r\n        return friendships;\r\n    }\r\n    public PlayerFriendship getFriendshipByPlayers(Player p1, Player p2) {\r\n        for(PlayerFriendship friendship : friendships) {\r\n            if(friendship.isFriendship(p1, p2)) {\r\n                return friendship;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    @Override\r\n    public void update(DateAndTime dateAndTime) {\r\n\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/models/Game.java b/src/main/java/models/Game.java
--- a/src/main/java/models/Game.java	(revision 9600f74ce9f40bdf6ce4f3eb8aa4c2a8daf43e90)
+++ b/src/main/java/models/Game.java	(date 1747234532963)
@@ -3,6 +3,8 @@
 import models.map.Map;
 import models.map.Position;
 import models.map.Tile;
+import models.npcs.DefaultNPCs;
+import models.npcs.NPC;
 import models.relation.PlayerFriendship;
 import models.time.DateAndTime;
 import models.time.TimeObserver;
@@ -53,6 +55,12 @@
         map = new Map(mapTiles);
         map.build();
         dateAndTime.addObserver(map);
+
+        for(Player player : players ) {
+            for(NPC npc: DefaultNPCs.getInstance().getDefaultOnes().values()) {
+                npc.addFriendships(player);
+            }
+        }
     }
 
     public ArrayList<Player> getPlayers() {
